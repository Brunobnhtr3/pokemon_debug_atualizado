diff --git a/Battle.rb b/Battle.rb
index 8e561a8..463896b 100644
--- a/Battle.rb
+++ b/Battle.rb
@@ -497,7 +497,7 @@ class PokeBattle_Battle
 
   def pbWeather
     for i in 0...4
-      if @battlers[i].ability == :CLOUDNINE || @battlers[i].ability == :AIRLOCK || @field.effect == :UNDERWATER || @field.effect == :NEWWORLD
+      if @battlers[i].hasAbility?(:CLOUDNINE) || @battlers[i].hasAbility?(:AIRLOCK) || @field.effect == :UNDERWATER || @field.effect == :NEWWORLD
         return 0
       end
     end
@@ -516,7 +516,7 @@ class PokeBattle_Battle
       statupanimplayed=false
       statdownanimplayed=false
       seeddata[:stats].each_pair {|stat,statval|
-        statval *= -1 if battler.ability == :CONTRARY
+        statval *= -1 if battler.hasAbility?(:CONTRARY)
         if statval > 0 && !battler.pbTooHigh?(stat)
           battler.pbIncreaseStatBasic(stat,statval)
           @battle.pbCommonAnimation("StatUp",battler) if !statupanimplayed
@@ -591,7 +591,7 @@ class PokeBattle_Battle
           return
 
         when :UNDERWATER
-          if battler.ability == :MULTITYPE || battler.ability == :RKSSYSTEM
+          if battler.hasAbility?(:MULTITYPE) || battler.hasAbility?(:RKSSYSTEM)
             battler.pbDisposeItem(false)
             return
           end
@@ -602,7 +602,7 @@ class PokeBattle_Battle
           return
 
         when :GLITCH
-          if battler.ability == :MULTITYPE || battler.ability == :RKSSYSTEM
+          if battler.hasAbility?(:MULTITYPE) || battler.hasAbility?(:RKSSYSTEM)
             battler.pbDisposeItem(false)
             return
           end
@@ -780,7 +780,7 @@ class PokeBattle_Battle
   def neutralizingGasDisable(index)
     gasactive = false
     for i in 0...4
-      gasactive = true if @battle.battlers[i].ability == :NEUTRALIZINGGAS && i!=index
+      gasactive = true if @battle.battlers[i].hasAbility?(:NEUTRALIZINGGAS) && i!=index
     end
     if !gasactive
       for i in 0...4
@@ -1160,7 +1160,7 @@ class PokeBattle_Battle
       end
       return false
     end
-    if thispkmn.effects[:ChoiceBand] != nil && thispkmn.itemWorks? && (thispkmn.item == :CHOICEBAND || thispkmn.item == :CHOICESPECS || thispkmn.item == :CHOICESCARF) || thispkmn.ability == :GORILLATACTICS
+    if thispkmn.effects[:ChoiceBand] != nil && thispkmn.itemWorks? && (thispkmn.item == :CHOICEBAND || thispkmn.item == :CHOICESPECS || thispkmn.item == :CHOICESCARF) || thispkmn.hasAbility?(:GORILLATACTICS)
       if thispkmn.moves.any? {|moveloop| moveloop.move==thispkmn.effects[:ChoiceBand]} && (basemove.move!=thispkmn.effects[:ChoiceBand] && sleeptalk == false)
         if showMessages
           pbDisplayPaused(_INTL("{1} allows the use of only {2}!",
@@ -1315,19 +1315,19 @@ class PokeBattle_Battle
         pri = @choices[i][2].priority if !@choices[i][2].zmove  #Base move priority
         pri -= 1 if @battle.FE == :DEEPEARTH && @choices[i][2].move == :COREENFORCER
         pri += 1 if @field.effect == :CHESS && @battlers[i].pokemon && @battlers[i].pokemon.piece == :KING
-        pri += 1 if @battlers[i].ability == :PRANKSTER && @choices[i][2].basedamage==0 && @battlers[i].effects[:TwoTurnAttack] == 0 # Is status move
-        pri += 1 if @battlers[i].ability == :GALEWINGS && @choices[i][2].type==:FLYING && ((@battlers[i].hp == @battlers[i].totalhp) || ((@field.effect == :MOUNTAIN || @field.effect == :SNOWYMOUNTAIN) && @weather == :STRONGWINDS))
+        pri += 1 if @battlers[i].hasAbility?(:PRANKSTER) && @choices[i][2].basedamage==0 && @battlers[i].effects[:TwoTurnAttack] == 0 # Is status move
+        pri += 1 if @battlers[i].hasAbility?(:GALEWINGS) && @choices[i][2].type==:FLYING && ((@battlers[i].hp == @battlers[i].totalhp) || ((@field.effect == :MOUNTAIN || @field.effect == :SNOWYMOUNTAIN) && @weather == :STRONGWINDS))
         pri += 1 if @choices[i][2].move == :GRASSYGLIDE && (@field.effect == :GRASSY || @battle.state.effects[:GRASSY] > 0)
         pri += 1 if @choices[i][2].move == :QUASH && @field.effect == :DIMENSIONAL
         pri += 1 if @choices[i][2].basedamage != 0 && @battlers[i].species == :FERALIGATR && @battlers[i].crested && @battlers[i].turncount == 0 # Feraligatr Crest
-        pri += 3 if @battlers[i].ability == :TRIAGE && (PBStuff::HEALFUNCTIONS).include?(@choices[i][2].function)
+        pri += 3 if @battlers[i].hasAbility?(:TRIAGE) && (PBStuff::HEALFUNCTIONS).include?(@choices[i][2].function)
       end
       priorityarray[i][0]=pri
 
       #Item/stall priority (all items overwrite stall priority)
-      priorityarray[i][1] = -1 if @battlers[i].ability == :STALL 
+      priorityarray[i][1] = -1 if @battlers[i].hasAbility?(:STALL) 
       if !ignorequickclaw && @choices[i][0] == 1 # Is a move
-        if (@battlers[i].ability == :QUICKDRAW && (pbRandom(100)<30))
+        if (@battlers[i].hasAbility?(:QUICKDRAW) && (pbRandom(100)<30))
           priorityarray[i][1] = 1
           quickclawarray[i] = :QUICKDRAW
         elsif (@battlers[i].itemWorks? && @battlers[i].item == :QUICKCLAW && (pbRandom(100)<20))
@@ -1363,7 +1363,7 @@ class PokeBattle_Battle
     # Quick claw battle message
     for i in 0..3
       @priority[i] = @battlers[priorityarray[i][3]]
-      if (@battlers[i].ability == :QUICKDRAW) && quickclawarray[priorityarray[i][3]]==:QUICKDRAW
+      if (@battlers[i].hasAbility?(:QUICKDRAW)) && quickclawarray[priorityarray[i][3]]==:QUICKDRAW
         if priorityarray[i][1] == 1 && !ignorequickclaw
           @battlers[i].effects[:Quickdrawsnipe] if @battle.FE == :COLOSSEUM
           pbDisplayBrief(_INTL("{1}'s Quick Draw let it move first!",@priority[i].pbThis))
@@ -1515,7 +1515,7 @@ class PokeBattle_Battle
       pbDisplayPaused(_INTL("{1} can't be switched out while on Colosseum Field!",thispkmn.pbThis)) if showMessages  
       return false
     end
-    if thispkmn.hasType?(:GHOST) && (@field.effect != :DIMENSIONAL || !(thispkmn.pbOpposing1.ability == :SHADOWTAG || thispkmn.pbOpposing2.ability == :SHADOWTAG))
+    if thispkmn.hasType?(:GHOST) && (@field.effect != :DIMENSIONAL || !(thispkmn.pbOpposing1.hasAbility?(:SHADOWTAG) || thispkmn.pbOpposing2.hasAbility?(:SHADOWTAG)))
       return true
     end
     if @field.effect == :INFERNAL && thispkmn.status ==:SLEEP && (thispkmn.pbOpposing1.ability == (:BADDREAMS) || thispkmn.pbOpposing2.ability == (:BADDREAMS))
@@ -1547,16 +1547,16 @@ class PokeBattle_Battle
     opp2=thispkmn.pbOpposing2
     opp=nil
     if thispkmn.hasType?(:STEEL)
-      opp=opp1 if opp1.ability == :MAGNETPULL
-      opp=opp2 if opp2.ability == :MAGNETPULL
+      opp=opp1 if opp1.hasAbility?(:MAGNETPULL)
+      opp=opp2 if opp2.hasAbility?(:MAGNETPULL)
     end
     if !thispkmn.isAirborne?
-      opp=opp1 if opp1.ability == :ARENATRAP
-      opp=opp2 if opp2.ability == :ARENATRAP
+      opp=opp1 if opp1.hasAbility?(:ARENATRAP)
+      opp=opp2 if opp2.hasAbility?(:ARENATRAP)
     end
-    unless thispkmn.ability == :SHADOWTAG
-      opp=opp1 if opp1.ability == :SHADOWTAG
-      opp=opp2 if opp2.ability == :SHADOWTAG
+    unless thispkmn.hasAbility?(:SHADOWTAG)
+      opp=opp1 if opp1.hasAbility?(:SHADOWTAG)
+      opp=opp2 if opp2.hasAbility?(:SHADOWTAG)
     end
     if opp
       abilityname=getAbilityName(opp.ability)
@@ -1660,7 +1660,7 @@ class PokeBattle_Battle
       end
       if newpoke != nil
         for j in 0..index
-         if (@battlers[j].ability == :TRACE) && @battlers[j].turncount > 0
+         if (@battlers[j].hasAbility?(:TRACE)) && @battlers[j].turncount > 0
           @battlers[j].pbAbilitiesOnSwitchIn(true)
          end
         end
@@ -1706,7 +1706,7 @@ class PokeBattle_Battle
       @battlers[index].unburdened=false
       @battlers[index].speed/=2
     end
-    neutralizingGasDisable(index) if @battlers[index].ability == :NEUTRALIZINGGAS
+    neutralizingGasDisable(index) if @battlers[index].hasAbility?(:NEUTRALIZINGGAS)
     party=pbParty(index)
     if pbOwnedByPlayer?(index)
       # Reorder the party for this battle
@@ -1745,7 +1745,7 @@ class PokeBattle_Battle
       @battlers[index].unburdened=false
       @battlers[index].speed/=2
     end
-    neutralizingGasDisable(index) if @battlers[index].ability == :NEUTRALIZINGGAS
+    neutralizingGasDisable(index) if @battlers[index].hasAbility?(:NEUTRALIZINGGAS)
     @battlers[index].vanished = false if @battlers[index].vanished
     @switchedOut[index] = true
     pbClearChoices(index)
@@ -1800,7 +1800,7 @@ class PokeBattle_Battle
     partynumber = pbParty(index)
     party=pbPartySingleOwner(index)
     newname=nil
-    if (partynumber[newpoke].ability == :ILLUSION)
+    if (partynumber[newpoke].hasAbility?(:ILLUSION))
       party2=party.find_all {|item| item && !item.egg? && item.hp>0 }
       if party2[-1] != partynumber[newpoke] #last mon isn't the same illusion mon
         illusionpoke = party2[-1]
@@ -2009,7 +2009,7 @@ class PokeBattle_Battle
     thispkmn=@battlers[idxPokemon]
     return true if thispkmn.hasWorkingItem(:SMOKEBALL)
     return true if thispkmn.hasWorkingItem(:MAGNETICLURE)
-    return true if thispkmn.ability == :RUNAWAY
+    return true if thispkmn.hasAbility?(:RUNAWAY)
     return pbCanSwitch?(idxPokemon,-1,false)
   end
 
@@ -2071,7 +2071,7 @@ class PokeBattle_Battle
       @decision=3
       return 1
     end
-    if thispkmn.ability == :RUNAWAY
+    if thispkmn.hasAbility?(:RUNAWAY)
       if duringBattle
         pbSEPlay("escape",100)
         pbDisplayPaused(_INTL("Got away safely!"))
@@ -2734,7 +2734,7 @@ class PokeBattle_Battle
       end
       # Neutralizing Gas
       if pbCheckGlobalAbility(:NEUTRALIZINGGAS)
-        pkmn.ability = nil if !(PBStuff::FIXEDABILITIES).include?(pkmn.ability) && pkmn.ability != :NEUTRALIZINGGAS
+        pkmn.ability = nil if !(PBStuff::FIXEDABILITIES).any? { |a| pkmn.hasAbility?(a) } && pkmn.ability != :NEUTRALIZINGGAS
       end
       # Balloon
       if pkmn.hasWorkingItem(:AIRBALLOON)
@@ -2808,7 +2808,7 @@ class PokeBattle_Battle
       pkmn.pbOwnSide.effects[:Spikes]=0 if @field.effect == :WATERSURFACE || @field.effect == :MURKWATERSURFACE || @field.effect == :SKY || @field.effect == :CLOUDS
       if pkmn.pbOwnSide.effects[:Spikes]>0
         if (!pkmn.isAirborne? || (Rejuv && @battle.FE == :ELECTERRAIN)) && !pkmn.hasWorkingItem(:HEAVYDUTYBOOTS)
-          if pkmn.ability != :MAGICGUARD && !(pkmn.ability == :WONDERGUARD && @battle.FE == :COLOSSEUM)
+          if pkmn.ability != :MAGICGUARD && !(pkmn.hasAbility?(:WONDERGUARD) && @battle.FE == :COLOSSEUM)
             spikesdiv=[8,8,6,4][pkmn.pbOwnSide.effects[:Spikes]]
             if Rejuv && @battle.FE == :ELECTERRAIN
               atype == :ELECTRIC
@@ -2848,7 +2848,7 @@ class PokeBattle_Battle
       end
       # Stealth Rock
       if pkmn.pbOwnSide.effects[:StealthRock]
-        if pkmn.ability != :MAGICGUARD && !(pkmn.ability == :WONDERGUARD && @battle.FE == :COLOSSEUM) && !pkmn.hasWorkingItem(:HEAVYDUTYBOOTS)
+        if pkmn.ability != :MAGICGUARD && !(pkmn.hasAbility?(:WONDERGUARD) && @battle.FE == :COLOSSEUM) && !pkmn.hasWorkingItem(:HEAVYDUTYBOOTS)
           atype = :ROCK
           atype = @field.getRoll if @field.effect == :CRYSTALCAVERN
           atype = :FIRE if @field.effect == :VOLCANICTOP || @field.effect == :INFERNAL || (Rejuv && @field.effect == :DRAGONSDEN)
@@ -2898,8 +2898,8 @@ class PokeBattle_Battle
       end
       # Corrosive Field Entry
       if @field.effect == :CORROSIVE
-        if !(pkmn.ability == :MAGICGUARD || pkmn.ability == :POISONHEAL || pkmn.ability == :IMMUNITY || pkmn.ability == :WONDERGUARD || 
-            pkmn.ability == :TOXICBOOST || pkmn.ability == :PASTELVEIL) && !pkmn.isAirborne? && !pkmn.hasType?(:POISON) && !pkmn.hasType?(:STEEL) && !(pkmn.species == :ZANGOOSE && pkmn.crested)
+        if !(pkmn.hasAbility?(:MAGICGUARD) || pkmn.hasAbility?(:POISONHEAL) || pkmn.hasAbility?(:IMMUNITY) || pkmn.hasAbility?(:WONDERGUARD) || 
+            pkmn.hasAbility?(:TOXICBOOST) || pkmn.hasAbility?(:PASTELVEIL)) && !pkmn.isAirborne? && !pkmn.hasType?(:POISON) && !pkmn.hasType?(:STEEL) && !(pkmn.species == :ZANGOOSE && pkmn.crested)
           atype = :POISON
           eff=PBTypes.twoTypeEff(atype,pkmn.type1,pkmn.type2)
           if eff>0
@@ -2911,9 +2911,9 @@ class PokeBattle_Battle
         end
       end
       if ProgressiveFieldCheck(PBFields::CONCERT,3,4)
-        if (pkmn.status == :SLEEP || pkmn.ability == :COMATOSE)
+        if (pkmn.status == :SLEEP || pkmn.hasAbility?(:COMATOSE))
           pkmn.status=nil if pkmn.status == :SLEEP
-          pkmn.ability=nil if pkmn.ability == :COMATOSE
+          pkmn.ability=nil if pkmn.hasAbility?(:COMATOSE)
           pkmn.pbReduceHP(pkmn.totalhp/4)
           pbDisplay(_INTL("The Concert's noise could wake up even the dead!"))
         end
@@ -3867,7 +3867,7 @@ class PokeBattle_Battle
       case @field.effect
         when :ELECTERRAIN # Electric Terrain
           next if i.hp<=0
-          if i.ability == :VOLTABSORB && i.effects[:HealBlock]==0 && Rejuv
+          if i.hasAbility?(:VOLTABSORB) && i.effects[:HealBlock]==0 && Rejuv
             hpgain=(i.totalhp/16.0).floor
             hpgain=i.pbRecoverHP(hpgain,true)
             pbDisplay(_INTL("{1} absorbed stray electricity!",i.pbThis)) if hpgain>0
@@ -3880,7 +3880,7 @@ class PokeBattle_Battle
             hpgain=(i.totalhp/16.0).floor
             hpgain=i.pbRecoverHP(hpgain,true)
           end
-          if i.ability == :SAPSIPPER && i.effects[:HealBlock]==0
+          if i.hasAbility?(:SAPSIPPER) && i.effects[:HealBlock]==0
             hpgain=(i.totalhp/16.0).floor
             hpgain=i.pbRecoverHP(hpgain,true)
             pbDisplay(_INTL("{1} drank tree sap to recover!",i.pbThis)) if hpgain>0
@@ -3888,7 +3888,7 @@ class PokeBattle_Battle
         when :BURNING, :VOLCANIC, :INFERNAL # Burning Field
           next if i.hp<=0
           if !i.isAirborne?
-            if (i.ability == :FLASHFIRE)
+            if (i.hasAbility?(:FLASHFIRE))
               if !i.effects[:FlashFire]
                 i.effects[:FlashFire]=true
                 pbDisplay(_INTL("{1}'s {2} raised its Fire power!", i.pbThis,getAbilityName(i.ability)))
@@ -3898,7 +3898,7 @@ class PokeBattle_Battle
               eff=PBTypes.twoTypeEff(:FIRE,i.type1,i.type2)
               if eff>0
                 @scene.pbDamageAnimation(i,0)
-                if (i.ability == :LEAFGUARD) || (i.ability == :ICEBODY) || (i.ability == :FLUFFY) || (i.ability == :GRASSPELT)
+                if (i.hasAbility?(:LEAFGUARD)) || (i.hasAbility?(:ICEBODY)) || (i.hasAbility?(:FLUFFY)) || (i.hasAbility?(:GRASSPELT))
                   eff = eff*2
                 end
                 eff = eff*2 if (i.effects[:TarShot])
@@ -3913,7 +3913,7 @@ class PokeBattle_Battle
           end
         when :CORROSIVE # Corrosive Field
           next if i.hp<=0
-          if i.ability == :GRASSPELT
+          if i.hasAbility?(:GRASSPELT)
             @scene.pbDamageAnimation(i,0)
             i.pbReduceHP((i.totalhp/8.0).floor)
             pbDisplay(_INTL("{1}'s Pelt was corroded!",i.pbThis))
@@ -3921,7 +3921,7 @@ class PokeBattle_Battle
               return if !i.pbFaint
             end
           end
-          if (i.ability == :POISONHEAL || (i.species == :ZANGOOSE && i.crested)) && !i.isAirborne? && i.effects[:HealBlock]==0 && i.hp<i.totalhp
+          if (i.hasAbility?(:POISONHEAL) || (i.species == :ZANGOOSE && i.crested)) && !i.isAirborne? && i.effects[:HealBlock]==0 && i.hp<i.totalhp
             pbCommonAnimation("Poison",i,nil)
             i.pbRecoverHP((i.totalhp/8.0).floor,true)
             pbDisplay(_INTL("{1} was healed by poison!",i.pbThis))
@@ -3932,14 +3932,14 @@ class PokeBattle_Battle
             endmessage=true
             i.pbPoison(i)
           end
-          if (i.ability == :POISONHEAL || (i.species == :ZANGOOSE && i.crested)) && i.effects[:HealBlock]==0 && i.hp<i.totalhp
+          if (i.hasAbility?(:POISONHEAL) || (i.species == :ZANGOOSE && i.crested)) && i.effects[:HealBlock]==0 && i.hp<i.totalhp
             pbCommonAnimation("Poison",i,nil)
             i.pbRecoverHP((i.totalhp/8.0).floor,true)
             pbDisplay(_INTL("{1} was healed by poison!",i.pbThis))
           end
         when :FOREST # Forest Field
           next if i.hp<=0
-          if i.ability == :SAPSIPPER && i.effects[:HealBlock]==0
+          if i.hasAbility?(:SAPSIPPER) && i.effects[:HealBlock]==0
             hpgain=(i.totalhp/16.0).floor
             hpgain=i.pbRecoverHP(hpgain,true)
             pbDisplay(_INTL("{1} drank tree sap to recover!",i.pbThis)) if hpgain>0
@@ -4020,20 +4020,20 @@ class PokeBattle_Battle
           # eruption check - insane, too much, but makes typh op, so i no question
         when :SHORTCIRCUIT # Shortcircuit Field
           next if i.hp<=0
-          if i.ability == :VOLTABSORB && i.effects[:HealBlock]==0
+          if i.hasAbility?(:VOLTABSORB) && i.effects[:HealBlock]==0
             hpgain=(i.totalhp/16.0).floor
             hpgain=i.pbRecoverHP(hpgain,true)
             pbDisplay(_INTL("{1} absorbed stray electricity!",i.pbThis)) if hpgain>0
           end
         when :WASTELAND # Wasteland
-          if (i.ability == :POISONHEAL || (i.species == :ZANGOOSE && i.crested)) && !i.isAirborne? && i.effects[:HealBlock]==0 && i.hp<i.totalhp
+          if (i.hasAbility?(:POISONHEAL) || (i.species == :ZANGOOSE && i.crested)) && !i.isAirborne? && i.effects[:HealBlock]==0 && i.hp<i.totalhp
             pbCommonAnimation("Poison",i,nil)
             i.pbRecoverHP((i.totalhp/8.0).floor,true)
             pbDisplay(_INTL("{1} was healed by poison!",i.pbThis))
           end
         when :WATERSURFACE # Water Surface
           next if i.hp<=0
-          if (i.ability == :WATERABSORB || i.ability == :DRYSKIN) && i.effects[:HealBlock]==0 && !i.isAirborne?
+          if (i.hasAbility?(:WATERABSORB) || i.hasAbility?(:DRYSKIN)) && i.effects[:HealBlock]==0 && !i.isAirborne?
             hpgain=(i.totalhp/16.0).floor
             hpgain=i.pbRecoverHP(hpgain,true)
             pbDisplay(_INTL("{1} absorbed some of the water!",i.pbThis)) if hpgain>0
@@ -4044,7 +4044,7 @@ class PokeBattle_Battle
           end
         when :UNDERWATER
           next if i.hp<=0
-          if (i.ability == :WATERABSORB || i.ability == :DRYSKIN) && i.effects[:HealBlock]==0
+          if (i.hasAbility?(:WATERABSORB) || i.hasAbility?(:DRYSKIN)) && i.effects[:HealBlock]==0
             hpgain=(i.totalhp/16.0).floor
             hpgain=i.pbRecoverHP(hpgain,true)
             pbDisplay(_INTL("{1} absorbed some of the water!",i.pbThis)) if hpgain>0
@@ -4053,7 +4053,7 @@ class PokeBattle_Battle
             eff=PBTypes.twoTypeEff(:WATER,i.type1,i.type2)
             if eff>4
               @scene.pbDamageAnimation(i,0)
-              if i.ability == :FLAMEBODY || i.ability == :MAGMAARMOR
+              if i.hasAbility?(:FLAMEBODY) || i.hasAbility?(:MAGMAARMOR)
                 eff = eff*2
               end
               i.pbReduceHP([(i.totalhp*eff/32).floor,1].max)
@@ -4066,7 +4066,7 @@ class PokeBattle_Battle
         when :MURKWATERSURFACE # Murkwater Surface
           if i.murkyWaterSurfacePassiveDamage?
             eff=PBTypes.twoTypeEff(:POISON,i.type1,i.type2)
-            if i.ability == :FLAMEBODY || i.ability == :MAGMAARMOR || i.ability == :DRYSKIN || i.ability == :WATERABSORB
+            if i.hasAbility?(:FLAMEBODY) || i.hasAbility?(:MAGMAARMOR) || i.hasAbility?(:DRYSKIN) || i.hasAbility?(:WATERABSORB)
               eff = eff*2
             end
             if !$cache.moves[i.effects[:TwoTurnAttack]].nil? && 
@@ -4083,7 +4083,7 @@ class PokeBattle_Battle
           if i.isFainted?
             return if !i.pbFaint
           end
-          if i.hasType?(:POISON) && (i.ability == :DRYSKIN || i.ability == :WATERABSORB) || (i.ability == :POISONHEAL || (i.species == :ZANGOOSE && i.crested))  && !i.isAirborne? && i.effects[:HealBlock]==0 && i.hp<i.totalhp
+          if i.hasType?(:POISON) && (i.hasAbility?(:DRYSKIN) || i.hasAbility?(:WATERABSORB)) || (i.hasAbility?(:POISONHEAL) || (i.species == :ZANGOOSE && i.crested))  && !i.isAirborne? && i.effects[:HealBlock]==0 && i.hp<i.totalhp
             pbCommonAnimation("Poison",i,nil)
             i.pbRecoverHP((i.totalhp/8.0).floor,true)
             pbDisplay(_INTL("{1} was healed by the poisoned water!",i.pbThis))
@@ -4099,7 +4099,7 @@ class PokeBattle_Battle
           end
         when :CORRUPTED # Corrupted Cave Field (Rejuv)
           next if i.hp<=0
-          if i.ability == :GRASSPELT || i.ability == :LEAFGUARD || i.ability == :FLOWERVEIL
+          if i.hasAbility?(:GRASSPELT) || i.hasAbility?(:LEAFGUARD) || i.hasAbility?(:FLOWERVEIL)
             @scene.pbDamageAnimation(i,0)
             i.pbReduceHP((i.totalhp/8).floor)
             pbDisplay(_INTL("{1}'s foliage caused harm!",i.pbThis))
@@ -4141,7 +4141,7 @@ class PokeBattle_Battle
       end
       if @state.effects[:ELECTERRAIN] > 0
         next if i.hp<=0
-        if i.ability == :VOLTABSORB && i.effects[:HealBlock]==0
+        if i.hasAbility?(:VOLTABSORB) && i.effects[:HealBlock]==0
           hpgain=(i.totalhp/16.0).floor
           hpgain=i.pbRecoverHP(hpgain,true)
           pbDisplay(_INTL("{1} absorbed stray electricity!",i.pbThis)) if hpgain>0
@@ -4155,7 +4155,7 @@ class PokeBattle_Battle
           hpgain=(i.totalhp/16.0).floor
           hpgain=i.pbRecoverHP(hpgain,true)
         end
-        if i.ability == :SAPSIPPER && i.effects[:HealBlock]==0
+        if i.hasAbility?(:SAPSIPPER) && i.effects[:HealBlock]==0
           hpgain=(i.totalhp/16.0).floor
           hpgain=i.pbRecoverHP(hpgain,true)
           pbDisplay(_INTL("{1} drank tree sap to recover!",i.pbThis)) if hpgain>0
@@ -4196,7 +4196,7 @@ class PokeBattle_Battle
     #  @field.counter = 0 if @weather != :HAIL && @field.effect == :MOUNTAIN
     #end
     for i in priority
-      if i.ability == :TEMPEST
+      if i.hasAbility?(:TEMPEST)
         weathers=rand(5)
         case weathers
          when 0
@@ -4267,7 +4267,7 @@ class PokeBattle_Battle
           if pbWeather == :SUNNYDAY
             for i in priority
               next if i.isFainted?
-              if i.ability == :SOLARPOWER && @field.effect != :FROZENDIMENSION
+              if i.hasAbility?(:SOLARPOWER) && @field.effect != :FROZENDIMENSION
                 pbDisplay(_INTL("{1} was hurt by the sunlight!",i.pbThis))
                 @scene.pbDamageAnimation(i,0)
                 i.pbReduceHP((i.totalhp/8.0).floor)
@@ -4337,8 +4337,8 @@ class PokeBattle_Battle
             endmessage=false
             for i in priority
               next if i.isFainted?
-              if !i.hasType?(:GROUND) && !i.hasType?(:ROCK) && !i.hasType?(:STEEL) && !(i.ability == :SANDVEIL  || i.ability == :SANDRUSH ||
-                i.ability == :SANDFORCE || i.ability == :MAGICGUARD || i.ability == :TEMPEST || (i.ability == :WONDERGUARD && @field.effect == :COLOSSEUM) || i.ability == :OVERCOAT) &&
+              if !i.hasType?(:GROUND) && !i.hasType?(:ROCK) && !i.hasType?(:STEEL) && !(i.hasAbility?(:SANDVEIL)  || i.hasAbility?(:SANDRUSH) ||
+                i.hasAbility?(:SANDFORCE) || i.hasAbility?(:MAGICGUARD) || i.hasAbility?(:TEMPEST) || (i.hasAbility?(:WONDERGUARD) && @field.effect == :COLOSSEUM) || i.hasAbility?(:OVERCOAT)) &&
               !(i.item == :SAFETYGOGGLES) && ($cache.moves[i.effects[:TwoTurnAttack]].nil? || ![0xCA,0xCB].include?($cache.moves[i.effects[:TwoTurnAttack]].function)) # Dig, Dive
                 pbDisplay(_INTL("The Pokémon were buffeted by the sandstorm!",i.pbThis)) if !endmessage
                 endmessage=true
@@ -4378,7 +4378,7 @@ class PokeBattle_Battle
             endmessage=false
             for i in priority
               next if i.isFainted?
-              if !i.hasType?(:ICE) && i.ability != :TEMPEST && i.ability != :ICEBODY && i.ability != :SNOWCLOAK && i.ability != :MAGICGUARD && !(i.ability == :WONDERGUARD && @battle.FE == :COLOSSEUM) && i.ability != :OVERCOAT &&
+              if !i.hasType?(:ICE) && i.ability != :TEMPEST && i.ability != :ICEBODY && i.ability != :SNOWCLOAK && i.ability != :MAGICGUARD && !(i.hasAbility?(:WONDERGUARD) && @battle.FE == :COLOSSEUM) && i.ability != :OVERCOAT &&
                 !(i.item == :SAFETYGOGGLES) && ($cache.moves[i.effects[:TwoTurnAttack]].nil? || ![0xCA,0xCB].include?($cache.moves[i.effects[:TwoTurnAttack]].function)) # Dig, Dive
                 pbDisplay(_INTL("The Pokémon were buffeted by the hail!",i.pbThis)) if !endmessage
                 endmessage=true
@@ -4466,7 +4466,7 @@ class PokeBattle_Battle
       pbDisplay(_INTL("{1} took the {2} attack!",i.pbThis,move.name))
       typemod = move.pbTypeModifier(type,moveuser,i)
       twoturninvul = PBStuff::TWOTURNMOVE.include?(i.effects[:TwoTurnAttack])
-      if (i.isFainted? || move.pbAccuracyCheck(moveuser,i) && !(i.ability == :WONDERGUARD && typemod<=4)) && !twoturninvul
+      if (i.isFainted? || move.pbAccuracyCheck(moveuser,i) && !(i.hasAbility?(:WONDERGUARD) && typemod<=4)) && !twoturninvul
         i.damagestate.reset
         damage = nil
         if i.effects[:FutureSightMove] == :FUTURESIGHT && !(i.hasType?(:DARK))
@@ -4478,7 +4478,7 @@ class PokeBattle_Battle
         end
         move.pbReduceHPDamage(damage,moveuser,i)
         move.pbEffectMessages(moveuser,i)
-      elsif i.ability == :WONDERGUARD && typemod<=4 && !twoturninvul
+      elsif i.hasAbility?(:WONDERGUARD) && typemod<=4 && !twoturninvul
         pbDisplay(_INTL("{1} avoided damage with Wonder Guard!",i.pbThis))
       else
         pbDisplay(_INTL("But it failed!"))
@@ -4535,13 +4535,13 @@ class PokeBattle_Battle
           pbDisplay(_INTL("The Meganium Crest restored {1}'s HP a little!",i.pbThis(true))) if hpgain>0       
       end
       # Rain Dish
-      if (i.ability == :RAINDISH && (pbWeather== :RAINDANCE && !i.hasWorkingItem(:UTILITYUMBRELLA)))&& i.effects[:HealBlock]==0
+      if (i.hasAbility?(:RAINDISH) && (pbWeather== :RAINDANCE && !i.hasWorkingItem(:UTILITYUMBRELLA)))&& i.effects[:HealBlock]==0
         hpgain=i.pbRecoverHP((i.totalhp/16.0).floor,true)
         pbDisplay(_INTL("{1}'s Rain Dish restored its HP a little!",i.pbThis)) if hpgain>0
       end
 
       # Dry Skin
-      if (i.ability == :DRYSKIN)
+      if (i.hasAbility?(:DRYSKIN))
         if (pbWeather== :RAINDANCE && !i.hasWorkingItem(:UTILITYUMBRELLA)) && i.effects[:HealBlock]==0
           hpgain=i.pbRecoverHP((i.totalhp/8.0).floor,true)
           pbDisplay(_INTL("{1}'s Dry Skin was healed by the rain!",i.pbThis)) if hpgain>0
@@ -4579,7 +4579,7 @@ class PokeBattle_Battle
         end
       end
       # Ice Body
-      if i.ability == :ICEBODY && (pbWeather== :HAIL || @field.effect == :ICY || @field.effect == :SNOWYMOUNTAIN || @field.effect == :FROZENDIMENSION) && i.effects[:HealBlock]==0
+      if i.hasAbility?(:ICEBODY) && (pbWeather== :HAIL || @field.effect == :ICY || @field.effect == :SNOWYMOUNTAIN || @field.effect == :FROZENDIMENSION) && i.effects[:HealBlock]==0
         hpgain=i.pbRecoverHP((i.totalhp/16.0).floor,true)
         pbDisplay(_INTL("{1}'s Ice Body restored its HP a little!",i.pbThis)) if hpgain>0
       end
@@ -4606,7 +4606,7 @@ class PokeBattle_Battle
     for i in priority
       next if i.isFainted?
       # Shed Skin
-      if i.ability == :SHEDSKIN
+      if i.hasAbility?(:SHEDSKIN)
         if (pbRandom(10)<3 || @field.effect == :DRAGONSDEN) && !i.status.nil?
           pbDisplay(_INTL("{1}'s Shed Skin cured its {2} problem!",i.pbThis,i.status.downcase))
           i.status=nil
@@ -4641,7 +4641,7 @@ class PokeBattle_Battle
         end
       end
       # Hydration
-      if i.ability == :HYDRATION && ((pbWeather== :RAINDANCE && !i.hasWorkingItem(:UTILITYUMBRELLA)) || @field.effect == :WATERSURFACE || @field.effect == :UNDERWATER)
+      if i.hasAbility?(:HYDRATION) && ((pbWeather== :RAINDANCE && !i.hasWorkingItem(:UTILITYUMBRELLA)) || @field.effect == :WATERSURFACE || @field.effect == :UNDERWATER)
         if !i.status.nil?
           pbDisplay(_INTL("{1}'s Hydration cured its {2} problem!",i.pbThis,i.status.downcase))
           i.status=nil
@@ -4652,7 +4652,7 @@ class PokeBattle_Battle
           pbDisplay(_INTL("{1}'s Hydration restored its health!",i.pbThis))
         end
       end
-      if i.ability == :WATERVEIL && (@field.effect == :WATERSURFACE || @field.effect == :UNDERWATER)
+      if i.hasAbility?(:WATERVEIL) && (@field.effect == :WATERSURFACE || @field.effect == :UNDERWATER)
         if !i.status.nil?
           pbDisplay(_INTL("{1}'s Water Veil cured its {2} problem!",i.pbThis,i.status.downcase))
           i.status=nil
@@ -4660,7 +4660,7 @@ class PokeBattle_Battle
         end
       end
       # Healer
-      if i.ability == :HEALER
+      if i.hasAbility?(:HEALER)
         partner=i.pbPartner
         if pbRandom(10)<3 && partner.hp >0 && !partner.status.nil?
           pbDisplay(_INTL("{1}'s Healer cured its partner's {2} problem!",i.pbThis,i.status.downcase))
@@ -4735,7 +4735,7 @@ class PokeBattle_Battle
     end
     # Leech Seed
     for i in priority
-      if i.ability == :LIQUIDOOZE && i.effects[:LeechSeed]>=0
+      if i.hasAbility?(:LIQUIDOOZE) && i.effects[:LeechSeed]>=0
         recipient=@battlers[i.effects[:LeechSeed]]
         if recipient && !recipient.isFainted?
           hploss=(i.totalhp/8.0).floor
@@ -4762,7 +4762,7 @@ class PokeBattle_Battle
       next if i.isFainted?
       if i.effects[:LeechSeed]>=0
         recipient=@battlers[i.effects[:LeechSeed]]
-        if recipient && !recipient.isFainted? && i.ability != :MAGICGUARD && !(i.ability == :WONDERGUARD && @battle.FE == :COLOSSEUM)# if recipient exists
+        if recipient && !recipient.isFainted? && i.ability != :MAGICGUARD && !(i.hasAbility?(:WONDERGUARD) && @battle.FE == :COLOSSEUM)# if recipient exists
           pbCommonAnimation("LeechSeed",recipient,i)
           hploss=i.pbReduceHP((i.totalhp/8.0).floor,true)
           hploss= hploss * 2 if @field.effect == :WASTELAND
@@ -4791,7 +4791,7 @@ class PokeBattle_Battle
       # Petrification
       if i.status== :PETRIFIED && (i.effects[:Petrification]>=0) 
         recipient=@battlers[i.effects[:Petrification]]
-        if recipient && !recipient.isFainted?  && i.ability != :MAGICGUARD && !(i.ability == :WONDERGUARD && @battle.FE == :COLOSSEUM) # if recipient exists
+        if recipient && !recipient.isFainted?  && i.ability != :MAGICGUARD && !(i.hasAbility?(:WONDERGUARD) && @battle.FE == :COLOSSEUM) # if recipient exists
           pbCommonAnimation("Petrification",recipient,i)
           hploss=i.pbReduceHP((i.totalhp/8).floor,true)
           if Rejuv && @battle.FE == :GRASSY
@@ -4810,8 +4810,8 @@ class PokeBattle_Battle
         end
       end
       # Poison/Bad poison
-      if i.status== :POISON && i.ability != :MAGICGUARD && !(i.ability == :WONDERGUARD && @battle.FE == :COLOSSEUM) && !(i.ability == :GUTS && @battle.FE == :CROWD)
-        if (i.ability == :POISONHEAL || (i.species == :ZANGOOSE && i.crested))
+      if i.status== :POISON && i.ability != :MAGICGUARD && !(i.hasAbility?(:WONDERGUARD) && @battle.FE == :COLOSSEUM) && !(i.hasAbility?(:GUTS) && @battle.FE == :CROWD)
+        if (i.hasAbility?(:POISONHEAL) || (i.species == :ZANGOOSE && i.crested))
           if i.effects[:HealBlock]==0
             if i.hp<i.totalhp
               pbCommonAnimation("Poison",i,nil)
@@ -4835,10 +4835,10 @@ class PokeBattle_Battle
         end
       end
       # Burn
-      if i.status== :BURN && i.ability != :MAGICGUARD && !(i.ability == :WONDERGUARD && @battle.FE == :COLOSSEUM)
+      if i.status== :BURN && i.ability != :MAGICGUARD && !(i.hasAbility?(:WONDERGUARD) && @battle.FE == :COLOSSEUM)
         i.pbContinueStatus
-        if !(i.ability == :GUTS && @battle.FE == :CROWD)
-          if i.ability == :HEATPROOF || @field.effect == :ICY
+        if !(i.hasAbility?(:GUTS) && @battle.FE == :CROWD)
+          if i.hasAbility?(:HEATPROOF) || @field.effect == :ICY
             i.pbReduceHP((i.totalhp/32.0).floor)
           else
             i.pbReduceHP((i.totalhp/16.0).floor)
@@ -4846,8 +4846,8 @@ class PokeBattle_Battle
         end
       end
       # Nightmare
-      if i.effects[:Nightmare] && i.ability != :MAGICGUARD && !(i.ability == :WONDERGUARD && @battle.FE == :COLOSSEUM) && @field.effect != :RAINBOW
-        if (i.status== :SLEEP || @battle.FE == :INFERNAL || i.pbOpposing1.ability == :WORLDOFNIGHTMARES || i.pbOpposing2.ability == :WORLDOFNIGHTMARES)
+      if i.effects[:Nightmare] && i.ability != :MAGICGUARD && !(i.hasAbility?(:WONDERGUARD) && @battle.FE == :COLOSSEUM) && @field.effect != :RAINBOW
+        if (i.status== :SLEEP || @battle.FE == :INFERNAL || i.pbOpposing1.hasAbility?(:WORLDOFNIGHTMARES) || i.pbOpposing2.hasAbility?(:WORLDOFNIGHTMARES))
           pbCommonAnimation("Nightmare",i,nil)
           pbDisplay(_INTL("{1} is locked in a nightmare!",i.pbThis))
           hploss = (i.totalhp/4.0).floor
@@ -4870,7 +4870,7 @@ class PokeBattle_Battle
         i.effects[:Curse] = false
         pbDisplay(_INTL("{1}'s curse was lifted!",i.pbThis))
       end
-      if i.ability != :MAGICGUARD && !(i.ability == :WONDERGUARD && @battle.FE == :COLOSSEUM)
+      if i.ability != :MAGICGUARD && !(i.hasAbility?(:WONDERGUARD) && @battle.FE == :COLOSSEUM)
         pbCommonAnimation("Curse",i,nil)
         pbDisplay(_INTL("{1} is afflicted by the curse!",i.pbThis))
         i.pbReduceHP((i.totalhp/4.0).floor,true)
@@ -4890,7 +4890,7 @@ class PokeBattle_Battle
         if i.effects[:MultiTurn]==0
           pbDisplay(_INTL("{1} was freed from {2}!",i.pbThis,movename))
           i.effects[:BindingBand] = false
-        elsif !(i.ability == :MAGICGUARD) && !(i.ability == :WONDERGUARD && @battle.FE == :COLOSSEUM)
+        elsif !(i.hasAbility?(:MAGICGUARD)) && !(i.hasAbility?(:WONDERGUARD) && @battle.FE == :COLOSSEUM)
           pbDisplay(_INTL("{1} is hurt by {2}!",i.pbThis,movename))
           if (i.effects[:MultiTurnAttack] == :BIND)
             pbCommonAnimation("Bind",i,nil)
@@ -5280,7 +5280,7 @@ class PokeBattle_Battle
           pbDisplay(_INTL("...Sticky string shot out of the ground!"))
           for mon in [i, i.pbPartner]
             next if mon.isFainted? && !PBStuff::TWOTURNMOVE.include?(mon.effects[:TwoTurnAttack])
-            if mon.ability == :CONTRARY && !mon.pbTooHigh?(PBStats::SPEED)
+            if mon.hasAbility?(:CONTRARY) && !mon.pbTooHigh?(PBStats::SPEED)
               mon.pbIncreaseStatBasic(PBStats::SPEED,4)
                 pbCommonAnimation("StatUp",mon,nil)
                 pbDisplay(_INTL("{1}'s Speed went way up!",mon.pbThis))
@@ -5309,7 +5309,7 @@ class PokeBattle_Battle
     for i in priority
       next if i.isFainted?
       # Mimicry
-      if i.ability == :MIMICRY
+      if i.hasAbility?(:MIMICRY)
         protype = -1
         case @field.effect
           when :CRYSTALCAVERN
@@ -5330,15 +5330,15 @@ class PokeBattle_Battle
       end
       # Speed Boost
       # A Pokémon's turncount is 0 if it became active after the beginning of a round
-      if i.turncount>0 && (i.ability == :SPEEDBOOST || (@field.effect == :ELECTERRAIN && i.ability == :MOTORDRIVE) || 
-        ([:VOLCANIC,:VOLCANICTOP,:WATERSURFACE,:UNDERWATER,:INFERNAL].include?(@field.effect) && i.ability == :STEAMENGINE))
+      if i.turncount>0 && (i.hasAbility?(:SPEEDBOOST) || (@field.effect == :ELECTERRAIN && i.hasAbility?(:MOTORDRIVE)) || 
+        ([:VOLCANIC,:VOLCANICTOP,:WATERSURFACE,:UNDERWATER,:INFERNAL].include?(@field.effect) && i.hasAbility?(:STEAMENGINE)))
         if !i.pbTooHigh?(PBStats::SPEED)
           i.pbIncreaseStatBasic(PBStats::SPEED,1)
           pbCommonAnimation("StatUp",i,nil)
           pbDisplay(_INTL("{1}'s {2} raised its Speed!",i.pbThis, getAbilityName(i.ability)))
         end
       end
-      if i.ability == :ACCUMULATION && i.turncount>0 && i.lastMoveUsed!=:SPITUP && i.lastMoveUsed!=:SWALLOW
+      if i.hasAbility?(:ACCUMULATION) && i.turncount>0 && i.lastMoveUsed!=:SPITUP && i.lastMoveUsed!=:SWALLOW
         if i.effects[:Stockpile] <3
           i.effects[:Stockpile] +=1
           i.pbIncreaseStatBasic(PBStats::DEFENSE,1)
@@ -5348,10 +5348,10 @@ class PokeBattle_Battle
           pbDisplay(_INTL("{1} stockpiled with Accumulation!",i.pbThis))
         end
       end
-      if @field.effect == :SWAMP && ![:WHITESMOKE,:CLEARBODY,:QUICKFEET,:SWIFTSWIM,:PROPELLERTAIL].include?(i.ability)
+      if @field.effect == :SWAMP && ![:WHITESMOKE,:CLEARBODY,:QUICKFEET,:SWIFTSWIM,:PROPELLERTAIL].any? { |a| i.hasAbility?(a) }
         if !i.isAirborne?
           if !i.pbTooLow?(PBStats::SPEED)
-            contcheck = i.ability == :CONTRARY
+            contcheck = i.hasAbility?(:CONTRARY)
             candrop = i.pbCanReduceStatStage?(PBStats::SPEED)
             canraise = i.pbCanIncreaseStatStage?(PBStats::SPEED) if contcheck
             statdrop = 1
@@ -5362,14 +5362,14 @@ class PokeBattle_Battle
           end
         end
       end
-      if (@field.effect == :DESERT || @field.effect == :HAUNTED) && i.ability == :WANDERINGSPIRIT
+      if (@field.effect == :DESERT || @field.effect == :HAUNTED) && i.hasAbility?(:WANDERINGSPIRIT)
         if !i.pbTooLow?(PBStats::SPEED)
           i.pbReduceStat(PBStats::SPEED,1, statmessage: false)
           pbDisplay(_INTL("{1}'s Wandering Spirit lowered its Speed!",i.pbThis))
         end
       end
       #sleepyswamp #sleepydimension #spookydreams #fairyringsleep
-      if i.status== :SLEEP && !(i.ability == :MAGICGUARD)
+      if i.status== :SLEEP && !(i.hasAbility?(:MAGICGUARD))
         if @field.effect == :SWAMP # Swamp Field
           if i.effects[:MultiTurn]>0
             hploss=i.pbReduceHP((i.totalhp/8.0).floor,true)
@@ -5401,7 +5401,7 @@ class PokeBattle_Battle
         end
       end
       #sleepycorro
-      if i.status== :SLEEP && i.ability != :MAGICGUARD && !(i.ability == :POISONHEAL || (i.species == :ZANGOOSE && i.crested)) && i.ability != :TOXICBOOST &&
+      if i.status== :SLEEP && i.ability != :MAGICGUARD && !(i.hasAbility?(:POISONHEAL) || (i.species == :ZANGOOSE && i.crested)) && i.ability != :TOXICBOOST &&
       i.ability != :WONDERGUARD && !i.isAirborne? && !i.hasType?(:STEEL) && !i.hasType?(:POISON) && @field.effect == :CORROSIVE
         hploss=i.pbReduceHP((i.totalhp/16.0).floor,true)
         pbDisplay(_INTL("{1}'s is seared by the corrosion!",i.pbThis)) if hploss>0
@@ -5411,7 +5411,7 @@ class PokeBattle_Battle
         next
       end
     # Water Compaction on Water-based Fields
-    if i.ability == :WATERCOMPACTION
+    if i.hasAbility?(:WATERCOMPACTION)
       if [:SWAMP,:WATERSURFACE,:UNDERWATER,:MURKWATERSURFACE].include?(@field.effect)
         if !i.pbTooHigh?(PBStats::DEFENSE)
           i.pbIncreaseStatBasic(PBStats::DEFENSE,2)
@@ -5423,12 +5423,12 @@ class PokeBattle_Battle
      if i.effects[:Octolock]>=0
       locklowered = false
       if !i.pbTooLow?(PBStats::DEFENSE)
-        contcheck = (i.ability == :CONTRARY)
+        contcheck = (i.hasAbility?(:CONTRARY))
         i.pbReduceStat(PBStats::DEFENSE,1,abilitymessage:false)
         locklowered = true if !contcheck
       end
       if !i.pbTooLow?(PBStats::SPDEF)
-        contcheck = (i.ability == :CONTRARY)
+        contcheck = (i.hasAbility?(:CONTRARY))
         i.pbReduceStat(PBStats::SPDEF,1,abilitymessage:false)
         locklowered = true if !contcheck
       end
@@ -5438,7 +5438,7 @@ class PokeBattle_Battle
       end
     end
     # Bad Dreams
-    if (i.status== :SLEEP || (i.ability == :COMATOSE && @battle.FE != :ELECTERRAIN)) && i.ability != :MAGICGUARD && !(i.ability == :WONDERGUARD && @battle.FE == :COLOSSEUM) && @field.effect != :RAINBOW
+    if (i.status== :SLEEP || (i.hasAbility?(:COMATOSE) && @battle.FE != :ELECTERRAIN)) && i.ability != :MAGICGUARD && !(i.hasAbility?(:WONDERGUARD) && @battle.FE == :COLOSSEUM) && @field.effect != :RAINBOW
       if i.pbOpposing1.ability == (:BADDREAMS) || i.pbOpposing2.ability == (:BADDREAMS)
         hpdrain=(i.totalhp/8.0).floor
         hpdrain=(i.totalhp/6.0).floor if @battle.FE == :DARKNESS2
@@ -5452,7 +5452,7 @@ class PokeBattle_Battle
       next
     end
     # World of Nightmares
-    if i.pbOpposing1.ability == :WORLDOFNIGHTMARES || i.pbOpposing2.ability == :WORLDOFNIGHTMARES
+    if i.pbOpposing1.hasAbility?(:WORLDOFNIGHTMARES) || i.pbOpposing2.hasAbility?(:WORLDOFNIGHTMARES)
       nightmarechip=[64,i.turncount].min
       nightmarechip*2 if @battle.FE == :NEWWORLD
       hploss=i.pbReduceHP(((i.totalhp/32).floor)*nightmarechip,true)
@@ -5463,7 +5463,7 @@ class PokeBattle_Battle
       next
     end
     # Harvest
-    if i.ability == :HARVEST && i.item.nil? && i.pokemon.itemRecycle #if an item was recycled, check
+    if i.hasAbility?(:HARVEST) && i.item.nil? && i.pokemon.itemRecycle #if an item was recycled, check
       if pbIsBerry?(i.pokemon.itemRecycle) && (pbRandom(100)>50 || (pbWeather== :SUNNYDAY && !i.hasWorkingItem(:UTILITYUMBRELLA)) ||
          @battle.ProgressiveFieldCheck(PBFields::FLOWERGARDEN,2,5) || (Rejuv && @battle.FE == :GRASSY))
         i.item=i.pokemon.itemRecycle
@@ -5481,7 +5481,7 @@ class PokeBattle_Battle
     end
     # Ball Fetch
     puts i.effects[:BallFetch]
-    if i.ability == :BALLFETCH && !i.effects[:BallFetch].nil? && i.item.nil?
+    if i.hasAbility?(:BALLFETCH) && !i.effects[:BallFetch].nil? && i.item.nil?
       pokeball=i.effects[:BallFetch]
       i.item=pokeball
       i.pokemon.itemInitial=pokeball
@@ -5489,7 +5489,7 @@ class PokeBattle_Battle
       pbDisplay(_INTL("{1} fetched a {2}!",i.pbThis,getItemName(pokeball)))
     end
     # Moody
-    if i.ability == :CLOUDNINE && @field.effect == :RAINBOW
+    if i.hasAbility?(:CLOUDNINE) && @field.effect == :RAINBOW
       failsafe=0
       randoms=[]
       loop do
@@ -5508,7 +5508,7 @@ class PokeBattle_Battle
        pbDisplay(_INTL("{1}'s Cloud Nine raised its {2}!",i.pbThis,i.pbGetStatName(randoms[0])))
       end
     end
-    if i.ability == :MOODY
+    if i.hasAbility?(:MOODY)
       randomup=[]
       randomdown=[]
       failsafe1=0
@@ -5563,7 +5563,7 @@ class PokeBattle_Battle
         pbDisplay(_INTL("{1} was burned by its {2}!",i.pbThis,getItemName(i.item)))
       end
       # Sticky Barb
-      if i.item == :STICKYBARB && i.ability != :MAGICGUARD && !(pkmn.ability == :WONDERGUARD && @battle.FE == :COLOSSEUM)
+      if i.item == :STICKYBARB && i.ability != :MAGICGUARD && !(pkmn.hasAbility?(:WONDERGUARD) && @battle.FE == :COLOSSEUM)
         pbDisplay(_INTL("{1} is hurt by its {2}!",i.pbThis,getItemName(i.item)))
         @scene.pbDamageAnimation(i,0)
         i.pbReduceHP((i.totalhp/8.0).floor)
@@ -5591,7 +5591,7 @@ class PokeBattle_Battle
     # Hunger Switch
     for i in priority
       next if i.isFainted?
-      if i.ability == :HUNGERSWITCH && (i.species == :MORPEKO) && @battle.FE != :FROZENDIMENSION
+      if i.hasAbility?(:HUNGERSWITCH) && (i.species == :MORPEKO) && @battle.FE != :FROZENDIMENSION
         i.form=(i.form==0) ? 1 : 0
         i.pbUpdate(true)
         scene.pbChangePokemon(i,i.pokemon)
@@ -5625,7 +5625,7 @@ class PokeBattle_Battle
       i.pbAbilitiesOnSwitchIn(false)
     end
     for i in 0...4
-      if @battlers[i].turncount>0 && @battlers[i].ability == :TRUANT
+      if @battlers[i].turncount>0 && @battlers[i].hasAbility?(:TRUANT)
         @battlers[i].effects[:Truant]=!@battlers[i].effects[:Truant]
       end
       if @battlers[i].effects[:LockOn]>0   # Also Mind Reader
diff --git a/Battle_AI.rb b/Battle_AI.rb
index 8685178..c81d455 100644
--- a/Battle_AI.rb
+++ b/Battle_AI.rb
@@ -513,10 +513,10 @@ class PokeBattle_AI
 					scoremult=1.0
 					if mondata.trainer && (mondata.trainer.trainertype == :UMBTITANIA || mondata.trainer.trainertype == :UMBAMARIA) && @battle.doublebattle
 						scoremult*= (1+2*mondata.scorearray[pi][moveindex]/100.0)
-					elsif (move.pbType(battler) == :FIRE && battler.pbPartner.ability == :FLASHFIRE) ||
-							(move.pbType(battler) == :WATER && (battler.pbPartner.ability == :WATERABSORB || battler.pbPartner.ability == :STORMDRAIN || battler.pbPartner.ability == :DRYSKIN)) ||
-							(move.pbType(battler) == :GRASS && battler.pbPartner.ability == :SAPSIPPER) ||
-							(move.pbType(battler) == :ELECTRIC) && (battler.pbPartner.ability == :VOLTABSORB || battler.pbPartner.ability == :LIGHTNINGROD || battler.pbPartner.ability == :MOTORDRIVE)
+					elsif (move.pbType(battler) == :FIRE && battler.pbPartner.hasAbility?(:FLASHFIRE)) ||
+							(move.pbType(battler) == :WATER && (battler.pbPartner.hasAbility?(:WATERABSORB) || battler.pbPartner.hasAbility?(:STORMDRAIN) || battler.pbPartner.hasAbility?(:DRYSKIN))) ||
+							(move.pbType(battler) == :GRASS && battler.pbPartner.hasAbility?(:SAPSIPPER)) ||
+							(move.pbType(battler) == :ELECTRIC) && (battler.pbPartner.hasAbility?(:VOLTABSORB) || battler.pbPartner.hasAbility?(:LIGHTNINGROD) || battler.pbPartner.hasAbility?(:MOTORDRIVE))
 						scoremult*=2
 					elsif battler.pbPartner.hp > 0 && (battler.pbPartner.hp.to_f > 0.1* battler.pbPartner.totalhp || pbAIfaster?(move,nil,battler,battler.pbPartner))
 						scoremult = [(1-2*mondata.scorearray[pi][moveindex]/100.0), 0].max # multiplier to control how much to arbitrarily care about hitting partner; lower cares more
@@ -980,7 +980,7 @@ class PokeBattle_AI
 			threatscore[i]*=1.1 if aimons.all? {|aimon| pbAIfaster?(nil,nil,opp,aimon) }
 			# Status
 			threatscore[i]*=0.6 if opp.status== :SLEEP || opp.status== :FROZEN
-			threatscore[i]*=0.8 if opp.status== :PARALYSIS && ![:GUTS,:MARVELSCALE,:QUICKFEET].include?(opp.ability) 
+			threatscore[i]*=0.8 if opp.status== :PARALYSIS && ![:GUTS,:MARVELSCALE,:QUICKFEET].any? { |a| opp.hasAbility?(a) } 
 		}
 		PBDebug.log(sprintf("Opposing threat scores : %s",threatscore.join(", "))) if $INTERNAL
 		return threatscore
@@ -1008,12 +1008,12 @@ class PokeBattle_AI
 			typemod=pbTypeModNoMessages(@move.pbType(@attacker))
 			$ai_log_data[@attacker.index].final_score_moves.push(typemod) if typemod<=0
 			return typemod if typemod<=0
-			wondercheck = typemod<=4 && @opponent.ability == :WONDERGUARD
+			wondercheck = typemod<=4 && @opponent.hasAbility?(:WONDERGUARD)
 		end
 		#Hell check: Can you hit this pokemon that has an ability that nullifies your move?
 		if @mondata.skill>=MEDIUMSKILL && !moldBreakerCheck(@attacker) &&
 				((@attacker.pbTarget(@move)==:SingleNonUser || [:RandomOpposing, :AllOpposing, :OpposingSide, :SingleOpposing].include?(@attacker.pbTarget(@move)) || (@attacker.pbTarget(@move)==:OppositeOpposing && @attacker.hasType?(:GHOST))) && @move.basedamage == 0) 
-			if wondercheck || (@move.pbType(@attacker) == :GROUND && @opponent.ability == :LEVITATE && @battle.FE != :CAVE)
+			if wondercheck || (@move.pbType(@attacker) == :GROUND && @opponent.hasAbility?(:LEVITATE) && @battle.FE != :CAVE)
 				$ai_log_data[@attacker.index].final_score_moves.push(0)
 				return 0
 			end
@@ -1022,9 +1022,9 @@ class PokeBattle_AI
 				$ai_log_data[@attacker.index].final_score_moves.push(-1)
 				return -1
 			end
-			$ai_log_data[@attacker.index].final_score_moves.push(0) if (@opponent.ability == :MAGICBOUNCE || @opponent.pbPartner.ability == :MAGICBOUNCE) && @move.basedamage == 0 #there is not a good way to do this section
+			$ai_log_data[@attacker.index].final_score_moves.push(0) if (@opponent.hasAbility?(:MAGICBOUNCE) || @opponent.pbPartner.hasAbility?(:MAGICBOUNCE)) && @move.basedamage == 0 #there is not a good way to do this section
 			$ai_log_data[@attacker.index].final_score_moves.push(0) if (@opponent.effects[:MagicCoat]==true || @opponent.pbPartner.effects[:MagicCoat]==true) && @move.basedamage == 0 #there is not a good way to do this section
-			return -1 if (@opponent.ability == :MAGICBOUNCE || @opponent.pbPartner.ability == :MAGICBOUNCE) && @move.basedamage == 0 #there is not a good way to do this section
+			return -1 if (@opponent.hasAbility?(:MAGICBOUNCE) || @opponent.pbPartner.hasAbility?(:MAGICBOUNCE)) && @move.basedamage == 0 #there is not a good way to do this section
 			return -1 if (@opponent.effects[:MagicCoat]==true || @opponent.pbPartner.effects[:MagicCoat]==true) && @move.basedamage == 0 #there is not a good way to do this section
 		end
 		if @move.pbType(@attacker) == :GROUND && !canGroundMoveHit?(@opponent) && @battle.FE !=:CAVE && @move.basedamage != 0
@@ -1050,7 +1050,7 @@ class PokeBattle_AI
 			if (@battle.doublebattle || (@opponent.status!=:SLEEP && @opponent.status!=:FROZEN && !@opponent.effects[:Truant] && @opponent.effects[:HyperBeam] == 0)) && !seedProtection?(@attacker) # This line might be in the wrong place, but we're trying our best here-- skip priority if opponent is incapacitated
 				if score>100
 					score*= @battle.doublebattle ? 1.3 : (aifaster ? 1.3 : 2)
-				elsif @attacker.ability == :STANCECHANGE && !aifaster && @attacker.form == 0 && @attacker.pokemon.species == :AEGISLASH
+				elsif @attacker.hasAbility?(:STANCECHANGE) && !aifaster && @attacker.form == 0 && @attacker.pokemon.species == :AEGISLASH
 					score*=0.7
 				end
 				movedamage = -1
@@ -1098,7 +1098,7 @@ class PokeBattle_AI
 			end
 			score*=0 if !aifaster && @opponent.effects[:TwoTurnAttack]!=0
 			score*=0 if @battle.FE == :PSYTERRAIN && !@opponent.isAirborne?
-			score*=0 if @opponent.ability == :DAZZLING || @opponent.ability == :QUEENLYMAJESTY || @opponent.pbPartner.ability == :DAZZLING || @opponent.pbPartner.ability == :QUEENLYMAJESTY || ((opponent.ability == :MIRRORARMOR || opponent.pbPartner.ability == :MIRRORARMOR) && @battle.FE == :STARLIGHT)
+			score*=0 if @opponent.hasAbility?(:DAZZLING) || @opponent.hasAbility?(:QUEENLYMAJESTY) || @opponent.pbPartner.hasAbility?(:DAZZLING) || @opponent.pbPartner.hasAbility?(:QUEENLYMAJESTY) || ((opponent.hasAbility?(:MIRRORARMOR) || opponent.pbPartner.hasAbility?(:MIRRORARMOR)) && @battle.FE == :STARLIGHT)
 			score*=0.2 if (checkAImoves([:QUICKGUARD]) || checkAImoves([:QUICKGUARD],getAIMemory(@opponent.pbPartner))) && move.target!=:User
 			PBDebug.log(sprintf("Priority Check End")) if $INTERNAL
 		elsif @move.priority<0 && pbAIfaster?()
@@ -1108,11 +1108,11 @@ class PokeBattle_AI
 		end
 		#Sound move checks
 		if !@move.zmove && @move.isSoundBased?
-			$ai_log_data[@attacker.index].final_score_moves.push(0) if (@opponent.ability == :SOUNDPROOF && !moldBreakerCheck(@attacker)) || @attacker.effects[:ThroatChop]!=0
-			return 0 if (@opponent.ability == :SOUNDPROOF && !moldBreakerCheck(@attacker)) || @attacker.effects[:ThroatChop]!=0
+			$ai_log_data[@attacker.index].final_score_moves.push(0) if (@opponent.hasAbility?(:SOUNDPROOF) && !moldBreakerCheck(@attacker)) || @attacker.effects[:ThroatChop]!=0
+			return 0 if (@opponent.hasAbility?(:SOUNDPROOF) && !moldBreakerCheck(@attacker)) || @attacker.effects[:ThroatChop]!=0
 			score *= 0.6 if checkAImoves([:THROATCHOP])
 		end
-		if @opponent.ability == :DANCER
+		if @opponent.hasAbility?(:DANCER)
 			if (PBStuff::DANCEMOVE).include?(@move.move)
 				score*=0.5
 				score*=0.1 if @battle.FE == :BIGTOP || @battle.FE == :DANCEFLOOR
@@ -1141,7 +1141,7 @@ class PokeBattle_AI
 				end
 			end
 			if ioncheck && @move.type == :NORMAL
-				score*=0.3 if [:LIGHTNINGROD,:VOLTABSORB,:MOTORDRIVE].include?(@opponent.ability) || @opponent.pbPartner.ability == :LIGHTNINGROD
+				score*=0.3 if [:LIGHTNINGROD,:VOLTABSORB,:MOTORDRIVE].include?(@opponent.ability) || @opponent.pbPartner.hasAbility?(:LIGHTNINGROD)
 			end
 			score*=0.2 if widecheck && [:AllOpposing, :AllNonUsers].include?(@move.target)
 			score*=0.2 if powdercheck && @move.pbType(@attacker)==:FIRE
@@ -1152,19 +1152,19 @@ class PokeBattle_AI
 			score*= [pbRoughDamage/newhp.to_f, 1.1].min
 		end
 		# Check for moves that can be nullified by any mon in doubles
-		if @battle.doublebattle && [:SingleNonUser, :RandomOpposing, :SingleOpposing, :OppositeOpposing].include?(@move.target) && !(@attacker.ability == :PROPELLERTAIL || @attacker.ability == :STALWART)
+		if @battle.doublebattle && [:SingleNonUser, :RandomOpposing, :SingleOpposing, :OppositeOpposing].include?(@move.target) && !(@attacker.hasAbility?(:PROPELLERTAIL) || @attacker.hasAbility?(:STALWART))
 			if @move.pbType(@attacker)==:ELECTRIC || (ioncheck && @move.type == :NORMAL)
-				$ai_log_data[@attacker.index].final_score_moves.push(0) if @opponent.pbPartner.ability == :LIGHTNINGROD
-				return -1 if @opponent.pbPartner.ability == :LIGHTNINGROD
-				score*=0.3 if @attacker.pbPartner.ability == :LIGHTNINGROD
+				$ai_log_data[@attacker.index].final_score_moves.push(0) if @opponent.pbPartner.hasAbility?(:LIGHTNINGROD)
+				return -1 if @opponent.pbPartner.hasAbility?(:LIGHTNINGROD)
+				score*=0.3 if @attacker.pbPartner.hasAbility?(:LIGHTNINGROD)
 			elsif @move.pbType(@attacker)==:WATER
-				$ai_log_data[@attacker.index].final_score_moves.push(0) if @opponent.pbPartner.ability == :STORMDRAIN
-				return -1 if @opponent.pbPartner.ability == :STORMDRAIN
-				score*=0.3 if @attacker.pbPartner.ability == :STORMDRAIN
+				$ai_log_data[@attacker.index].final_score_moves.push(0) if @opponent.pbPartner.hasAbility?(:STORMDRAIN)
+				return -1 if @opponent.pbPartner.hasAbility?(:STORMDRAIN)
+				score*=0.3 if @attacker.pbPartner.hasAbility?(:STORMDRAIN)
 			end
 		end
 		if !@move.nil? && !@move.zmove && @move.highCritRate?
-			if !(@opponent.ability == :SHELLARMOR || @opponent.ability == :BATTLEARMOR || @attacker.effects[:LaserFocus]>0)
+			if !(@opponent.hasAbility?(:SHELLARMOR) || @opponent.hasAbility?(:BATTLEARMOR) || @attacker.effects[:LaserFocus]>0)
 				boostercount = 0
 				if @move.pbIsPhysical?()
 					boostercount += @opponent.stages[PBStats::DEFENSE] if @opponent.stages[PBStats::DEFENSE]>0
@@ -1199,7 +1199,7 @@ class PokeBattle_AI
 					contactscore*=0.8 if pbAIfaster?()
 				end
 			when :MUMMY, :WANDERINGSPIRIT
-				if !((PBStuff::FIXEDABILITIES).include?(@attacker.ability)) && !(@attacker.ability == :MUMMY || @attacker.ability == :SHIELDDUST)
+				if !((PBStuff::FIXEDABILITIES).include?(@attacker.ability)) && !(@attacker.hasAbility?(:MUMMY) || @attacker.hasAbility?(:SHIELDDUST))
 					mummyscore = getAbilityDisruptScore(@opponent,@attacker)
 					mummyscore = mummyscore < 2 ? 2 - mummyscore : 0
 					contactscore*=mummyscore
@@ -1209,8 +1209,8 @@ class PokeBattle_AI
 			contactscore*=0.5 if checkAImoves([:KINGSSHIELD]) && !PBStuff::RATESHARERS.include?(@opponent.lastMoveUsed) && (@move.pbIsPhysical?() || @battle.FE == :FAIRYTALE)
 			contactscore*=0.7 if checkAImoves([:BANEFULBUNKER]) && !PBStuff::RATESHARERS.include?(@opponent.lastMoveUsed) && @attacker.pbCanPoison?(false)
 			contactscore*=0.6 if checkAImoves([:SPIKYSHIELD]) && !PBStuff::RATESHARERS.include?(@opponent.lastMoveUsed) && @attacker.hp < 0.3 * @attacker.totalhp
-			contactscore*=1.1 if @attacker.ability == :POISONTOUCH && @opponent.pbCanPoison?(false)
-			contactscore*=1.1 if @attacker.ability == :PICKPOCKET && @opponent.item && !@battle.pbIsUnlosableItem(@opponent,@opponent.item) && @attacker.item.nil?
+			contactscore*=1.1 if @attacker.hasAbility?(:POISONTOUCH) && @opponent.pbCanPoison?(false)
+			contactscore*=1.1 if @attacker.hasAbility?(:PICKPOCKET) && @opponent.item && !@battle.pbIsUnlosableItem(@opponent,@opponent.item) && @attacker.item.nil?
 			contactscore*=0.1 if seedProtection?(@opponent) && !PBStuff::PROTECTIGNORINGMOVE.include?(@move.move)
 			#this could be increased for moves that hit more than twice, but this should be sufficiently strong enough to deter move usage regardless
 			contactscore = contactscore**2 if @move.pbIsMultiHit
@@ -1230,7 +1230,7 @@ class PokeBattle_AI
 			end
 		end
 		#Don't use powder moves if they don't do anything
-		if PBStuff::POWDERMOVES.include?(@move.move) && (@opponent.hasType?(:GRASS) || @opponent.ability == :OVERCOAT || (@mondata.oppitemworks && @opponent.item == :SAFETYGOGGLES))
+		if PBStuff::POWDERMOVES.include?(@move.move) && (@opponent.hasType?(:GRASS) || @opponent.hasAbility?(:OVERCOAT) || (@mondata.oppitemworks && @opponent.item == :SAFETYGOGGLES))
 			$ai_log_data[@attacker.index].final_score_moves.push(0)
 			return 0
 		end
@@ -1278,7 +1278,7 @@ class PokeBattle_AI
 			score *= 0.9
 		end
 		# Pick a good move for the Choice items
-		if (@mondata.attitemworks && (@attacker.item == :CHOICEBAND || @attacker.item == :CHOICESPECS || @attacker.item == :CHOICESCARF)) || @attacker.ability == :GORILLATACTICS
+		if (@mondata.attitemworks && (@attacker.item == :CHOICEBAND || @attacker.item == :CHOICESPECS || @attacker.item == :CHOICESCARF)) || @attacker.hasAbility?(:GORILLATACTICS)
 			if @move.basedamage==0 && @move.function!=0xF2 && @move.function!=0x13d && @move.function!=0xb4 # Trick, parting shot and sleep talk 
 				score*=0.1
 			else
@@ -1302,7 +1302,7 @@ class PokeBattle_AI
 			score *= 0.1 if @move.pbType(@attacker) == :FIRE
 		end
 		# If opponent is dark type and attacker has prankster, son't use status moves on them 
-		if @mondata.skill>=MEDIUMSKILL && @attacker.ability == :PRANKSTER && @opponent.hasType?(:DARK)
+		if @mondata.skill>=MEDIUMSKILL && @attacker.hasAbility?(:PRANKSTER) && @opponent.hasType?(:DARK)
 			if @move.basedamage==0 && @move.priority>-1 && (@attacker.pbTarget(@move)==:SingleNonUser || @attacker.pbTarget(@move) && 0x486 != 0)
 				$ai_log_data[@attacker.index].final_score_moves.push(0)
 				return 0
@@ -1446,13 +1446,13 @@ class PokeBattle_AI
 				miniscore = flinchcode() if @attacker.status== :SLEEP
 				score = 0 if @attacker.status!=:SLEEP
 			when 0x12 # Fake Out
-				if @attacker.turncount==0 && !(@opponent.effects[:Substitute] > 0 || @opponent.ability == :INNERFOCUS || secondaryEffectNegated?())
+				if @attacker.turncount==0 && !(@opponent.effects[:Substitute] > 0 || @opponent.hasAbility?(:INNERFOCUS) || secondaryEffectNegated?())
 					#usually this would be saved as miniscore, but we directly add to the score
 					score *= flinchcode()
 					score+=115 if score>1
 					score*=0.7 if @battle.doublebattle
 					score*=1.1 if (@attacker.itemWorks? && @attacker.item == :NORMALGEM)
-					score*=1.5 if @attacker.ability == :UNBURDEN
+					score*=1.5 if @attacker.hasAbility?(:UNBURDEN)
 					score*=0.3 if checkAImoves([:ENCORE])
 				elsif @attacker.turncount!=0
 					score=0
@@ -1618,40 +1618,40 @@ class PokeBattle_AI
 				miniscore = 1 if (@attacker.hp.to_f)/@attacker.totalhp <= 0.5
 			when 0x3b # Superpower
 				statarray = [1,1,0,0,0,0,0]
-				if @attacker.ability == :CONTRARY
+				if @attacker.hasAbility?(:CONTRARY)
 					miniscore = selfstatboost(statarray)
 				else
 					miniscore = selfstatdrop(statarray,score)
-					miniscore*=1.5 if @attacker.ability == :MOXIE || @attacker.ability == :CHILLINGNEIGH || (@attacker.ability == :ASONE && @attacker.form == 1)
+					miniscore*=1.5 if @attacker.hasAbility?(:MOXIE) || @attacker.hasAbility?(:CHILLINGNEIGH) || (@attacker.hasAbility?(:ASONE) && @attacker.form == 1)
 				end
 			when 0x3c # Close Combat, Dragon Ascent
 				statarray = [0,1,0,1,0,0,0]
-				if @attacker.ability == :CONTRARY
+				if @attacker.hasAbility?(:CONTRARY)
 					miniscore = selfstatboost(statarray)
 				else
 					miniscore = selfstatdrop(statarray,score)
 				end
 			when 0x3d # V-Create
 				statarray = [0,1,0,1,1,0,0]
-				if @attacker.ability == :CONTRARY
+				if @attacker.hasAbility?(:CONTRARY)
 					miniscore = selfstatboost(statarray)
 				else
 					miniscore = selfstatdrop(statarray,score)
 				end
 			when 0x3e # Hammer Arm, Ice Hammer
 				statarray = [0,0,0,0,1,0,0]
-				if @attacker.ability == :CONTRARY || @battle.trickroom > 2
+				if @attacker.hasAbility?(:CONTRARY) || @battle.trickroom > 2
 					miniscore = selfstatboost(statarray)
 				else
 					miniscore = selfstatdrop(statarray,score)
 				end
 			when 0x3f # Overheat, Draco Meteor, Leaf Storm, Psycho Boost, Flear Cannon
 				statarray = [0,0,2,0,0,0,0]
-				if @attacker.ability == :CONTRARY
+				if @attacker.hasAbility?(:CONTRARY)
 					miniscore = selfstatboost(statarray)
 				else
 					miniscore = selfstatdrop(statarray,score)
-					miniscore *=1.3 if @attacker.ability == :SOULHEART
+					miniscore *=1.3 if @attacker.hasAbility?(:SOULHEART)
 				end
 			when 0x40 # Flatter
 				miniscore = oppstatboost([0,0,1,0,0])
@@ -1738,7 +1738,7 @@ class PokeBattle_AI
 			when 0x4e # Captivate
 				agender=@attacker.gender
 				ogender=@opponent.gender
-				if (agender==2 || ogender==2 || agender==ogender || @opponent.effects[:Attract]>=0 || ((@opponent.ability == :OBLIVIOUS || @opponent.ability == :AROMAVEIL || @opponent.pbPartner.ability == :AROMAVEIL) && !moldBreakerCheck(@attacker)))
+				if (agender==2 || ogender==2 || agender==ogender || @opponent.effects[:Attract]>=0 || ((@opponent.hasAbility?(:OBLIVIOUS) || @opponent.hasAbility?(:AROMAVEIL) || @opponent.pbPartner.hasAbility?(:AROMAVEIL)) && !moldBreakerCheck(@attacker)))
 					miniscore = 0
 				else
 					miniscore = oppstatdrop([0,0,0,2,0,0,0])
@@ -1921,7 +1921,7 @@ class PokeBattle_AI
 			when 0x7d # Wake-up Slap
 				if @opponent.status== :SLEEP && @opponent.effects[:Substitute]<=0
 					score*=0.8
-					score*=0.3 if @attacker.ability == :BADDREAMS || @attacker.pbHasMove?(:DREAMEATER) || @attacker.pbHasMove?(:NIGHTMARE)
+					score*=0.3 if @attacker.hasAbility?(:BADDREAMS) || @attacker.pbHasMove?(:DREAMEATER) || @attacker.pbHasMove?(:NIGHTMARE)
 					score*=1.3 if checkAImoves([:SLEEPTALK, :SNORE])
 				end
 			#when 0x7E..0x80 # Facade, Hex, Brine
@@ -1982,7 +1982,7 @@ class PokeBattle_AI
 					end
 				end
 			when 0x96 # Natural Gift
-				score*=0 if @attacker.item.nil? || !pbIsBerry?(@attacker.item) || @attacker.ability == :KLUTZ || @battle.state.effects[:MagicRoom]>0 || @attacker.effects[:Embargo]>0 || (@opponent.ability == :UNNERVE || @opponent.ability == :ASONE)
+				score*=0 if @attacker.item.nil? || !pbIsBerry?(@attacker.item) || @attacker.hasAbility?(:KLUTZ) || @battle.state.effects[:MagicRoom]>0 || @attacker.effects[:Embargo]>0 || (@opponent.hasAbility?(:UNNERVE) || @opponent.hasAbility?(:ASONE))
 			when 0x97 # Trump Card
 				score*=1.2 if @attacker.hp==@attacker.totalhp
 				score*=1.3 if checkAIdamage()<(@attacker.hp/3.0)
@@ -2046,7 +2046,7 @@ class PokeBattle_AI
 			when 0xaa # Protect, Detect
 				miniscore = protectcode()
 			when 0xab # Quick Guard
-				if (@opponent.ability == :GALEWINGS && @opponent.hp == @opponent.totalhp) || (@opponent.ability == :PRANKSTER && @attacker.hasType?(:DARK)) || checkAIpriority()
+				if (@opponent.hasAbility?(:GALEWINGS) && @opponent.hp == @opponent.totalhp) || (@opponent.hasAbility?(:PRANKSTER) && @attacker.hasType?(:DARK)) || checkAIpriority()
 					miniscore = specialprotectcode()
 				else
 					miniscore = 0
@@ -2145,7 +2145,7 @@ class PokeBattle_AI
 				miniscore = selfstatboost([0,1,0,0,0,0,0])
 				miniscore *= weaselslashcode()
 			when 0xc9 # Fly
-				if @attacker.ability == :NOGUARD || @opponent.ability == :NOGUARD || (@opponent.ability==:FAIRYAURA && @battle.FE == :FAIRYTALE)
+				if @attacker.hasAbility?(:NOGUARD) || @opponent.hasAbility?(:NOGUARD) || (@opponent.ability==:FAIRYAURA && @battle.FE == :FAIRYTALE)
 					miniscore = weaselslashcode() unless @battle.FE == :CLOUDS || @battle.FE == :CAVE || @battle.FE == :SKY || (Rejuv && battle.FE == :DRAGONSDEN)
 				elsif !(@battle.FE == :CLOUDS || @battle.FE == :CAVE || @battle.FE == :SKY || (Rejuv && battle.FE == :DRAGONSDEN))
 					miniscore = twoturncode() unless @battle.FE == :CLOUDS || @battle.FE == :CAVE || @battle.FE == :SKY || (Rejuv && battle.FE == :DRAGONSDEN)
@@ -2153,14 +2153,14 @@ class PokeBattle_AI
 				end
 				miniscore=0 if @battle.state.effects[:Gravity]!=0
 			when 0xca # Dig
-				if @attacker.ability == :NOGUARD || @opponent.ability == :NOGUARD || (@opponent.ability==:FAIRYAURA && @battle.FE == :FAIRYTALE)
+				if @attacker.hasAbility?(:NOGUARD) || @opponent.hasAbility?(:NOGUARD) || (@opponent.ability==:FAIRYAURA && @battle.FE == :FAIRYTALE)
 					miniscore = weaselslashcode() unless (Rejuv && @battle.FE == :DESERT)
 				elsif !(Rejuv && @battle.FE == :DESERT)
 					miniscore = twoturncode()
 					miniscore*=0.3 if checkAImoves([:EARTHQUAKE])
 				end
 			when 0xcb # Dive
-				if @attacker.ability == :NOGUARD || @opponent.ability == :NOGUARD || (@opponent.ability==:FAIRYAURA && @battle.FE == :FAIRYTALE)
+				if @attacker.hasAbility?(:NOGUARD) || @opponent.hasAbility?(:NOGUARD) || (@opponent.ability==:FAIRYAURA && @battle.FE == :FAIRYTALE)
 					miniscore = weaselslashcode() unless (@battle.FE == :WATERSURFACE || @battle.FE == :UNDERWATER)
 				elsif !(@battle.FE == :WATERSURFACE || @battle.FE == :UNDERWATER)
 					miniscore = twoturncode()
@@ -2170,7 +2170,7 @@ class PokeBattle_AI
 					miniscore*=0.3 if !@attacker.hasType?(:POISON) && !@attacker.hasType?(:STEEL)
 				end
 			when 0xcc # Bounce
-				if @attacker.ability == :NOGUARD || @opponent.ability == :NOGUARD || (@opponent.ability==:FAIRYAURA && @battle.FE == :FAIRYTALE)
+				if @attacker.hasAbility?(:NOGUARD) || @opponent.hasAbility?(:NOGUARD) || (@opponent.ability==:FAIRYAURA && @battle.FE == :FAIRYTALE)
 					miniscore = weaselslashcode() unless @battle.FE == :CLOUDS || @battle.FE == :CAVE || @battle.FE == :SKY || (Rejuv && @battle.FE == :DRAGONSDEN)
 				elsif !(@battle.FE == :CLOUDS || @battle.FE == :CAVE || @battle.FE == :SKY || (Rejuv && @battle.FE == :DRAGONSDEN))
 					miniscore = twoturncode()
@@ -2179,14 +2179,14 @@ class PokeBattle_AI
 				miniscore*= paracode()
 				miniscore = 0 if @battle.state.effects[:Gravity]!=0
 			when 0xcd # Phantom Force, Phantom Force
-				if @attacker.ability == :NOGUARD || @opponent.ability == :NOGUARD || (@opponent.ability==:FAIRYAURA && @battle.FE == :FAIRYTALE)
+				if @attacker.hasAbility?(:NOGUARD) || @opponent.hasAbility?(:NOGUARD) || (@opponent.ability==:FAIRYAURA && @battle.FE == :FAIRYTALE)
 					miniscore = weaselslashcode() unless @battle.FE == :HAUNTED || @battle.ProgressiveFieldCheck(PBFields::DARKNESS,2,3)
 				else
 					miniscore = twoturncode() unless @battle.FE == :HAUNTED || @battle.ProgressiveFieldCheck(PBFields::DARKNESS,2,3)
 				end
 				miniscore*=1.1 if checkAImoves(PBStuff::PROTECTMOVE)
 			when 0xce # Sky Drop
-				if @attacker.ability == :NOGUARD || @opponent.ability == :NOGUARD || (@opponent.ability==:FAIRYAURA && @battle.FE == :FAIRYTALE)
+				if @attacker.hasAbility?(:NOGUARD) || @opponent.hasAbility?(:NOGUARD) || (@opponent.ability==:FAIRYAURA && @battle.FE == :FAIRYTALE)
 					miniscore = weaselslashcode()
 				else
 					miniscore = twoturncode()
@@ -2311,7 +2311,7 @@ class PokeBattle_AI
 				miniscore = 0 if @opponent.status!=:SLEEP
 			when 0xdf # Heal Pulse
 				miniscore = healpulsecode()
-				miniscore*=1.5 if @attacker.ability == :MEGALAUNCHER
+				miniscore*=1.5 if @attacker.hasAbility?(:MEGALAUNCHER)
 			when 0xe0 # Explosion, Self-Destruct
 				miniscore = deathcode()
 				score*=1.5 if @battle.FE == :GLITCH
@@ -2347,7 +2347,7 @@ class PokeBattle_AI
 			when 0xeb # Roar, Whirlwind
 				miniscore = phasecode()
 			when 0xec # Dragon Tail, Circle Throw
-				miniscore = phasecode() if @opponent.effects[:Substitute]<=0 && !(@opponent.effects[:Ingrain] || @opponent.ability == :SUCTIONCUPS || @opponent.pbNonActivePokemonCount==0 || @opponent.effects[:PerishSong]>0 || @opponent.effects[:Yawn]>0)
+				miniscore = phasecode() if @opponent.effects[:Substitute]<=0 && !(@opponent.effects[:Ingrain] || @opponent.hasAbility?(:SUCTIONCUPS) || @opponent.pbNonActivePokemonCount==0 || @opponent.effects[:PerishSong]>0 || @opponent.effects[:Yawn]>0)
 			when 0xed # Baton Pass
 				miniscore = pivotcode()
 			when 0xee # U-turn, Volt Switch
@@ -2596,7 +2596,7 @@ class PokeBattle_AI
 				if @battle.state.effects[:Gravity]==0 && @mondata.skill>=BESTSKILL
 					if @battle.FE == :NEWWORLD
 						score*=2 if !@attacker.hasType?(:FLYING) && @attacker.ability != :LEVITATE
-						score*=2 if @opponent.hasType?(:FLYING) || @opponent.ability == :LEVITATE
+						score*=2 if @opponent.hasType?(:FLYING) || @opponent.hasAbility?(:LEVITATE)
 						if pbPartyHasType?(:PSYCHIC) || pbPartyHasType?(:FAIRY) || pbPartyHasType?(:DARK)
 							score*=2
 							score*=2 if @attacker.hasType?(:PSYCHIC) || @attacker.hasType?(:FAIRY) || @attacker.hasType?(:DARK)
@@ -2737,9 +2737,9 @@ class PokeBattle_AI
 			when 0x145 # Fairy Lock
 				miniscore = fairylockcode()
 			when 0x146 # Magnetic Flux
-				if !(@attacker.ability == :PLUS || @attacker.ability == :MINUS || @attacker.pbPartner.ability == :PLUS || @attacker.pbPartner.ability == :MINUS)
+				if !(@attacker.hasAbility?(:PLUS) || @attacker.hasAbility?(:MINUS) || @attacker.pbPartner.hasAbility?(:PLUS) || @attacker.pbPartner.hasAbility?(:MINUS))
 					miniscore=0
-				elsif @attacker.ability == :PLUS || @attacker.ability == :MINUS
+				elsif @attacker.hasAbility?(:PLUS) || @attacker.hasAbility?(:MINUS)
 					miniscore = selfstatboost([0,1,0,0,1,0,0])
 				elsif @attacker.pbPartner.stages[PBStats::SPDEF]!=6 && @attacker.pbPartner.stages[PBStats::DEFENSE]!=6
 					miniscore=0.7
@@ -2747,7 +2747,7 @@ class PokeBattle_AI
 					miniscore*=1.1 if @attacker.pbPartner.hp>attacker.pbPartner.totalhp*0.75
 					miniscore*=0.3 if @attacker.pbPartner.effects[:Yawn]>0 || @attacker.pbPartner.effects[:LeechSeed]>=0 || @attacker.pbPartner.effects[:Attract]>=0 || !@attacker.pbPartner.status.nil?
 					miniscore*=0.3 if checkAImoves(PBStuff::PHASEMOVE)
-					miniscore*=0.5 if @opponent.ability == :UNAWARE
+					miniscore*=0.5 if @opponent.hasAbility?(:UNAWARE)
 					miniscore*=1.2 if hpGainPerTurn(@attacker.pbPartner)>1
 				end
 			when 0x147 # Fell Stinger
@@ -2789,7 +2789,7 @@ class PokeBattle_AI
 				if @attacker.species==:HOOPA && @attacker.form==1 # Hoopa-U
 					miniscore = nevermisscode(initialscores[scoreindex])
 					miniscore*=feintcode()
-					if @attacker.ability == :CONTRARY
+					if @attacker.hasAbility?(:CONTRARY)
 						miniscore *= selfstatboost([0,1,0,0,0,0,0])
 					else
 						miniscore*=selfstatdrop([0,1,0,0,0],score)
@@ -2806,16 +2806,16 @@ class PokeBattle_AI
 					miniscore*=0.8
 				elsif @opponent.pbCanPoison?(false)
 					miniscore*=1.3
-					miniscore*=1.3 if @attacker.ability == :MERCILESS
-					miniscore*=0.3 if @opponent.ability == :POISONHEAL
-					miniscore*=0.7 if @opponent.ability == :TOXICBOOST
+					miniscore*=1.3 if @attacker.hasAbility?(:MERCILESS)
+					miniscore*=0.3 if @opponent.hasAbility?(:POISONHEAL)
+					miniscore*=0.7 if @opponent.hasAbility?(:TOXICBOOST)
 				end
 			when 0x15d # Beak Blast
 				miniscore = beakcode()
 			when 0x15e # Burn Up
 				miniscore = burnupcode()
 			when 0x15f # Clanging Scales
-				if @attacker.ability == :CONTRARY
+				if @attacker.hasAbility?(:CONTRARY)
 					miniscore = selfstatboost([0,1,0,0,0,0,0])
 				else
 					miniscore = antistatcode([0,1,0,0,0],initialscores[scoreindex])
@@ -2835,9 +2835,9 @@ class PokeBattle_AI
 				miniscore*=1.5 if @battle.FE == :GRASSY || @battle.FE == :FAIRYTALE || @battle.ProgressiveFieldCheck(PBFields::FLOWERGARDEN,3,5)
 				miniscore*=0.2 if @attacker.status!=:POISON && (@battle.FE == :CORROSIVE || @battle.FE == :CORROSIVEMIST)
 			when 0x163 # Gear Up
-				if !(attacker.ability == :PLUS || attacker.ability == :MINUS || attacker.pbPartner.ability == :PLUS || attacker.pbPartner.ability == :MINUS)
+				if !(attacker.hasAbility?(:PLUS) || attacker.hasAbility?(:MINUS) || attacker.pbPartner.hasAbility?(:PLUS) || attacker.pbPartner.hasAbility?(:MINUS))
 					miniscore=0
-				elsif @attacker.ability == :PLUS || @attacker.ability == :MINUS
+				elsif @attacker.hasAbility?(:PLUS) || @attacker.hasAbility?(:MINUS)
 					miniscore = selfstatboost([1,0,0,1,0,0,0])
 				else
 					miniscore=1.0
@@ -2845,7 +2845,7 @@ class PokeBattle_AI
 					miniscore*=1.1 if @attacker.pbPartner.hp>attacker.pbPartner.totalhp*0.75
 					miniscore*=0.3 if @attacker.pbPartner.effects[:Yawn]>0 || @attacker.pbPartner.effects[:LeechSeed]>=0 || @attacker.pbPartner.effects[:Attract]>=0 || !@attacker.pbPartner.status.nil?
 					miniscore*=0.3 if checkAImoves(PBStuff::PHASEMOVE)
-					miniscore*=0.5 if @opponent.ability == :UNAWARE
+					miniscore*=0.5 if @opponent.hasAbility?(:UNAWARE)
 				end
 			when 0x164 # Instruct
 				if !@battle.doublebattle || @opponent.index!=@attacker.pbPartner.index || !@opponent.lastMoveUsedSketch.is_a?(Symbol)
@@ -2861,7 +2861,7 @@ class PokeBattle_AI
 			when 0x167 # Pollen Puff
 				if @opponent.index==@attacker.pbPartner.index
 					score=15*healpulsecode()
-					score=0 if @opponent.ability == :BULLETPROOF
+					score=0 if @opponent.hasAbility?(:BULLETPROOF)
 				end
 			when 0x168 # Psychic Terrain
 				miniscore = psychicterraincode()
@@ -3048,7 +3048,7 @@ class PokeBattle_AI
 		return @move.basedamage > 0 ? 1 : 0 if hydrationCheck(@opponent)
 		return @move.basedamage > 0 ? 1 : 0 if @move.move == :DARKVOID && !(attacker.species == :DARKRAI || (attacker.species == :HYPNO && attacker.form == 1))
 		miniscore = 1.2
-		if @attacker.pbHasMove?(:DREAMEATER) || @attacker.pbHasMove?(:NIGHTMARE) || @attacker.ability == :BADDREAMS
+		if @attacker.pbHasMove?(:DREAMEATER) || @attacker.pbHasMove?(:NIGHTMARE) || @attacker.hasAbility?(:BADDREAMS)
 			miniscore *= 1.5
 		end
 		miniscore*=(1.2*hpGainPerTurn)
@@ -3058,9 +3058,9 @@ class PokeBattle_AI
 		miniscore*=1.3 if @attacker.pbHasMove?(:SUBSTITUTE)
 		miniscore*=1.2 if @opponent.hp==@opponent.totalhp
 		miniscore*=0.1 if checkAImoves([:SLEEPTALK,:SNORE])
-		miniscore*=0.1 if @opponent.ability == :NATURALCURE
-		miniscore*=0.8 if @opponent.ability == :MARVELSCALE
-		miniscore*=0.5 if @opponent.ability == :SYNCHRONIZE && @attacker.pbCanSleep?(false)
+		miniscore*=0.1 if @opponent.hasAbility?(:NATURALCURE)
+		miniscore*=0.8 if @opponent.hasAbility?(:MARVELSCALE)
+		miniscore*=0.5 if @opponent.hasAbility?(:SYNCHRONIZE) && @attacker.pbCanSleep?(false)
 		miniscore*=0.4 if @opponent.effects[:Confusion]>0
 		miniscore*=0.5 if @opponent.effects[:Attract]>=0
 		ministat = statchangecounter(@opponent,1,7)
@@ -3088,20 +3088,20 @@ class PokeBattle_AI
 		ministat+=@opponent.stages[PBStats::EVASION]
 		miniscore*=1+0.05*ministat if ministat>0
 		miniscore*=2 if @move.function == 0x06 && checkAIhealing()
-		miniscore*=0.3 if @opponent.ability == :NATURALCURE
-		miniscore*=0.7 if @opponent.ability == :MARVELSCALE
-		miniscore*=0.2 if @opponent.ability == :TOXICBOOST || @opponent.ability == :GUTS || @opponent.ability == :QUICKFEET
-		miniscore*=0.1 if @opponent.ability == :POISONHEAL || @opponent.ability == :MAGICGUARD
-		miniscore*=0.7 if @opponent.ability == :SHEDSKIN
-		miniscore*=1.1 if (@opponent.ability == :STURDY || (@battle.FE == :CHESS && @opponent.pokemon.piece==:PAWN)) && @move.basedamage>0
-		miniscore*=0.5 if @opponent.ability == :SYNCHRONIZE && @attacker.status.nil? && !@attacker.hasType?(:POISON) && !@attacker.hasType?(:STEEL)
+		miniscore*=0.3 if @opponent.hasAbility?(:NATURALCURE)
+		miniscore*=0.7 if @opponent.hasAbility?(:MARVELSCALE)
+		miniscore*=0.2 if @opponent.hasAbility?(:TOXICBOOST) || @opponent.hasAbility?(:GUTS) || @opponent.hasAbility?(:QUICKFEET)
+		miniscore*=0.1 if @opponent.hasAbility?(:POISONHEAL) || @opponent.hasAbility?(:MAGICGUARD)
+		miniscore*=0.7 if @opponent.hasAbility?(:SHEDSKIN)
+		miniscore*=1.1 if (@opponent.hasAbility?(:STURDY) || (@battle.FE == :CHESS && @opponent.pokemon.piece==:PAWN)) && @move.basedamage>0
+		miniscore*=0.5 if @opponent.hasAbility?(:SYNCHRONIZE) && @attacker.status.nil? && !@attacker.hasType?(:POISON) && !@attacker.hasType?(:STEEL)
 		miniscore*=0.2 if checkAImoves([:FACADE])
 		miniscore*=0.1 if checkAImoves([:REST])
 		miniscore*=1.5 if @mondata.roles.include?(:PHYSICALWALL) || @mondata.roles.include?(:SPECIALWALL)
 		if @initial_scores.length>0
 			miniscore*=1.2 if hasbadmoves(30)
 		end
-		if @attacker.pbHasMove?(:VENOSHOCK) || @attacker.pbHasMove?(:VENOMDRENCH) || @attacker.ability == :MERCILESS
+		if @attacker.pbHasMove?(:VENOSHOCK) || @attacker.pbHasMove?(:VENOMDRENCH) || @attacker.hasAbility?(:MERCILESS)
 			miniscore*=1.6
 		end
 		miniscore*=0.4 if @opponent.effects[:Yawn]>0
@@ -3120,11 +3120,11 @@ class PokeBattle_AI
 		miniscore*=1.2 if @opponent.hp==@opponent.totalhp
 		ministat= @opponent.stages[PBStats::ATTACK] + @opponent.stages[PBStats::SPATK] + @opponent.stages[PBStats::SPEED]
 		miniscore*=1+0.05*ministat if ministat>0
-		miniscore*=0.3 if @opponent.ability == :NATURALCURE
-		miniscore*=0.5 if @opponent.ability == :MARVELSCALE
-		miniscore*=0.2 if @opponent.ability == :GUTS || @opponent.ability == :QUICKFEET
-		miniscore*=0.7 if @opponent.ability == :SHEDSKIN
-		miniscore*=0.5 if @opponent.ability == :SYNCHRONIZE && @attacker.pbCanParalyze?(false)
+		miniscore*=0.3 if @opponent.hasAbility?(:NATURALCURE)
+		miniscore*=0.5 if @opponent.hasAbility?(:MARVELSCALE)
+		miniscore*=0.2 if @opponent.hasAbility?(:GUTS) || @opponent.hasAbility?(:QUICKFEET)
+		miniscore*=0.7 if @opponent.hasAbility?(:SHEDSKIN)
+		miniscore*=0.5 if @opponent.hasAbility?(:SYNCHRONIZE) && @attacker.pbCanParalyze?(false)
 		miniscore*=1.2 if @mondata.roles.include?(:PHYSICALWALL) || @mondata.roles.include?(:SPECIALWALL) || @mondata.roles.include?(:PIVOT)
 		miniscore*=1.3 if @mondata.roles.include?(:TANK)
 		if !pbAIfaster?() && (pbRoughStat(@opponent,PBStats::SPEED)/2.0)<@attacker.pbSpeed && @battle.trickroom==0
@@ -3159,14 +3159,14 @@ class PokeBattle_AI
 		ministat+=@opponent.stages[PBStats::SPATK]
 		ministat+=@opponent.stages[PBStats::SPEED]
 		miniscore*=1+0.05*ministat if ministat>0
-		miniscore*=0.3 if @opponent.ability == :NATURALCURE
-		miniscore*=0.7 if @opponent.ability == :MARVELSCALE
-		miniscore*=0.1 if @opponent.ability == :GUTS || @opponent.ability == :FLAREBOOST
-		miniscore*=0.7 if @opponent.ability == :SHEDSKIN
-		miniscore*=0.5 if @opponent.ability == :SYNCHRONIZE && @attacker.pbCanBurn?(false)
-		miniscore*=0.5 if @opponent.ability == :MAGICGUARD
-		miniscore*=0.3 if @opponent.ability == :QUICKFEET
-		miniscore*=1.1 if @opponent.ability == :STURDY && @move.basedamage>0
+		miniscore*=0.3 if @opponent.hasAbility?(:NATURALCURE)
+		miniscore*=0.7 if @opponent.hasAbility?(:MARVELSCALE)
+		miniscore*=0.1 if @opponent.hasAbility?(:GUTS) || @opponent.hasAbility?(:FLAREBOOST)
+		miniscore*=0.7 if @opponent.hasAbility?(:SHEDSKIN)
+		miniscore*=0.5 if @opponent.hasAbility?(:SYNCHRONIZE) && @attacker.pbCanBurn?(false)
+		miniscore*=0.5 if @opponent.hasAbility?(:MAGICGUARD)
+		miniscore*=0.3 if @opponent.hasAbility?(:QUICKFEET)
+		miniscore*=1.1 if @opponent.hasAbility?(:STURDY) && @move.basedamage>0
 		miniscore*=0.1 if checkAImoves([:REST])
 		miniscore*=0.3 if checkAImoves([:FACADE])
 		if pbRoughStat(@opponent,PBStats::ATTACK)>pbRoughStat(@opponent,PBStats::SPATK)
@@ -3188,16 +3188,16 @@ class PokeBattle_AI
 		miniscore*=1.2 if checkAIhealing()
 		ministat = statchangecounter(@opponent,1,7)
 		miniscore*=1+0.05*ministat if ministat>0
-		miniscore*=0.3 if @opponent.ability == :NATURALCURE
-		miniscore*=0.8 if @opponent.ability == :MARVELSCALE
-		miniscore*=0.5 if @opponent.ability == :SYNCHRONIZE && @attacker.pbCanFreeze?(false)
+		miniscore*=0.3 if @opponent.hasAbility?(:NATURALCURE)
+		miniscore*=0.8 if @opponent.hasAbility?(:MARVELSCALE)
+		miniscore*=0.5 if @opponent.hasAbility?(:SYNCHRONIZE) && @attacker.pbCanFreeze?(false)
 		miniscore = pbSereneGraceCheck(miniscore) if @move.basedamage>0
 		miniscore = pbReduceWhenKills(miniscore)
 		return miniscore
 	end
 
 	def flinchcode
-		return @move.basedamage > 0 ? 1 : 0 if @opponent.effects[:Substitute] > 0 || @opponent.ability == :INNERFOCUS || secondaryEffectNegated?()
+		return @move.basedamage > 0 ? 1 : 0 if @opponent.effects[:Substitute] > 0 || @opponent.hasAbility?(:INNERFOCUS) || secondaryEffectNegated?()
 		return @move.basedamage > 0 ? 1 : 0 if !pbAIfaster?(@move)
 		miniscore = 1.0
 		miniscore*= 1.3 if !hasgreatmoves()
@@ -3209,7 +3209,7 @@ class PokeBattle_AI
 			miniscore*=1.1
 			miniscore*=1.2 if @opponent.effects[:Toxic]>0
 		end
-		miniscore*=0.3 if @opponent.ability == :STEADFAST
+		miniscore*=0.3 if @opponent.hasAbility?(:STEADFAST)
 		if @mondata.skill >= BESTSKILL
 			miniscore*=1.1 if @battle.FE == :ROCKY # Rocky
 		end
@@ -3242,7 +3242,7 @@ class PokeBattle_AI
 		miniscore*=1.3 if @mondata.roles.include?(:PHYSICALWALL) || @mondata.roles.include?(:SPECIALWALL)
 		miniscore*=1.1 if @opponent.effects[:Attract]>=0
 		miniscore*=1.1 if @opponent.status == :PARALYSIS
-		miniscore*=0.7 if @opponent.ability == :TANGLEDFEET
+		miniscore*=0.7 if @opponent.hasAbility?(:TANGLEDFEET)
 		if @attacker.pbHasMove?(:SUBSTITUTE)
 			miniscore*=1.2
 			miniscore*=1.3 if @attacker.effects[:Substitute]>0
@@ -3258,9 +3258,9 @@ class PokeBattle_AI
 	def attractcode
 		agender=@attacker.gender
 		ogender=@opponent.gender
-		return 0 if (agender==2 || ogender==2 || agender==ogender || @opponent.effects[:Attract]>=0 || ((@opponent.ability == :OBLIVIOUS || @opponent.ability == :AROMAVEIL || @opponent.pbPartner.ability == :AROMAVEIL) && !moldBreakerCheck(@attacker)))
+		return 0 if (agender==2 || ogender==2 || agender==ogender || @opponent.effects[:Attract]>=0 || ((@opponent.hasAbility?(:OBLIVIOUS) || @opponent.hasAbility?(:AROMAVEIL) || @opponent.pbPartner.hasAbility?(:AROMAVEIL)) && !moldBreakerCheck(@attacker)))
 		miniscore=1.2
-		miniscore*=0.7 if @attacker.ability == :CUTECHARM
+		miniscore*=0.7 if @attacker.hasAbility?(:CUTECHARM)
 		miniscore*=1.3 if @mondata.roles.include?(:PHYSICALWALL) || @mondata.roles.include?(:SPECIALWALL)
 		miniscore*=1.1 if @opponent.effects[:Confusion]>0
 		miniscore*=1.1 if @opponent.status== :PARALYSIS
@@ -3293,8 +3293,8 @@ class PokeBattle_AI
 		miniscore=1.2
 		for mon in @battle.pbPartySingleOwner(@attacker.index)
 			next if mon.nil? || mon.hp <= 0 || mon.status.nil?
-			miniscore*=0.5 if mon.status== :POISON && mon.ability == :POISONHEAL
-			miniscore*=0.8 if mon.ability == :GUTS || mon.ability == :QUICKFEET || mon.knowsMove?(:FACADE)
+			miniscore*=0.5 if mon.status== :POISON && mon.hasAbility?(:POISONHEAL)
+			miniscore*=0.8 if mon.hasAbility?(:GUTS) || mon.hasAbility?(:QUICKFEET) || mon.knowsMove?(:FACADE)
 			miniscore*=1.1 if mon.status== :SLEEP || mon.status== :FROZEN
 			monroles=pbGetMonRoles(mon)
 			miniscore*=1.2 if (monroles.include?(:PHYSICALWALL) || monroles.include?(:SPECIALWALL)) && mon.status== :POISON
@@ -3313,7 +3313,7 @@ class PokeBattle_AI
 		miniscore=1.3*1.3
 		if @attacker.status== :BURN && @opponent.pbCanBurn?(false)
 			miniscore*=1.2 if pbRoughStat(@opponent,PBStats::ATTACK)>pbRoughStat(@opponent,PBStats::SPATK)
-			miniscore*=0.7 if @opponent.ability == :FLAREBOOST
+			miniscore*=0.7 if @opponent.hasAbility?(:FLAREBOOST)
 		end
 		if @attacker.status== :PARALYSIS && @opponent.pbCanParalyze?(false)
 			miniscore*=1.1 if pbRoughStat(@opponent,PBStats::ATTACK)<pbRoughStat(@opponent,PBStats::SPATK)
@@ -3322,10 +3322,10 @@ class PokeBattle_AI
 		if @attacker.status== :POISON && @opponent.pbCanPoison?(false)
 			miniscore*=1.1 if checkAIhealing()
 			miniscore*=1.4 if @attacker.effects[:Toxic]>0
-			miniscore*=0.3 if @opponent.ability == :POISONHEAL
-			miniscore*=0.7 if @opponent.ability == :TOXICBOOST
+			miniscore*=0.3 if @opponent.hasAbility?(:POISONHEAL)
+			miniscore*=0.7 if @opponent.hasAbility?(:TOXICBOOST)
 		end
-		miniscore*=0.7 if @opponent.ability == :SHEDSKIN || @opponent.ability == :NATURALCURE || @opponent.ability == :GUTS || @opponent.ability == :QUICKFEET || @opponent.ability == :MARVELSCALE
+		miniscore*=0.7 if @opponent.hasAbility?(:SHEDSKIN) || @opponent.hasAbility?(:NATURALCURE) || @opponent.hasAbility?(:GUTS) || @opponent.hasAbility?(:QUICKFEET) || @opponent.hasAbility?(:MARVELSCALE)
 		miniscore*=0.7 if checkAImoves([:FACADE])
 		miniscore*=1.3 if checkAImoves([:HEX])
 		miniscore*=1.3 if @attacker.pbHasMove?(:HEX)
@@ -3338,7 +3338,7 @@ class PokeBattle_AI
 		stats.unshift(0) #this is required to make the next line work correctly
 		for i in 1...stats.length
 			next if stats[i] == 0
-			stats[i]*= 2 if @attacker.ability == :SIMPLE
+			stats[i]*= 2 if @attacker.hasAbility?(:SIMPLE)
 			#cap boost to the max it can be inscreased
 			stats[i] = [6-@attacker.stages[i], stats[i]].min
 		end
@@ -3387,7 +3387,7 @@ class PokeBattle_AI
 					miniscore*=0.3 if checkAImoves([:FOULPLAY])
 					miniscore*=1.4 if notOHKO?(@attacker,@opponent)
 					miniscore*=0.6 if checkAIpriority()
-					miniscore*=0.6 if (@opponent.ability == :SPEEDBOOST || (@opponent.ability == :MOTORDRIVE && @battle.FE == :ELECTERRAIN) || (@opponent.ability == :STEAMENGINE && (@battle.FE == :WATERSURFACE || @battle.FE == :UNDERWATER)))
+					miniscore*=0.6 if (@opponent.hasAbility?(:SPEEDBOOST) || (@opponent.hasAbility?(:MOTORDRIVE) && @battle.FE == :ELECTERRAIN) || (@opponent.hasAbility?(:STEAMENGINE) && (@battle.FE == :WATERSURFACE || @battle.FE == :UNDERWATER)))
 				when PBStats::DEFENSE
 					tank = true
 					if pbRoughStat(@opponent,PBStats::SPATK)<pbRoughStat(@opponent,PBStats::ATTACK)
@@ -3433,7 +3433,7 @@ class PokeBattle_AI
 					#Skip speed checks if we only have priority damaging moves anyway
 					if @attacker.moves.any? {|moveloop| moveloop!=nil && moveloop.basedamage > 0 && moveloop.priority < 1 && @mondata.roughdamagearray.transpose[@attacker.moves.find_index(moveloop)].max > 10 } # thank u perry 4 saving me									
 						#Moxie/Soul Heart	
-						miniscore*=1.5 if (physmove && (@attacker.ability == :MOXIE || @attacker.ability == :CHILLINGNEIGH || (@attacker.ability == :ASONE && @attacker.form == 1))) || (specmove && (@attacker.ability == :SOULHEART || @attacker.ability == :GRIMNEIGH || (@attacker.ability == :ASONE && @attacker.form == 2)))
+						miniscore*=1.5 if (physmove && (@attacker.hasAbility?(:MOXIE) || @attacker.hasAbility?(:CHILLINGNEIGH) || (@attacker.hasAbility?(:ASONE) && @attacker.form == 1))) || (specmove && (@attacker.hasAbility?(:SOULHEART) || @attacker.hasAbility?(:GRIMNEIGH) || (@attacker.hasAbility?(:ASONE) && @attacker.form == 2)))
 						if @attacker.attack<@attacker.spatk
 							miniscore*=(1+0.05*@attacker.stages[PBStats::SPATK]) if @attacker.stages[PBStats::SPATK]<0
 						else
@@ -3455,7 +3455,7 @@ class PokeBattle_AI
 					end
 				when PBStats::EVASION
 					tank = true
-					miniscore*=0.2 if @opponent.ability == :NOGUARD || @attacker.ability == :NOGUARD || checkAIaccuracy() || (opponent.ability==:FAIRYAURA && @battle.FE == :FAIRYTALE)
+					miniscore*=0.2 if @opponent.hasAbility?(:NOGUARD) || @attacker.hasAbility?(:NOGUARD) || checkAIaccuracy() || (opponent.ability==:FAIRYAURA && @battle.FE == :FAIRYTALE)
 					if (@mondata.attitemworks && @attacker.item == :BRIGHTPOWDER) || (@mondata.attitemworks && @attacker.item == :LAXINCENSE) || accuracyWeatherAbilityActive?(@attacker)
 						miniscore*=1.3
 					end
@@ -3468,7 +3468,7 @@ class PokeBattle_AI
 		miniscore*=1.3 if @opponent.status== :SLEEP || @opponent.status== :FROZEN
 		miniscore*=1.3 if hasbadmoves(20)
 		attackerHPpercent = (@attacker.hp.to_f)/@attacker.totalhp
-		if attackerHPpercent > 0.5 && attackerHPpercent < 0.75 && (@attacker.ability == :EMERGENCYEXIT || @attacker.ability == :WIMPOUT || (@attacker.itemWorks? && @attacker.item == :EJECTBUTTON))
+		if attackerHPpercent > 0.5 && attackerHPpercent < 0.75 && (@attacker.hasAbility?(:EMERGENCYEXIT) || @attacker.hasAbility?(:WIMPOUT) || (@attacker.itemWorks? && @attacker.item == :EJECTBUTTON))
 			miniscore*=0.3
 		elsif attackerHPpercent < 0.33 && move.basedamage==0
 			miniscore*=0.3
@@ -3527,7 +3527,7 @@ class PokeBattle_AI
 			miniscore*=0.7 if @attacker.status== :POISON && @attacker.ability!=:POISONHEAL
 			miniscore*=0.6 if @attacker.effects[:Toxic]>0 && @attacker.ability!=:POISONHEAL
 			miniscore*=0.6 if checkAIpriority()
-			miniscore*=0.6 if (@opponent.ability == :SPEEDBOOST || (((@opponent.ability == :MOTORDRIVE && @battle.FE == :ELECTERRAIN) || (@opponent.ability == :STEAMENGINE && (@battle.FE == :WATERSURFACE || @battle.FE == :UNDERWATER))) && (stats[PBStats::SPEED] < 2)))
+			miniscore*=0.6 if (@opponent.hasAbility?(:SPEEDBOOST) || (((@opponent.hasAbility?(:MOTORDRIVE) && @battle.FE == :ELECTERRAIN) || (@opponent.hasAbility?(:STEAMENGINE) && (@battle.FE == :WATERSURFACE || @battle.FE == :UNDERWATER))) && (stats[PBStats::SPEED] < 2)))
 			miniscore*=1.4 if notOHKO?(@attacker,@opponent)
 		else
 			miniscore*=1.1 if attackerHPpercent > 0.75
@@ -3590,11 +3590,11 @@ class PokeBattle_AI
 			elsif @initial_scores.length>0
 				miniscore*= 0.5 if hasgreatmoves()
 			end
-			miniscore=1 if @opponent.ability == :UNAWARE || miniscore < 1
+			miniscore=1 if @opponent.hasAbility?(:UNAWARE) || miniscore < 1
 			miniscore=pbSereneGraceCheck(miniscore)
 		else
-			miniscore*=0 if @attacker.ability == :CONTRARY 
-			miniscore*=0.01 if @opponent.ability == :UNAWARE
+			miniscore*=0 if @attacker.hasAbility?(:CONTRARY) 
+			miniscore*=0.01 if @opponent.hasAbility?(:UNAWARE)
 		end
     	return miniscore
 	end
@@ -3705,7 +3705,7 @@ class PokeBattle_AI
 				miniscore*=0.3
 			end
 			miniscore*=1.2 if @mondata.oppitemworks && (@opponent.item == :PERSIMBERRY || @opponent.item == :LUMBERRY)
-			miniscore*=0 if @opponent.ability == :CONTRARY
+			miniscore*=0 if @opponent.hasAbility?(:CONTRARY)
 			miniscore*=0 if @opponent.effects[:Substitute]>0
 			opp1 = @attacker.pbOppositeOpposing
 			opp2 = opp1.pbPartner
@@ -3720,7 +3720,7 @@ class PokeBattle_AI
 
 	def oppstatdrop(stats)
 		return 1 if @move.basedamage > 0 && @initial_scores[@score_index]>=100
-		return @move.basedamage > 0 ? 1 : 0 if @opponent.ability == :CLEARBODY || @opponent.ability == :WHITESMOKE
+		return @move.basedamage > 0 ? 1 : 0 if @opponent.hasAbility?(:CLEARBODY) || @opponent.hasAbility?(:WHITESMOKE)
 		#stats should be an array of the stat boosts like so: [ATK,DEF,SPE,SPA,SPD,ACC,EVA] with nils in unaffected stats
 		#coil, for example, would be [1,1,0,0,0,1,0]
 		stats.unshift(0) #this is required to make the next line work correctly
@@ -3777,9 +3777,9 @@ class PokeBattle_AI
 			end
 			miniscore*=1+0.05*@opponent.stages[PBStats::SPEED] if @opponent.stages[PBStats::SPEED]<0 && !secondaryEffectNegated?()
 			miniscore*=0.1 if @opponent.itemWorks? && (@opponent.item == :LAGGINGTAIL || @opponent.item == :IRONBALL)
-			miniscore*=0.2 if @opponent.ability == :COMPETITIVE || @opponent.ability == :DEFIANT || @opponent.ability == :CONTRARY
+			miniscore*=0.2 if @opponent.hasAbility?(:COMPETITIVE) || @opponent.hasAbility?(:DEFIANT) || @opponent.hasAbility?(:CONTRARY)
 		else    #non-speed stuff
-			miniscore*=0.1 if @opponent.ability == :COMPETITIVE || @opponent.ability == :DEFIANT || @opponent.ability == :CONTRARY
+			miniscore*=0.1 if @opponent.hasAbility?(:COMPETITIVE) || @opponent.hasAbility?(:DEFIANT) || @opponent.hasAbility?(:CONTRARY)
 			miniscore*=1.1 if @mondata.partyroles.any? {|roles| roles.include?(:SWEEPER)}
 		end
 		#status & moves section
@@ -3798,7 +3798,7 @@ class PokeBattle_AI
 			miniscore*=0.5 if checkAImoves([:GYROBALL])
 			miniscore*=0.1 if  @battle.trickroom!=0 || checkAImoves([:TRICKROOM])
 		end
-		if @battle.pbPokemonCount(@battle.pbParty(@opponent.index))==1 || @attacker.ability == :SHADOWTAG || @opponent.effects[:MeanLook]>0
+		if @battle.pbPokemonCount(@battle.pbParty(@opponent.index))==1 || @attacker.hasAbility?(:SHADOWTAG) || @opponent.effects[:MeanLook]>0
 			miniscore*=1.2
 		end
 		miniscore *= 0.5 if @mondata.roles.include?(:PHAZER)
@@ -3818,7 +3818,7 @@ class PokeBattle_AI
 		attackerHPpercent = (@attacker.hp.to_f)/@attacker.totalhp
 		if attackerHPpercent>0.75
 			miniscore*=1.2
-		elsif attackerHPpercent > 0.5 && attackerHPpercent < 0.75 && (@attacker.ability == :EMERGENCYEXIT || @attacker.ability == :WIMPOUT || (@attacker.itemWorks? && @attacker.item == :EJECTBUTTON))
+		elsif attackerHPpercent > 0.5 && attackerHPpercent < 0.75 && (@attacker.hasAbility?(:EMERGENCYEXIT) || @attacker.hasAbility?(:WIMPOUT) || (@attacker.itemWorks? && @attacker.item == :EJECTBUTTON))
 			miniscore*=0.3
 		elsif attackerHPpercent < 0.33
 			miniscore*=0.3
@@ -3835,10 +3835,10 @@ class PokeBattle_AI
 		miniscore*=1.3 if @opponent.status== :SLEEP || @opponent.status== :FROZEN
 		miniscore*=1.5 if @opponent.effects[:Encore]>0 && @opponent.moves[(@opponent.effects[:EncoreIndex])].basedamage==0
 		miniscore*=0.5 if @battle.doublebattle
-		miniscore*=2 if @attacker.ability == :SUPERLUCK || @attacker.ability == :SNIPER
+		miniscore*=2 if @attacker.hasAbility?(:SUPERLUCK) || @attacker.hasAbility?(:SNIPER)
 		miniscore*=1.2 if @mondata.attitemworks && (@attacker.item == :SCOPELENS || @attacker.item == :RAZORCLAW || (@attacker.item == :STICK && @attacker.pokemon.species==:FARFETCHD) || (@attacker.item == :LUCKYPUNCH && @attacker.pokemon.species==:CHANSEY))
 		miniscore*=1.3 if (@mondata.attitemworks && @attacker.item == :LANSATBERRY)
-		miniscore*=0.2 if @opponent.ability == :ANGERPOINT || @opponent.ability == :SHELLARMOR || @opponent.ability == :BATTLEARMOR
+		miniscore*=0.2 if @opponent.hasAbility?(:ANGERPOINT) || @opponent.hasAbility?(:SHELLARMOR) || @opponent.hasAbility?(:BATTLEARMOR)
 		miniscore*=0.5 if @attacker.pbHasMove?(:LASERFOCUS) || @attacker.pbHasMove?(:FROSTBREATH) || @attacker.pbHasMove?(:STORMTHROW)
 		miniscore*= 2**(@attacker.moves.count{|moveloop| moveloop!=nil && moveloop.highCritRate?})
 		return miniscore
@@ -3891,7 +3891,7 @@ class PokeBattle_AI
 	def oppstatrestorecode
 		return 1 if @opponent.effects[:Substitute] > 0
 		miniscore = 1 + 0.05*statchangecounter(@opponent,1,7)
-		miniscore *=1.1 if (@opponent.ability == :SPEEDBOOST || (@opponent.ability == :MOTORDRIVE && @battle.FE == :ELECTERRAIN) || (@opponent.ability == :STEAMENGINE && (@battle.FE == :WATERSURFACE || @battle.FE == :UNDERWATER)))
+		miniscore *=1.1 if (@opponent.hasAbility?(:SPEEDBOOST) || (@opponent.hasAbility?(:MOTORDRIVE) && @battle.FE == :ELECTERRAIN) || (@opponent.hasAbility?(:STEAMENGINE) && (@battle.FE == :WATERSURFACE || @battle.FE == :UNDERWATER)))
 		return miniscore
 	end
 
@@ -3903,7 +3903,7 @@ class PokeBattle_AI
 			attscore += -1.1 * statchangecounter(@attacker.pbPartner,1,7) if @attacker.pbPartner.hp>0
 		end
 		miniscore = oppscore + attscore
-		miniscore*=0.8 if ((@opponent.ability == :SPEEDBOOST || (@opponent.ability == :MOTORDRIVE && @battle.FE == :ELECTERRAIN) || (@opponent.ability == :STEAMENGINE && (@battle.FE == :WATERSURFACE || @battle.FE == :UNDERWATER))) || checkAImoves(PBStuff::SETUPMOVE))
+		miniscore*=0.8 if ((@opponent.hasAbility?(:SPEEDBOOST) || (@opponent.hasAbility?(:MOTORDRIVE) && @battle.FE == :ELECTERRAIN) || (@opponent.hasAbility?(:STEAMENGINE) && (@battle.FE == :WATERSURFACE || @battle.FE == :UNDERWATER))) || checkAImoves(PBStuff::SETUPMOVE))
 		return miniscore
 	end
 
@@ -4023,7 +4023,7 @@ class PokeBattle_AI
 			miniscore*=0.9
 			miniscore*=0.4 if @attacker.pbNonActivePokemonCount==0
 		end
-		miniscore*=0.5 if (@opponent.ability == :SPEEDBOOST || (@opponent.ability == :MOTORDRIVE && @battle.FE == :ELECTERRAIN) || (@opponent.ability == :STEAMENGINE && (@battle.FE == :WATERSURFACE || @battle.FE == :UNDERWATER)))
+		miniscore*=0.5 if (@opponent.hasAbility?(:SPEEDBOOST) || (@opponent.hasAbility?(:MOTORDRIVE) && @battle.FE == :ELECTERRAIN) || (@opponent.hasAbility?(:STEAMENGINE) && (@battle.FE == :WATERSURFACE || @battle.FE == :UNDERWATER)))
 		miniscore*=0.1 if @battle.trickroom!=0 || checkAImoves([:TRICKROOM])
 		miniscore*=1.4 if @mondata.roles.include?(:LEAD)
 		miniscore*=2.5 if !@battle.opponent.is_a?(Array) && @battle.opponent.trainertype==:ADRIENN
@@ -4044,7 +4044,7 @@ class PokeBattle_AI
 	def typechangecode(type)
 		type = type.intern if !type.is_a?(Symbol)
 		return 0 if type == @attacker.type1 && type == @attacker.type2
-		return 0 if @attacker.ability == :MULTITYPE || @attacker.ability == :RKSSYSTEM || @attacker.ability == :PROTEAN || @attacker.ability == :LIBERO || @attacker.ability == :COLORCHANGE
+		return 0 if @attacker.hasAbility?(:MULTITYPE) || @attacker.hasAbility?(:RKSSYSTEM) || @attacker.hasAbility?(:PROTEAN) || @attacker.hasAbility?(:LIBERO) || @attacker.hasAbility?(:COLORCHANGE)
 		miniscore = [PBTypes.twoTypeEff(@opponent.type1,@attacker.type1,@attacker.type2),PBTypes.twoTypeEff(@opponent.type2,@attacker.type1,@attacker.type2)].max
 		minimini = [@opponent.type1.nil? ? 0 : PBTypes.oneTypeEff(@opponent.type1,type), @opponent.type2.nil? ? 0 : PBTypes.oneTypeEff(@opponent.type2,type)].max
 		return 0 if minimini > miniscore
@@ -4067,7 +4067,7 @@ class PokeBattle_AI
 
 	def opptypechangecode(type)
 		return 0 if type == @opponent.type1 && type == @opponent.type2
-		return 0 if @opponent.ability == :MULTITYPE || @opponent.ability == :RKSSYSTEM || @opponent.ability == :PROTEAN || @opponent.ability == :LIBERO || @opponent.ability == :COLORCHANGE
+		return 0 if @opponent.hasAbility?(:MULTITYPE) || @opponent.hasAbility?(:RKSSYSTEM) || @opponent.hasAbility?(:PROTEAN) || @opponent.hasAbility?(:LIBERO) || @opponent.hasAbility?(:COLORCHANGE)
 		miniscore = [PBTypes.twoTypeEff(@attacker.type1,@opponent.type1,@opponent.type2),PBTypes.twoTypeEff(@attacker.type2,@opponent.type1,@opponent.type2)].max
 		minimini = [PBTypes.oneTypeEff(@attacker.type1,type),PBTypes.oneTypeEff(@attacker.type2,type)].max
 		return 0 if minimini < miniscore
@@ -4108,16 +4108,16 @@ class PokeBattle_AI
 
 	def entraincode(score)
 		return 0 if (PBStuff::FIXEDABILITIES).include?(@opponent.ability)
-		return 0 if @opponent.ability == :TRUANT
+		return 0 if @opponent.hasAbility?(:TRUANT)
 		return 0 if (PBStuff::ABILITYBLACKLIST).include?(@attacker.ability) && @attacker.ability != :WONDERGUARD
 		return 0 if @opponent.ability == 0 || @attacker.ability == @opponent.ability
 		miniscore = getAbilityDisruptScore(@opponent,@attacker)
 		minimini = getAbilityDisruptScore(@attacker,@opponent)
 		if @opponent.index != @attacker.pbPartner.index
 			score*= (1 + (minimini-miniscore))
-			if (@attacker.ability == :TRUANT)
+			if (@attacker.hasAbility?(:TRUANT))
 				score*=3
-			elsif (@attacker.ability == :WONDERGUARD)
+			elsif (@attacker.hasAbility?(:WONDERGUARD))
 				score=0
 			end
 		else
@@ -4137,13 +4137,13 @@ class PokeBattle_AI
 	def skillswapcode
 		return 0 if (PBStuff::FIXEDABILITIES).include?(@attacker.ability) && @attacker.ability != :ZENMODE
 		return 0 if (PBStuff::FIXEDABILITIES).include?(@opponent.ability) && @opponent.ability != :ZENMODE
-		return 0 if @opponent.ability == :ILLUSION || @attacker.ability == :ILLUSION
+		return 0 if @opponent.hasAbility?(:ILLUSION) || @attacker.hasAbility?(:ILLUSION)
 		return 0 if @opponent.ability == 0 || @attacker.ability == @opponent.ability
 		miniscore = getAbilityDisruptScore(@opponent,@attacker)
 		minimini = getAbilityDisruptScore(@attacker,@opponent)
 		miniscore = [2-miniscore,0].max if @opponent.index == @attacker.pbPartner.index
 		miniscore *= (1 + (minimini-miniscore)*2)
-		miniscore*=2 if (@attacker.ability == :TRUANT && @opponent.index!=@attacker.pbPartner.index) || (@opponent.ability == :TRUANT && @opponent.index==@attacker.pbPartner.index)
+		miniscore*=2 if (@attacker.hasAbility?(:TRUANT) && @opponent.index!=@attacker.pbPartner.index) || (@opponent.hasAbility?(:TRUANT) && @opponent.index==@attacker.pbPartner.index)
 		return miniscore
 	end
 
@@ -4286,14 +4286,14 @@ class PokeBattle_AI
 	def permacritcode(initialscore)
 		return 0 if @opponent.index == @attacker.pbPartner.index && (@opponent.ability != :ANGERPOINT || @opponent.stages[PBStats::ATTACK]==6)
 		return 0 if @attacker.effects[:LaserFocus]!=0 && @move.function==0x165
-		return 0.7 if @opponent.ability == :BATTLEARMOR || @opponent.ability == :SHELLARMOR
+		return 0.7 if @opponent.hasAbility?(:BATTLEARMOR) || @opponent.hasAbility?(:SHELLARMOR)
 		miniscore = 1.0
 		miniscore += 0.1 * @opponent.stages[PBStats::DEFENSE] if @opponent.stages[PBStats::DEFENSE]>0
 		miniscore += 0.1 * @opponent.stages[PBStats::SPDEF] if @opponent.stages[PBStats::SPDEF]>0
 		miniscore -= 0.1 * @attacker.stages[PBStats::ATTACK] if @attacker.stages[PBStats::ATTACK]<0
 		miniscore -= 0.1 * @attacker.stages[PBStats::SPATK] if @attacker.stages[PBStats::SPATK]<0
 		miniscore -= 0.1 * @attacker.effects[:FocusEnergy] if @attacker.effects[:FocusEnergy]>0
-		return miniscore if !(@opponent.ability == :ANGERPOINT && @opponent.stages[PBStats::ATTACK]!=6)
+		return miniscore if !(@opponent.hasAbility?(:ANGERPOINT) && @opponent.stages[PBStats::ATTACK]!=6)
 		if @attacker.pbPartner.index == @opponent.index && @move.function != 0x165
 			return 0 if @opponent.attack>@opponent.spatk || initialscore>80
 			miniscore = (100-initialscore)
@@ -4407,7 +4407,7 @@ class PokeBattle_AI
 	def nevermisscode(score)
 		miniscore=1.0
 		miniscore*=1.05 if score>=110
-		return miniscore if @attacker.ability == :NOGUARD || @opponent.ability == :NOGUARD || (@attacker.ability==:FAIRYAURA && @battle.FE == :FAIRYTALE)
+		return miniscore if @attacker.hasAbility?(:NOGUARD) || @opponent.hasAbility?(:NOGUARD) || (@attacker.ability==:FAIRYAURA && @battle.FE == :FAIRYTALE)
 		miniscore*= (1 - 0.05*@attacker.stages[PBStats::ACCURACY]) if @attacker.stages[PBStats::ACCURACY]<0
 		miniscore*= (1 + 0.05*@opponent.stages[PBStats::EVASION]) if @opponent.stages[PBStats::EVASION]>0
 		miniscore*=1.2 if (@mondata.oppitemworks && @opponent.item == :LAXINCENSE) || (@mondata.oppitemworks && @opponent.item == :BRIGHTPOWDER)
@@ -4417,7 +4417,7 @@ class PokeBattle_AI
 	end
 
 	def lockoncode
-		return 0 if @opponent.effects[:LockOn]>0 || @opponent.effects[:Substitute]>0 || @attacker.ability == :NOGUARD && @opponent.ability == :NOGUARD || (@attacker.ability==:FAIRYAURA && @battle.FE == :FAIRYTALE)
+		return 0 if @opponent.effects[:LockOn]>0 || @opponent.effects[:Substitute]>0 || @attacker.hasAbility?(:NOGUARD) && @opponent.hasAbility?(:NOGUARD) || (@attacker.ability==:FAIRYAURA && @battle.FE == :FAIRYTALE)
 		miniscore=1.0
 		miniscore*=3 if @attacker.pbHasMove?(:INFERNO) || @attacker.pbHasMove?(:ZAPCANNON) || @attacker.pbHasMove?(:DYNAMICPUNCH)
 		miniscore*=10 if @attacker.pbHasMove?(:GUILLOTINE) || @attacker.pbHasMove?(:SHEERCOLD) || @attacker.pbHasMove?(:GUILLOTINE) || @attacker.pbHasMove?(:FISSURE) || @attacker.pbHasMove?(:HORNDRILL)
@@ -4459,7 +4459,7 @@ class PokeBattle_AI
 	end
 
 	def protectcode
-		return 0 if @opponent.ability == :UNSEENFIST
+		return 0 if @opponent.hasAbility?(:UNSEENFIST)
 		miniscore = 1.0
 		miniscore*=0.6
 		miniscore*= 1.3 if @battle.trickroom > 0 && !pbAIfaster?()
@@ -4467,7 +4467,7 @@ class PokeBattle_AI
 		miniscore*= 1.3 if @attacker.pbOpposingSide.screenActive?
 		miniscore*= 1.2 if @attacker.pbOpposingSide.effects[:Tailwind] > 0
 		miniscore*= 0.3 if @opponent.moves.any? {|moveloop| moveloop!=nil && (PBStuff::SETUPMOVE).include?(moveloop.move)}
-		if @attacker.ability == :SPEEDBOOST && !pbAIfaster?() && @battle.trickroom==0
+		if @attacker.hasAbility?(:SPEEDBOOST) && !pbAIfaster?() && @battle.trickroom==0
 			miniscore*=8
 			#experimental -- cancels out drop if killing moves
 			if @initial_scores.length>0
@@ -4476,7 +4476,7 @@ class PokeBattle_AI
 			#end experimental
 		end
 		
-		miniscore*=4 if @attacker.ability == :SLOWSTART && @attacker.turncount<5
+		miniscore*=4 if @attacker.hasAbility?(:SLOWSTART) && @attacker.turncount<5
 		miniscore*=(1.2*hpGainPerTurn) if hpGainPerTurn > 1
 		miniscore*=0.1 if (hpGainPerTurn-1) * @attacker.totalhp - @attacker.hp < 0 && (hpGainPerTurn(@opponent)-1) * @opponent.totalhp - @opponent.hp > 0
 		if @opponent.status== :POISON || @opponent.status== :BURN
@@ -4579,7 +4579,7 @@ class PokeBattle_AI
 	end
 
 	def specialprotectcode
-		return 0 if @opponent.ability == :UNSEENFIST
+		return 0 if @opponent.hasAbility?(:UNSEENFIST)
 		miniscore = 1.0
 		miniscore/=(@attacker.effects[:ProtectRate]*2.0) if PBStuff::RATESHARERS.include?(@attacker.lastMoveUsed)
 		miniscore*=2 if @battle.doublebattle
@@ -4615,7 +4615,7 @@ class PokeBattle_AI
 	end
 
 	def tormentcode
-		return 0 if @opponent.effects[:Torment] || ((@opponent.ability == :AROMAVEIL || @opponent.pbPartner.ability == :AROMAVEIL) && !moldBreakerCheck(@attacker))
+		return 0 if @opponent.effects[:Torment] || ((@opponent.hasAbility?(:AROMAVEIL) || @opponent.pbPartner.hasAbility?(:AROMAVEIL)) && !moldBreakerCheck(@attacker))
 		if @opponent.lastMoveUsed.is_a?(Symbol)
 			oldmove = PokeBattle_Move.pbFromPBMove(@battle,PBMove.new(@opponent.lastMoveUsed.intern),@opponent)
 		else
@@ -4660,7 +4660,7 @@ class PokeBattle_AI
 	end
 
 	def disablecode
-		return 0 if @opponent.effects[:Disable]>0 || ((@opponent.ability == :AROMAVEIL || @opponent.pbPartner.ability == :AROMAVEIL) && !moldBreakerCheck(@attacker))
+		return 0 if @opponent.effects[:Disable]>0 || ((@opponent.hasAbility?(:AROMAVEIL) || @opponent.pbPartner.hasAbility?(:AROMAVEIL)) && !moldBreakerCheck(@attacker))
 		if @opponent.lastMoveUsed.is_a?(Symbol)
 			oldmove = PokeBattle_Move.pbFromPBMove(@battle,PBMove.new(@opponent.lastMoveUsed.intern),@opponent)
 		else
@@ -4684,7 +4684,7 @@ class PokeBattle_AI
 	end
 
 	def tauntcode
-		return @move.basedamage > 0 ? 1 : 0 if @opponent.effects[:Taunt]>0 || ((@opponent.ability == :OBLIVIOUS || @opponent.ability == :AROMAVEIL || @opponent.pbPartner.ability == :AROMAVEIL) && !moldBreakerCheck(@attacker))
+		return @move.basedamage > 0 ? 1 : 0 if @opponent.effects[:Taunt]>0 || ((@opponent.hasAbility?(:OBLIVIOUS) || @opponent.hasAbility?(:AROMAVEIL) || @opponent.pbPartner.hasAbility?(:AROMAVEIL)) && !moldBreakerCheck(@attacker))
 		if @opponent.lastMoveUsed.is_a?(Symbol)
 			oldmove = PokeBattle_Move.pbFromPBMove(@battle,PBMove.new(@opponent.lastMoveUsed.intern),@opponent)
 		else
@@ -4713,7 +4713,7 @@ class PokeBattle_AI
 	end
 
 	def encorecode
-		return 0 if @opponent.effects[:Encore]>0 || ((@opponent.ability == :AROMAVEIL || @opponent.pbPartner.ability == :AROMAVEIL) && !moldBreakerCheck(@attacker))
+		return 0 if @opponent.effects[:Encore]>0 || ((@opponent.hasAbility?(:AROMAVEIL) || @opponent.pbPartner.hasAbility?(:AROMAVEIL)) && !moldBreakerCheck(@attacker))
 		return 0.2 if  !@opponent.lastMoveUsed.is_a?(Symbol)
 		oldmove = PokeBattle_Move.pbFromPBMove(@battle,PBMove.new(@opponent.lastMoveUsed.intern),@opponent)
 		miniscore = 1.0
@@ -4723,7 +4723,7 @@ class PokeBattle_AI
 		if pbRoughDamage(oldmove,@opponent,@attacker) * 4 > @attacker.hp
 			miniscore*=0.3 
 		elsif @opponent.stages[PBStats::SPEED]>0
-			if (@opponent.hasType?(:DARK) || @attacker.ability != :PRANKSTER || @opponent.ability == :SPEEDBOOST)
+			if (@opponent.hasType?(:DARK) || @attacker.ability != :PRANKSTER || @opponent.hasAbility?(:SPEEDBOOST))
 				miniscore*=0.5
 			else
 				miniscore*=2
@@ -4736,7 +4736,7 @@ class PokeBattle_AI
 
 	def multihitcode
 		miniscore = 1.0
-		miniscore*=0.7 if @move.contactMove? && ((@mondata.oppitemworks && @opponent.item == :ROCKYHELMET) || @opponent.ability == :IRONBARBS || @opponent.ability == :ROUGHSKIN)
+		miniscore*=0.7 if @move.contactMove? && ((@mondata.oppitemworks && @opponent.item == :ROCKYHELMET) || @opponent.hasAbility?(:IRONBARBS) || @opponent.hasAbility?(:ROUGHSKIN))
 		miniscore*=1.3 if notOHKO?(@opponent, @attacker, true)
 		miniscore*=1.3 if @opponent.effects[:Substitute]>0
 		miniscore*=1.3 if @attacker.itemWorks? && (@attacker.item == :RAZORFANG || @attacker.item == :KINGSROCK)
@@ -4787,7 +4787,7 @@ class PokeBattle_AI
 		miniscore = 1.0
 		if @attacker.item == :POWERHERB
 			miniscore=1.2 if !hasgreatmoves() && @move.move != :GEOMANCY
-			miniscore=1.8 if @attacker.ability == :UNBURDEN
+			miniscore=1.8 if @attacker.hasAbility?(:UNBURDEN)
 			return miniscore
 		end
 		if checkAIdamage()>@attacker.hp
@@ -4806,7 +4806,7 @@ class PokeBattle_AI
 		miniscore*=0.1 if @initial_scores.any? {|score| score > 100}
 		miniscore*=0.5 if @battle.doublebattle
 		if @move.basedamage > 0
-			miniscore*=0.1 if checkAImoves(PBStuff::PROTECTMOVE) && !(@move.contactMove? && @attacker.ability == :UNSEENFIST)
+			miniscore*=0.1 if checkAImoves(PBStuff::PROTECTMOVE) && !(@move.contactMove? && @attacker.hasAbility?(:UNSEENFIST))
 			miniscore*=0.7 if @initial_scores[@score_index] < 100
 		elsif # probably geomancy
 			miniscore*=0.4
@@ -4818,7 +4818,7 @@ class PokeBattle_AI
 		miniscore=1.0
 		if @attacker.item == :POWERHERB
 			miniscore=1.2
-			miniscore=1.8 if @attacker.ability == :UNBURDEN
+			miniscore=1.8 if @attacker.hasAbility?(:UNBURDEN)
 			return miniscore
 		end
 		if @opponent.status== :POISON || @opponent.status== :BURN || @opponent.effects[:LeechSeed]>=0 || @opponent.effects[:MultiTurn]>0 || @opponent.effects[:Curse]
@@ -4863,7 +4863,7 @@ class PokeBattle_AI
 		miniscore*=1.3 if @opponent.effects[:Attract]>-1
 		miniscore*=1.3 if @opponent.effects[:Confusion]>0
 		miniscore*=1.2 if @mondata.roles.include?(:PHYSICALWALL) || @mondata.roles.include?(:SPECIALWALL)
-		miniscore*=1.1 if @attacker.moves.any? {|moveloop| moveloop!=nil && (PBStuff::PROTECTMOVE).include?(moveloop.move)} && !(@opponent.ability == :UNSEENFIST)
+		miniscore*=1.1 if @attacker.moves.any? {|moveloop| moveloop!=nil && (PBStuff::PROTECTMOVE).include?(moveloop.move)} && !(@opponent.hasAbility?(:UNSEENFIST))
 		miniscore*=1.3 if (@mondata.attitemworks && @attacker.item == :BINDINGBAND)
 		miniscore*=1.1 if (@mondata.attitemworks && @attacker.item == :GRIPCLAW)
 		return miniscore
@@ -4873,7 +4873,7 @@ class PokeBattle_AI
 		miniscore = 1.0
 		miniscore*=0.7 if @opponent.status== :SLEEP
 		miniscore*=1.8 if checkAImoves([:REST])
-		miniscore*=1.1 if @opponent.pbNonActivePokemonCount==0 || @attacker.ability == :SHADOWTAG || @opponent.effects[:MeanLook]>0
+		miniscore*=1.1 if @opponent.pbNonActivePokemonCount==0 || @attacker.hasAbility?(:SHADOWTAG) || @opponent.effects[:MeanLook]>0
 		miniscore*=0.7 if @move.pbTypeModifier(@move.pbType(@attacker),@attacker,@opponent)<4
 		miniscore*=0.75 if @attacker.hp/@attacker.totalhp<0.75
 		miniscore*=1+0.05*@attacker.stages[PBStats::SPATK] if @attacker.stages[PBStats::SPATK]<0
@@ -5009,14 +5009,14 @@ class PokeBattle_AI
 					miniscore*=6 if hasgreatmoves()
 				end
 			end
-			miniscore*=0.7 if checkAImoves([:WAKEUPSLAP,:NIGHTMARE,:DREAMEATER]) || @opponent.ability == :BADDREAMS
+			miniscore*=0.7 if checkAImoves([:WAKEUPSLAP,:NIGHTMARE,:DREAMEATER]) || @opponent.hasAbility?(:BADDREAMS)
 			miniscore*=1.3 if @attacker.pbHasMove?(:SLEEPTALK)
 			miniscore*=1.2 if @attacker.pbHasMove?(:SNORE)
-			miniscore*=1.1 if @attacker.ability == :SHEDSKIN || @attacker.ability == :EARLYBIRD
+			miniscore*=1.1 if @attacker.hasAbility?(:SHEDSKIN) || @attacker.hasAbility?(:EARLYBIRD)
 			miniscore*=0.8 if @battle.doublebattle
 		else
 			if @attacker.item == :LUMBERRY || @attacker.item == :CHESTOBERRY
-				miniscore*= @attacker.ability == :HARVEST ? 1.2 : 0.8
+				miniscore*= @attacker.hasAbility?(:HARVEST) ? 1.2 : 0.8
 			end
 		end
 		if !@attacker.status.nil?
@@ -5061,7 +5061,7 @@ class PokeBattle_AI
 			hpdrained = (@attacker.totalhp-(@attacker.hp-maxdam)) if hpdrained > (@attacker.totalhp-(@attacker.hp-maxdam))
 		end
 		miniscore = hpdrained/@opponent.totalhp.to_f
-		return (1-miniscore) if @opponent.ability == :LIQUIDOOZE
+		return (1-miniscore) if @opponent.hasAbility?(:LIQUIDOOZE)
 		miniscore*=0.5 #arbitrary multiplier to make it value the HP less
 		miniscore+=1
 		return miniscore
@@ -5101,7 +5101,7 @@ class PokeBattle_AI
 		miniscore = 1.0
 		miniscore*=0.7
 		miniscore*=0.3 if @opponent.effects[:Disguise] || (@opponent.effects[:IceFace] && @move.pbIsPhysical?()) || @opponent.effects[:Substitute]>0
-		miniscore*=0.3 if checkAImoves(PBStuff::PROTECTMOVE) && !(@move.contactMove? && @attacker.ability == :UNSEENFIST)
+		miniscore*=0.3 if checkAImoves(PBStuff::PROTECTMOVE) && !(@move.contactMove? && @attacker.hasAbility?(:UNSEENFIST))
 		return miniscore if @move.function == 0xe1 #Final gambit can go home
 		if @attacker.hp==@attacker.totalhp
 			miniscore*=0.2
@@ -5223,16 +5223,16 @@ class PokeBattle_AI
 	end
 
 	def phasecode
-		return 0 if @opponent.effects[:Ingrain] || @opponent.ability == :SUCTIONCUPS || @opponent.pbNonActivePokemonCount==0
+		return 0 if @opponent.effects[:Ingrain] || @opponent.hasAbility?(:SUCTIONCUPS) || @opponent.pbNonActivePokemonCount==0
 		return 0 if @opponent.effects[:PerishSong]>0 || @opponent.effects[:Yawn]>0
 		miniscore=1.0
 		miniscore*=0.8 if pbAIfaster?()
 		miniscore*= (1+ 0.1*statchangecounter(@opponent,1,7))
 		miniscore*=1.3 if @opponent.status== :SLEEP
-		miniscore*=1.3 if @opponent.ability == :SLOWSTART
-		miniscore*=1.5 if @opponent.item.nil? && @opponent.ability == :UNBURDEN
-		miniscore*=0.7 if @opponent.ability == :INTIMIDATE
-		miniscore*=0.5 if @opponent.ability == :REGENERATOR || @opponent.ability == :NATURALCURE
+		miniscore*=1.3 if @opponent.hasAbility?(:SLOWSTART)
+		miniscore*=1.5 if @opponent.item.nil? && @opponent.hasAbility?(:UNBURDEN)
+		miniscore*=0.7 if @opponent.hasAbility?(:INTIMIDATE)
+		miniscore*=0.5 if @opponent.hasAbility?(:REGENERATOR) || @opponent.hasAbility?(:NATURALCURE)
 		miniscore*=1.1 if @opponent.pbOwnSide.effects[:ToxicSpikes]>0
 		miniscore*=1.4 if @opponent.effects[:Substitute]>0
 		miniscore*=(@opponent.pbOwnSide.effects[:StealthRock]) ? 1.3 : 0.8
@@ -5248,10 +5248,10 @@ class PokeBattle_AI
 		miniscore*=0.6 if @attacker.pbOwnSide.effects[:StickyWeb]
 		miniscore*=0.9**@attacker.pbOwnSide.effects[:Spikes] if @attacker.pbOwnSide.effects[:Spikes]>0
 		miniscore*=0.9**@attacker.pbOwnSide.effects[:ToxicSpikes] if @attacker.pbOwnSide.effects[:ToxicSpikes]>0
-		miniscore*=1.1 if @attacker.ability == :INTIMIDATE
-		if @attacker.ability == :REGENERATOR && ((@attacker.hp.to_f)/@attacker.totalhp)<0.75
+		miniscore*=1.1 if @attacker.hasAbility?(:INTIMIDATE)
+		if @attacker.hasAbility?(:REGENERATOR) && ((@attacker.hp.to_f)/@attacker.totalhp)<0.75
 			miniscore*=1.2
-			miniscore*=1.2 if @attacker.ability == :REGENERATOR && ((@attacker.hp.to_f)/@attacker.totalhp)<0.5
+			miniscore*=1.2 if @attacker.hasAbility?(:REGENERATOR) && ((@attacker.hp.to_f)/@attacker.totalhp)<0.5
 		end
 		miniscore*=1.5 if @mondata.partyroles.any? {|role| role.include?(:SWEEPER)} && @move.move == :PARTINGSHOT
 		miniscore*=1.2 if @mondata.partyroles.any? {|role| role.include?(:SWEEPER)} && (@move.move == :UTURN || @move.move == :VOLTSWITCH) && !pbAIfaster?()
@@ -5315,10 +5315,10 @@ class PokeBattle_AI
 			return (@move.basedamage > 0) ? miniscore : 0
 		end
 		miniscore*=0.1 if checkAImoves(PBStuff::PIVOTMOVE)
-		miniscore*=0.1 if @opponent.ability == :RUNAWAY
+		miniscore*=0.1 if @opponent.hasAbility?(:RUNAWAY)
 		miniscore*=1.5 if @attacker.pbHasMove?(:PERISHSONG)
 		miniscore*=4   if @opponent.effects[:PerishSong]>0
-		miniscore*=0   if @attacker.ability == :ARENATRAP || @attacker.ability == :SHADOWTAG
+		miniscore*=0   if @attacker.hasAbility?(:ARENATRAP) || @attacker.hasAbility?(:SHADOWTAG)
 		miniscore*=1.3 if @opponent.effects[:Attract]>=0
 		miniscore*=1.3 if @opponent.effects[:LeechSeed]>=0
 		miniscore*=1.5 if @opponent.effects[:Curse]
@@ -5336,7 +5336,7 @@ class PokeBattle_AI
 			return 1.3
 		elsif @opponent.item == :LIFEORB || @opponent.item == :CHOICESCARF || @opponent.item == :CHOICEBAND || @opponent.item == :CHOICESPECS || @opponent.item == :ASSAULTVEST
 			return 1.2
-		elsif pbIsBerry?(@opponent.item) && @opponent.ability == :HARVEST
+		elsif pbIsBerry?(@opponent.item) && @opponent.hasAbility?(:HARVEST)
 			return 1.3
 		end
 		return 1
@@ -5367,7 +5367,7 @@ class PokeBattle_AI
 	end
 
 	def bestowcode
-		return 1 if (@opponent.ability == :STICKYHOLD || !moldBreakerCheck(@attacker))
+		return 1 if (@opponent.hasAbility?(:STICKYHOLD) || !moldBreakerCheck(@attacker))
 		return 1 if @attacker.item.nil? || @battle.pbIsUnlosableItem(@attacker,@attacker.item) || (@opponent.item && @move.move != :TRICK)
 		return 1 if opponent.effects[:Substitute] > 0
 		miniscore = 1.0
@@ -5404,7 +5404,7 @@ class PokeBattle_AI
 	end
 
 	def recoilcode(recoilamount)
-		return @move.basedamage > 0 ? 1 : 0 if @attacker.ability == :ROCKHEAD || @attacker.ability == :MAGICGUARD
+		return @move.basedamage > 0 ? 1 : 0 if @attacker.hasAbility?(:ROCKHEAD) || @attacker.hasAbility?(:MAGICGUARD)
 		return @move.basedamage > 0 ? 1 : 0 if @move.move == :WILDCHARGE && @battle.FE == :ELECTERRAIN
 		miniscore=0.9
 		miniscore*=0.7 if notOHKO?(@attacker, @opponent, true)
@@ -5422,49 +5422,49 @@ class PokeBattle_AI
 		miniscore*=1.3 if notOHKO?(@attacker, @opponent, true)
 		miniscore*=1.2 if @mondata.roles.include?(:LEAD)
 		miniscore*=1.4 if @attacker.pbHasMove?(:WEATHERBALL) 
-		miniscore*=1.5 if @attacker.ability == :FORECAST
+		miniscore*=1.5 if @attacker.hasAbility?(:FORECAST)
 		return miniscore
 	end
 
 	def suncode
 		return 0 if @battle.pbWeather== :SUNNYDAY
 		miniscore=1.0
-		miniscore*=0.2 if @attacker.ability == :FORECAST && (@opponent.hasType?(:GROUND) || @opponent.hasType?(:ROCK))
+		miniscore*=0.2 if @attacker.hasAbility?(:FORECAST) && (@opponent.hasType?(:GROUND) || @opponent.hasType?(:ROCK))
 		miniscore*=1.3 if (@mondata.attitemworks && @attacker.item == :HEATROCK)
 		miniscore*=1.5 if @battle.pbWeather!=0 && @battle.pbWeather!=:SUNNYDAY
 		miniscore*=1.5 if @attacker.pbHasMove?(:MOONLIGHT) || @attacker.pbHasMove?(:SYNTHESIS) || @attacker.pbHasMove?(:MORNINGSUN) || @attacker.pbHasMove?(:GROWTH) || @attacker.pbHasMove?(:SOLARBEAM) || @attacker.pbHasMove?(:SOLARBLADE)
 		miniscore*=0.7 if checkAImoves([:SYNTHESIS, :MOONLIGHT, :MORNINGSUN])
 		miniscore*=1.5 if @attacker.hasType?(:FIRE)
-		if @attacker.ability == :CHLOROPHYLL || @attacker.ability == :FLOWERGIFT
+		if @attacker.hasAbility?(:CHLOROPHYLL) || @attacker.hasAbility?(:FLOWERGIFT)
 			miniscore*=2
 			miniscore*=2 if notOHKO?(@attacker, @opponent, true)
 			miniscore*=3 if seedProtection?(@attacker)
 		end
-		miniscore*=1.3 if @attacker.ability == :SOLARPOWER || @attacker.ability == :LEAFGUARD
+		miniscore*=1.3 if @attacker.hasAbility?(:SOLARPOWER) || @attacker.hasAbility?(:LEAFGUARD)
 		miniscore*=0.5 if pbPartyHasType?(:WATER)
 		miniscore*=0.7 if @attacker.pbHasMove?(:THUNDER) || @attacker.pbHasMove?(:HURRICANE)
-		miniscore*=0.5 if @attacker.ability == :DRYSKIN
-		miniscore*=1.5 if @attacker.ability == :HARVEST
+		miniscore*=0.5 if @attacker.hasAbility?(:DRYSKIN)
+		miniscore*=1.5 if @attacker.hasAbility?(:HARVEST)
 		return miniscore
 	end
 
 	def raincode
 		return 0 if @battle.pbWeather== :RAINDANCE
 		miniscore=1.0
-		miniscore*=0.2 if @attacker.ability == :FORECAST && (@opponent.hasType?(:GRASS) || @opponent.hasType?(:ELECTRIC))
+		miniscore*=0.2 if @attacker.hasAbility?(:FORECAST) && (@opponent.hasType?(:GRASS) || @opponent.hasType?(:ELECTRIC))
 		miniscore*=1.3 if (@mondata.attitemworks && @attacker.item == :DAMPROCK)
 		miniscore*=1.3 if @battle.pbWeather!=0 && @battle.pbWeather!=:RAINDANCE
 		miniscore*=1.5 if @attacker.pbHasMove?(:THUNDER) || @attacker.pbHasMove?(:HURRICANE)
 		miniscore*=1.5 if @attacker.hasType?(:WATER)
-		if @attacker.ability == :SWIFTSWIM
+		if @attacker.hasAbility?(:SWIFTSWIM)
 			miniscore*=2
 			miniscore*=2 if notOHKO?(@attacker, @opponent, true)
 			miniscore*=3 if seedProtection?(@attacker)
 		end
-		miniscore*=1.5 if @attacker.ability == :DRYSKIN || @battle.pbWeather== :RAINDANCE
+		miniscore*=1.5 if @attacker.hasAbility?(:DRYSKIN) || @battle.pbWeather== :RAINDANCE
 		miniscore*=0.5 if pbPartyHasType?(:FIRE)
 		miniscore*=0.5 if @attacker.pbHasMove?(:MOONLIGHT) || @attacker.pbHasMove?(:SYNTHESIS) || @attacker.pbHasMove?(:MORNINGSUN) || @attacker.pbHasMove?(:GROWTH) || @attacker.pbHasMove?(:SOLARBEAM) || @attacker.pbHasMove?(:SOLARBLADE)
-		miniscore*=1.5 if @attacker.ability == :HYDRATION
+		miniscore*=1.5 if @attacker.hasAbility?(:HYDRATION)
 		return miniscore
 	end
 
@@ -5475,31 +5475,31 @@ class PokeBattle_AI
 		miniscore*=2 if @battle.pbWeather!=0 && @battle.pbWeather!=:SANDSTORM
 		miniscore*= (@attacker.hasType?(:ROCK) || @attacker.hasType?(:GROUND) || @attacker.hasType?(:STEEL)) ? 1.3 : 0.7
 		miniscore*=1.5 if @attacker.hasType?(:ROCK)
-		if @attacker.ability == :SANDRUSH
+		if @attacker.hasAbility?(:SANDRUSH)
 			miniscore*=2
 			miniscore*=2 if notOHKO?(@attacker, @opponent, true)
 			miniscore*=3 if seedProtection?(@attacker)
 		end
-		miniscore*=1.3 if @attacker.ability == :SANDVEIL
+		miniscore*=1.3 if @attacker.hasAbility?(:SANDVEIL)
 		miniscore*=0.5 if @attacker.pbHasMove?(:MOONLIGHT) || @attacker.pbHasMove?(:SYNTHESIS) || @attacker.pbHasMove?(:MORNINGSUN) || @attacker.pbHasMove?(:GROWTH) || @attacker.pbHasMove?(:SOLARBEAM) || @attacker.pbHasMove?(:SOLARBLADE)
 		miniscore*=1.5 if @attacker.pbHasMove?(:SHOREUP)
-		miniscore*=1.5 if @attacker.ability == :SANDFORCE
+		miniscore*=1.5 if @attacker.hasAbility?(:SANDFORCE)
 		return miniscore
 	end
 
 	def hailcode
 		return 0 if @battle.pbWeather== :HAIL
 		miniscore=1.0
-		miniscore*=0.2 if @attacker.ability == :FORECAST && [:ROCK,:FIRE,:STEEL,:FIGHTING].any? {|type| @opponent.hasType?(type) }
+		miniscore*=0.2 if @attacker.hasAbility?(:FORECAST) && [:ROCK,:FIRE,:STEEL,:FIGHTING].any? {|type| @opponent.hasType?(type) }
 		miniscore*=1.3 if (@mondata.attitemworks && @attacker.item == :ICYROCK)
 		miniscore*=1.3 if @battle.pbWeather!=0 && @battle.pbWeather!=:HAIL
 		miniscore*= (@attacker.hasType?(:ICE)) ? 5 : 0.7
-		if @attacker.ability == :SLUSHRUSH
+		if @attacker.hasAbility?(:SLUSHRUSH)
 			miniscore*=2
 			miniscore*=2 if notOHKO?(@attacker, @opponent, true)
 			miniscore*=3 if seedProtection?(@attacker)
 		end
-		miniscore*=1.3 if @attacker.ability == :SNOWCLOAK || @attacker.ability == :ICEBODY || (@attacker.ability == :ICEFACE && @attacker.form == 1)
+		miniscore*=1.3 if @attacker.hasAbility?(:SNOWCLOAK) || @attacker.hasAbility?(:ICEBODY) || (@attacker.hasAbility?(:ICEFACE) && @attacker.form == 1)
 		miniscore*=0.5 if @attacker.pbHasMove?(:MOONLIGHT) || @attacker.pbHasMove?(:SYNTHESIS) || @attacker.pbHasMove?(:MORNINGSUN) || @attacker.pbHasMove?(:GROWTH) || @attacker.pbHasMove?(:SOLARBEAM) || @attacker.pbHasMove?(:SOLARBLADE)
 		miniscore*=2 if @attacker.pbHasMove?(:AURORAVEIL)
 		miniscore*=1.3 if @attacker.pbHasMove?(:BLIZZARD)
@@ -5517,14 +5517,14 @@ class PokeBattle_AI
 		miniscore*=1.2 if checkAImoves([:SPORE, :SLEEPPOWDER])
 		miniscore*=1.5 if @attacker.pbHasMove?(:FOCUSPUNCH)
 		miniscore*=1.5 if @opponent.status== :SLEEP
-		miniscore*=0.3 if @opponent.ability == :INFILTRATOR
+		miniscore*=0.3 if @opponent.hasAbility?(:INFILTRATOR)
 		miniscore*=0.3 if checkAImoves([:UPROAR, :HYPERVOICE, :ECHOEDVOICE, :SNARL, :BUGBUZZ, :BOOMBURST, :SPARKLINGARIA])
 		miniscore*=2   if checkAIdamage()*4 < @attacker.totalhp && (getAIMemory().length > 0)
 		miniscore*=1.3 if @opponent.effects[:Confusion]>0
 		miniscore*=1.3 if @opponent.status== :PARALYSIS
 		miniscore*=1.3 if @opponent.effects[:Attract]>=0
 		miniscore*=1.2 if @attacker.pbHasMove?(:BATONPASS)
-		miniscore*=1.1 if @attacker.ability == :SPEEDBOOST
+		miniscore*=1.1 if @attacker.hasAbility?(:SPEEDBOOST)
 		miniscore*=0.5 if @battle.doublebattle
 		return miniscore
 	end
@@ -5537,7 +5537,7 @@ class PokeBattle_AI
 		miniscore*=1.2 if @attacker.effects[:Substitute]>0
 		miniscore*=1.2 if @attacker.moves.any? {|moveloop| moveloop!=nil && [:PROTECT,:DETECT,:BANEFULBUNKER,:SPIKYSHIELD].include?(moveloop.move) }
 		miniscore*=1.1 if @mondata.roles.include?(:PHYSICALWALL) || @mondata.roles.include?(:SPECIALWALL)
-		miniscore*=1.2 if @attacker.ability == :MOODY || @attacker.pbHasMove?(:QUIVERDANCE) || @attacker.pbHasMove?(:NASTYPLOT) || @attacker.pbHasMove?(:TAILGLOW)
+		miniscore*=1.2 if @attacker.hasAbility?(:MOODY) || @attacker.pbHasMove?(:QUIVERDANCE) || @attacker.pbHasMove?(:NASTYPLOT) || @attacker.pbHasMove?(:TAILGLOW)
 		return miniscore
 	end
 
@@ -5547,7 +5547,7 @@ class PokeBattle_AI
 		soundcheck=getAIMemory().any? {|moveloop| moveloop!=nil && moveloop.isSoundBased? && moveloop.basedamage>0}
 		multicheck=getAIMemory().any? {|moveloop| moveloop!=nil && moveloop.pbNumHits(@opponent)>1}
 		if @attacker.effects[:Substitute]>0
-			if multicheck || soundcheck || @opponent.ability == :INFILTRATOR
+			if multicheck || soundcheck || @opponent.hasAbility?(:INFILTRATOR)
 				miniscore*=0.9
 			else
 				miniscore*=1.3
@@ -5582,10 +5582,10 @@ class PokeBattle_AI
 
 	def followcode
 		return 0 if !@battle.doublebattle || @attacker.pbPartner.hp==0
-		return 0 if @opponent.ability == :PROPELLERTAIL || @opponent.ability == :STALWART
+		return 0 if @opponent.hasAbility?(:PROPELLERTAIL) || @opponent.hasAbility?(:STALWART)
 		miniscore=1.0
 		miniscore*=1.2 if @mondata.roles.include?(:PHYSICALWALL) || @mondata.roles.include?(:SPECIALWALL)
-		miniscore*=1.3 if @attacker.pbPartner.ability == :MOODY
+		miniscore*=1.3 if @attacker.pbPartner.hasAbility?(:MOODY)
 		miniscore*= (@attacker.pbPartner.turncount<1) ? 1.2 : 0.8
 		miniscore*= 1.3 if @attacker.pbPartner.moves.any? {|moveloop| moveloop!=nil && (PBStuff::SETUPMOVE).include?(moveloop.move)}
 		bestmove1,maxdam1 = checkAIMovePlusDamage(@attacker.pbOpposing1,@attacker.pbPartner)
@@ -5612,7 +5612,7 @@ class PokeBattle_AI
 		miniscore*=2 if @attacker.moves.any? {|moveloop| moveloop!=nil && moveloop.accuracy<=70}
 		miniscore*=3 if @attacker.pbHasMove?(:ZAPCANNON) || @attacker.pbHasMove?(:INFERNO)
 		miniscore*=2 if [:SKYDROP,:BOUNCE,:FLY,:JUMPKICK,:FLYINGPRESS,:HIJUMPKICK].include?(checkAIbestMove().move)
-		miniscore*=2 if @attacker.hasType?(:GROUND) && (@opponent.hasType?(:FLYING) || @opponent.ability == :LEVITATE || (@mondata.oppitemworks && @opponent.item == :AIRBALLOON))
+		miniscore*=2 if @attacker.hasType?(:GROUND) && (@opponent.hasType?(:FLYING) || @opponent.hasAbility?(:LEVITATE) || (@mondata.oppitemworks && @opponent.item == :AIRBALLOON))
 		return miniscore
 	end
 
@@ -5695,7 +5695,7 @@ class PokeBattle_AI
 	end
 
 	def powdercode
-		return 0 if @opponent.hasType?(:GRASS) || @opponent.ability == :OVERCOAT || (@mondata.oppitemworks && @opponent.item == :SAFETYGOGGLES)
+		return 0 if @opponent.hasType?(:GRASS) || @opponent.hasAbility?(:OVERCOAT) || (@mondata.oppitemworks && @opponent.item == :SAFETYGOGGLES)
 		return 0 if getAIMemory().length >= 4 && !getAIMemory().any? {|moveloop| moveloop!=nil && moveloop.pbType(@opponent)==:FIRE}
 		miniscore=1.0
 		miniscore*=1.2 if !pbAIfaster?()
@@ -5708,7 +5708,7 @@ class PokeBattle_AI
 		miniscore*=2 if effcheck>4
 		miniscore*=2 if effcheck>8
 		miniscore*=0.6 if @attacker.lastMoveUsed==:POWDER
-		miniscore*=0.5 if @opponent.ability == :MAGICGUARD
+		miniscore*=0.5 if @opponent.hasAbility?(:MAGICGUARD)
 		return miniscore
 	end
 
@@ -5759,7 +5759,7 @@ class PokeBattle_AI
 			when :WATERABSORB, :STORMDRAIN, :DRYSKIN
 				miniscore*=3 if @move.pbType(@attacker)==:WATER && damcount==1
 				miniscore*=2 if @move.pbType(@attacker)==:WATER && PBTypes.twoTypeEff((:WATER),@opponent.type1,@opponent.type2)>4
-				miniscore*=0.5 if @opponent.ability == :DRYSKIN && @attacker.moves.any? {|moveloop| moveloop!=nil && moveloop.pbType(@attacker)==:FIRE}
+				miniscore*=0.5 if @opponent.hasAbility?(:DRYSKIN) && @attacker.moves.any? {|moveloop| moveloop!=nil && moveloop.pbType(@attacker)==:FIRE}
 			when :FLASHFIRE
 				miniscore*=3 if @move.pbType(@attacker)==:FIRE && damcount==1
 				miniscore*=2 if @move.pbType(@attacker)==:FIRE && PBTypes.twoTypeEff((:FIRE),@opponent.type1,@opponent.type2)>4
@@ -5809,7 +5809,7 @@ class PokeBattle_AI
 			miniscore*=1.3 if checkAIdamage() < @attacker.totalhp*0.2
 			miniscore*=1.2 if @attacker.moves.any? {|moveloop| moveloop!=nil && moveloop.isHealingMove?}
 			miniscore*=1.3 if @initial_scores.length>0 && hasbadmoves(25)
-			miniscore*=0.5 if checkAImoves(PBStuff::PROTECTMOVE) && !(@move.contactMove? && @attacker.ability == :UNSEENFIST)
+			miniscore*=0.5 if checkAImoves(PBStuff::PROTECTMOVE) && !(@move.contactMove? && @attacker.hasAbility?(:UNSEENFIST))
 			miniscore*=(1-0.1*@opponent.stages[PBStats::EVASION])
 			miniscore*=(1+0.1*@opponent.stages[PBStats::ACCURACY])
 			miniscore*=0.7 if @mondata.oppitemworks && (@opponent.item == :LAXINCENSE || @opponent.item == :BRIGHTPOWDER)
@@ -5865,7 +5865,7 @@ class PokeBattle_AI
 	def psychicterraincode
 		return 0 if @battle.FE == :UNDERWATER || @battle.FE == :NEWWORLD || @battle.FE == :PSYTERRAIN || @battle.state.effects[:PSYTERRAIN] > 0
 		miniscore = getFieldDisruptScore(@attacker,@opponent)
-		miniscore*=1.5 if @attacker.ability == :TELEPATHY
+		miniscore*=1.5 if @attacker.hasAbility?(:TELEPATHY)
 		miniscore*=1.5 if @attacker.hasType?(:PSYCHIC)
 		miniscore*=2 if pbPartyHasType?(:PSYCHIC)
 		miniscore*=0.5 if @opponent.hasType?(:PSYCHIC)
@@ -5941,7 +5941,7 @@ class PokeBattle_AI
 				miniscore*=2 if @opponent.effects[:TwoTurnAttack]!=0
 			end
 		end
-		if (@opponent.hasType?(:FLYING) || @opponent.ability == :LEVITATE)
+		if (@opponent.hasType?(:FLYING) || @opponent.hasAbility?(:LEVITATE))
 			miniscore*= (@attacker.moves.any?{|moveloop| moveloop!=nil && moveloop.pbType(@attacker)==:GROUND && moveloop.basedamage>0}) ? 2 : 1.2
 		end
 		return miniscore
@@ -5951,10 +5951,10 @@ class PokeBattle_AI
 		return 0 if @opponent.effects[:Nightmare] || @opponent.status!=:SLEEP || @opponent.effects[:Substitute]>0
 		miniscore=1.0
 		miniscore*=4 if @opponent.statusCount>2
-		miniscore*=6 if @opponent.ability == :COMATOSE
+		miniscore*=6 if @opponent.hasAbility?(:COMATOSE)
 		miniscore*=6 if @initial_scores.length>0 && hasbadmoves(25)
-		miniscore*=0.5 if @opponent.ability == :SHEDSKIN || @opponent.ability == :EARLYBIRD
-		if @attacker.ability == :SHADOWTAG || @attacker.ability == :ARENATRAP || @opponent.effects[:MeanLook]>=0 || @opponent.pbNonActivePokemonCount==0
+		miniscore*=0.5 if @opponent.hasAbility?(:SHEDSKIN) || @opponent.hasAbility?(:EARLYBIRD)
+		if @attacker.hasAbility?(:SHADOWTAG) || @attacker.hasAbility?(:ARENATRAP) || @opponent.effects[:MeanLook]>=0 || @opponent.pbNonActivePokemonCount==0
 			miniscore*=1.3
 		else
 			miniscore*=0.8
@@ -5983,7 +5983,7 @@ class PokeBattle_AI
 		miniscore*=1.3 if (getAIMemory().length > 0) && checkAIdamage()*5 < @attacker.hp if @move.function == 0x10d
 		miniscore*=1.2 if @attacker.moves.any? {|moveloop| moveloop!=nil && moveloop.isHealingMove?}
 		miniscore*=(1+0.05*statchangecounter(@opponent,1,7))
-		if @attacker.ability == :SHADOWTAG || @attacker.ability == :ARENATRAP || @opponent.effects[:MeanLook]>=0 || @opponent.pbNonActivePokemonCount==0
+		if @attacker.hasAbility?(:SHADOWTAG) || @attacker.hasAbility?(:ARENATRAP) || @opponent.effects[:MeanLook]>=0 || @opponent.pbNonActivePokemonCount==0
 			miniscore*=1.3
 		else
 			miniscore*=0.8
@@ -6004,7 +6004,7 @@ class PokeBattle_AI
 	def jumpcode(score)
 		miniscore=1.0
 		miniscore*= 0.8 if score < 100
-		miniscore*=0.5 if checkAImoves(PBStuff::PROTECTMOVE) && !(@move.contactMove? && @attacker.ability == :UNSEENFIST)
+		miniscore*=0.5 if checkAImoves(PBStuff::PROTECTMOVE) && !(@move.contactMove? && @attacker.hasAbility?(:UNSEENFIST))
 		miniscore*=(1-0.1*@opponent.stages[PBStats::EVASION])
 		miniscore*=(1+0.1*@attacker.stages[PBStats::ACCURACY])
 		miniscore*=0.7 if accuracyWeatherAbilityActive?(@opponent)
@@ -6042,7 +6042,7 @@ class PokeBattle_AI
 		return @move.basedamage > 0 ? 1 : 0 if @battle.FE == :ELECTERRAIN || @battle.FE == :UNDERWATER || @battle.FE == :NEWWORLD || @battle.state.effects[:ELECTERRAIN] > 0
 		miniscore=1.0
 		miniscore*= getFieldDisruptScore(@attacker,@opponent)
-		miniscore*=1.5 if @attacker.ability == :SURGESURFER
+		miniscore*=1.5 if @attacker.hasAbility?(:SURGESURFER)
 		miniscore*=1.3 if @attacker.hasType?(:ELECTERRAIN)
 		miniscore*=1.5 if pbPartyHasType?(:ELECTRIC)
 		miniscore*=0.5 if @opponent.hasType?(:ELECTRIC)
@@ -6069,7 +6069,7 @@ class PokeBattle_AI
 		miniscore*=2 if pbPartyHasType?(:GRASS)
 		miniscore*=0.5 if checkAIhealing()
 		miniscore*=0.5 if checkAImoves([:SLUDGEWAVE])
-		miniscore*=1.5 if @attacker.ability == :GRASSPELT
+		miniscore*=1.5 if @attacker.hasAbility?(:GRASSPELT)
 		miniscore*=2 if @mondata.attitemworks && @attacker.item == :AMPLIFIELDROCK
 		return miniscore
 	end
@@ -6103,10 +6103,10 @@ class PokeBattle_AI
 			end
 		end
 		miniscore*=0.2 if movecheck
-		miniscore*=2  if @opponent.ability == :SIMPLE
-		miniscore*=0.5 if newopp.ability == :UNAWARE
+		miniscore*=2  if @opponent.hasAbility?(:SIMPLE)
+		miniscore*=0.5 if newopp.hasAbility?(:UNAWARE)
 		miniscore*=1.2 if hpGainPerTurn>1
-		miniscore*=0 if @opponent.ability == :CONTRARY
+		miniscore*=0 if @opponent.hasAbility?(:CONTRARY)
 		miniscore*=2 if @battle.FE == :MISTY && stat==PBStats::SPDEF
 	end
 
@@ -6138,8 +6138,8 @@ class PokeBattle_AI
 			miniscore*=0.3 if @opponent.effects[:LeechSeed]>=0 || @attacker.effects[:Attract]>=0
 			miniscore*=0.2 if @opponent.effects[:Toxic]>0
 			miniscore*=0.2 if checkAImoves(PBStuff::PHASEMOVE)
-			miniscore*=2 if @opponent.ability == :SIMPLE
-			miniscore*=0.5 if opp1.ability == :UNAWARE
+			miniscore*=2 if @opponent.hasAbility?(:SIMPLE)
+			miniscore*=0.5 if opp1.hasAbility?(:UNAWARE)
 			miniscore*=0.3 if @battle.doublebattle
 			miniscore/=100.0
 			score*=miniscore
@@ -6150,7 +6150,7 @@ class PokeBattle_AI
 			miniscore*=1.3 if @attacker.pbHasMove?(:LEECHSEED)
 			miniscore*=1.2 if @attacker.pbHasMove?(:PAINSPLIT)
 			score*=miniscore if @attacker.stages[PBStats::SPDEF]!=6 && @attacker.stages[PBStats::DEFENSE]!=6
-			score=0 if @attacker.ability == :CONTRARY
+			score=0 if @attacker.hasAbility?(:CONTRARY)
 		end
 		return score
 	end
@@ -6178,8 +6178,8 @@ class PokeBattle_AI
 			miniscore*=0.2 if @opponent.effects[:Confusion]>0
 			miniscore*=0.6 if @opponent.effects[:LeechSeed]>=0 || @attacker.effects[:Attract]>=0
 			miniscore*=0.5 if checkAImoves(PBStuff::PHASEMOVE)
-			miniscore*=2   if @opponent.ability == :SIMPLE
-			miniscore*=0.5 if opp1.ability == :UNAWARE
+			miniscore*=2   if @opponent.hasAbility?(:SIMPLE)
+			miniscore*=0.5 if opp1.hasAbility?(:UNAWARE)
 			miniscore*=0.3 if @battle.doublebattle
 			miniscore*=1+0.05*@opponent.stages[PBStats::SPEED] if @opponent.stages[PBStats::SPEED]<0
 			ministat=@opponent.stages[PBStats::ATTACK] + @opponent.stages[PBStats::SPEED] + @opponent.stages[PBStats::SPATK]
@@ -6231,7 +6231,7 @@ class PokeBattle_AI
 	end
 
 	def flingcode
-		return 0 if @attacker.item.nil? || @battle.pbIsUnlosableItem(@attacker,@attacker.item) || @attacker.ability == :KLUTZ || (pbIsBerry?(@attacker.item) && (@opponent.ability == :UNNERVE || @opponent.ability == :ASONE)) || @attacker.effects[:Embargo]>0 || @battle.state.effects[:MagicRoom]>0
+		return 0 if @attacker.item.nil? || @battle.pbIsUnlosableItem(@attacker,@attacker.item) || @attacker.hasAbility?(:KLUTZ) || (pbIsBerry?(@attacker.item) && (@opponent.hasAbility?(:UNNERVE) || @opponent.hasAbility?(:ASONE))) || @attacker.effects[:Embargo]>0 || @battle.state.effects[:MagicRoom]>0
 		miniscore=1.0
 		case @attacker.item
 			when :POISONBARB then miniscore*=1.2 if @opponent.pbCanPoison?(false) && @opponent.ability != :POISONHEAL
@@ -6265,8 +6265,8 @@ class PokeBattle_AI
 
 	def recyclecode
 		return 0 if @attacker.pokemon.itemRecycle.nil?
-		return 0 if (@opponent.ability == :MAGICIAN && @opponent.item.nil?) || checkAImoves([:KNOCKOFF,:THIEF,:COVET])
-		return 0 if @attacker.ability == :UNBURDEN || @attacker.ability == :HARVEST || @attacker.pbHasMove?(:ACROBATICS)
+		return 0 if (@opponent.hasAbility?(:MAGICIAN) && @opponent.item.nil?) || checkAImoves([:KNOCKOFF,:THIEF,:COVET])
+		return 0 if @attacker.hasAbility?(:UNBURDEN) || @attacker.hasAbility?(:HARVEST) || @attacker.pbHasMove?(:ACROBATICS)
 		miniscore=2.0
 		miniscore*=2 if @attacker.pbHasMove?(:NATURALGIFT)
 		case @attacker.pokemon.itemRecycle
@@ -6278,7 +6278,7 @@ class PokeBattle_AI
 		end
 
 		if !@attacker.item.nil? && pbIsBerry?(@attacker.pokemon.itemRecycle)
-			miniscore*=0 if @opponent.ability == :UNNERVE || @opponent.ability == :ASONE
+			miniscore*=0 if @opponent.hasAbility?(:UNNERVE) || @opponent.hasAbility?(:ASONE)
 			miniscore*=0 if checkAImoves([:INCINERATE,:PLUCK,:BUGBITE])
 		end
 		return miniscore
@@ -6301,7 +6301,7 @@ class PokeBattle_AI
 	end
 
 	def roastcode
-		return 1 if !@opponent.item.nil? && !pbIsBerry?(@opponent.item) && !pbIsTypeGem?(@opponent.item) || @opponent.ability == :STICKYHOLD || @opponent.effects[:Substitute] > 0
+		return 1 if !@opponent.item.nil? && !pbIsBerry?(@opponent.item) && !pbIsTypeGem?(@opponent.item) || @opponent.hasAbility?(:STICKYHOLD) || @opponent.effects[:Substitute] > 0
 		miniscore=1.0
 		miniscore*=1.2 if !@opponent.item.nil? && pbIsBerry?(@opponent.item) && @opponent.item!=:OCCABERRY
 		miniscore*=1.3 if @opponent.item ==:LUMBERRY || @opponent.item ==:SITRUSBERRY || @opponent.item ==:PETAYABERRY || @opponent.item ==:LIECHIBERRY || @opponent.item ==:SALACBERRY || @opponent.item ==:CUSTAPBERRY
@@ -6357,13 +6357,13 @@ class PokeBattle_AI
 		return 0 if @attacker.pbNonActivePokemonCount==0
 		miniscore=1.0
 		miniscore*=1.5 if @attacker.pbHasMove?(:UTURN) || @attacker.pbHasMove?(:VOLTSWITCH) || @attacker.pbHasMove?(:PARTINGSHOT)
-		miniscore*=3 if @attacker.ability == :SHADOWTAG || @opponent.effects[:MeanLook]>0
+		miniscore*=3 if @attacker.hasAbility?(:SHADOWTAG) || @opponent.effects[:MeanLook]>0
 		miniscore*=1.2 if @mondata.partyroles.any? {|role| role.include?(:SWEEPER)}
 		miniscore*=1.2 if @attacker.moves.any? {|moveloop| moveloop!=nil && moveloop.isHealingMove?}
 		miniscore*=1-0.05*statchangecounter(@attacker,1,7)
 		miniscore*=1+0.05*statchangecounter(@opponent,1,7)
 		miniscore*=0.5 if checkAImoves(PBStuff::PIVOTMOVE)
-		miniscore*=0.1 if (@opponent.ability == :SHADOWTAG || @attacker.effects[:MeanLook]>0) && !(@attacker.pbHasMove?(:UTURN) || @attacker.pbHasMove?(:VOLTSWITCH) || @attacker.pbHasMove?(:PARTINGSHOT))
+		miniscore*=0.1 if (@opponent.hasAbility?(:SHADOWTAG) || @attacker.effects[:MeanLook]>0) && !(@attacker.pbHasMove?(:UTURN) || @attacker.pbHasMove?(:VOLTSWITCH) || @attacker.pbHasMove?(:PARTINGSHOT))
 		miniscore*=1.5 if @mondata.partyroles.any? {|role| role.include?(:PIVOT)}
 		return miniscore
     end
@@ -6372,8 +6372,8 @@ class PokeBattle_AI
 		return true if leechTarget.effects[:LeechSeed] > -1
 		return true if leechTarget.hasType?(:GRASS)
 		return true if leechTarget.effects[:Substitute] > 0 
-		return true if leechTarget.ability == :LIQUIDOOZE
-		return true if leechTarget.ability == :MAGICBOUNCE
+		return true if leechTarget.hasAbility?(:LIQUIDOOZE)
+		return true if leechTarget.hasAbility?(:MAGICBOUNCE)
 		return true if leechTarget.effects[:MagicCoat]==true
 		return true if leechTarget.hp == 0
 		return false
@@ -6407,10 +6407,10 @@ class PokeBattle_AI
 		maxnormal= alltypes ? checkAIbestMove().type==:NORMAL : true
 		if pbAIfaster?(@move)
 			miniscore*=0.9
-		elsif @attacker.ability == :MOTORDRIVE && maxnormal
+		elsif @attacker.hasAbility?(:MOTORDRIVE) && maxnormal
 			miniscore*=1.5
 		end
-		miniscore*=1.5 if (@attacker.ability == :LIGHTNINGROD || @attacker.ability == :VOLTABSORB) && @attacker.hp.to_f < 0.6*@attacker.totalhp && maxnormal
+		miniscore*=1.5 if (@attacker.hasAbility?(:LIGHTNINGROD) || @attacker.hasAbility?(:VOLTABSORB)) && @attacker.hp.to_f < 0.6*@attacker.totalhp && maxnormal
 		miniscore*=1.1 if @attacker.hasType?(:GROUND)
 		if @battle.doublebattle
 			miniscore*=1.2 if [:MOTORDRIVE, :LIGHTNINGROD, :VOLTABSORB].include?(@attacker.pbPartner.ability)
@@ -6441,7 +6441,7 @@ class PokeBattle_AI
 
 	def rolloutcode
 		miniscore=1.0
-		miniscore*=1.1 if @opponent.pbNonActivePokemonCount==0 || @attacker.ability == :SHADOWTAG || @opponent.effects[:MeanLook]>0
+		miniscore*=1.1 if @opponent.pbNonActivePokemonCount==0 || @attacker.hasAbility?(:SHADOWTAG) || @opponent.effects[:MeanLook]>0
 		miniscore*=0.75 if @attacker.hp*(1.0/@attacker.totalhp)<0.75
 		miniscore*=1+0.05*@attacker.stages[PBStats::ACCURACY] if @attacker.stages[PBStats::ACCURACY]<0
 		miniscore*=1+0.05*@attacker.stages[PBStats::ATTACK] if @attacker.stages[PBStats::ATTACK]<0
@@ -6455,26 +6455,26 @@ class PokeBattle_AI
 		miniscore*=1.2 if @attacker.effects[:DefenseCurl]
 		miniscore*=1.5 if checkAIdamage()*3<@attacker.hp && (getAIMemory().length > 0)
 		miniscore+=4 if hasbadmoves(15)
-		miniscore*=0.8 if checkAImoves(PBStuff::PROTECTMOVE) && !(@move.contactMove? && @attacker.ability == :UNSEENFIST)
+		miniscore*=0.8 if checkAImoves(PBStuff::PROTECTMOVE) && !(@move.contactMove? && @attacker.hasAbility?(:UNSEENFIST))
 		return miniscore
 	end
 
 	def outragecode(score)
-		return 1.3 if @attacker.ability == :OWNTEMPO
+		return 1.3 if @attacker.hasAbility?(:OWNTEMPO)
 		miniscore=1.0
 		miniscore*=0.85 if score<100
 		miniscore*=1.3 if (@mondata.attitemworks && @attacker.item == :LUMBERRY) || (@mondata.attitemworks && @attacker.item == :PERSIMBERRY)
 		miniscore*=1-0.05*@attacker.stages[PBStats::ATTACK] if @attacker.stages[PBStats::ATTACK]>0
 		miniscore*=1-0.025*(@battle.pbPokemonCount(@battle.pbPartySingleOwner(@attacker.index))) if (@battle.pbPokemonCount(@battle.pbPartySingleOwner(@attacker.index))) > 2
-		miniscore*=0.7 if checkAImoves(PBStuff::PROTECTMOVE) && !(@move.contactMove? && @attacker.ability == :UNSEENFIST)
+		miniscore*=0.7 if checkAImoves(PBStuff::PROTECTMOVE) && !(@move.contactMove? && @attacker.hasAbility?(:UNSEENFIST))
 		miniscore*=0.7 if checkAIhealing()
 		return miniscore
     end
 
 	def spectralthiefcode
 		miniscore= 0.10*statchangecounter(@opponent,1,7)
-		miniscore*=(-1) if @attacker.ability == :CONTRARY
-		miniscore*=2 if @attacker.ability == :SIMPLE
+		miniscore*=(-1) if @attacker.hasAbility?(:CONTRARY)
+		miniscore*=2 if @attacker.hasAbility?(:SIMPLE)
 		miniscore+=1
 		miniscore*=1.2 if @opponent.effects[:Substitute]>0
 		return miniscore
@@ -6493,13 +6493,13 @@ class PokeBattle_AI
 		miniscore=1.0
 		bestmove1 = checkAIbestMove(@attacker.pbOpposing1) #grab moves opposing mons are going to use
 		bestmove2 = checkAIbestMove(@attacker.pbOpposing2)
-		if @opponent.ability == :FLASHFIRE
+		if @opponent.hasAbility?(:FLASHFIRE)
 			miniscore*=3 if bestmove1.pbType(@attacker.pbOpposing1) ==:FIRE || bestmove2.pbType(@attacker.pbOpposing2) ==:FIRE
-		elsif @opponent.ability == :STORMDRAIN || @opponent.ability == :DRYSKIN || @opponent.ability == :WATERABSORB
+		elsif @opponent.hasAbility?(:STORMDRAIN) || @opponent.hasAbility?(:DRYSKIN) || @opponent.hasAbility?(:WATERABSORB)
 			miniscore*=3 if bestmove1.pbType(@attacker.pbOpposing1) ==:WATER || bestmove2.pbType(@attacker.pbOpposing2) ==:WATER
-		elsif @opponent.ability == :MOTORDRIVE || @opponent.ability == :LIGHTNINGROD || @opponent.ability == :VOLTABSORB
+		elsif @opponent.hasAbility?(:MOTORDRIVE) || @opponent.hasAbility?(:LIGHTNINGROD) || @opponent.hasAbility?(:VOLTABSORB)
 			miniscore*=3 if bestmove1.pbType(@attacker.pbOpposing1) ==:ELECTRIC ||bestmove2.pbType(@attacker.pbOpposing2) ==:ELECTRIC
-		elsif @opponent.ability == :SAPSIPPER
+		elsif @opponent.hasAbility?(:SAPSIPPER)
 			miniscore*=3 if bestmove1.pbType(@attacker.pbOpposing1) ==:GRASS || bestmove2.pbType(@attacker.pbOpposing2) ==:GRASS
 		end
 		miniscore*=2 if (bestmove1.contactMove? || bestmove2.contactMove?) && checkAImoves([:KINGSSHIELD, :BANEFULBUNKER, :SPIKYSHIELD])
@@ -6554,21 +6554,21 @@ class PokeBattle_AI
 				weathermove=true if (i == :SUNNYDAY || i == :RAINDANCE || i == :HAIL || i == :SANDSTORM)
 				fieldmove=true if (i == :GRASSYTERRAIN || i == :ELECTRICTERRAIN || i == :MISTYTERRAIN || i == :PSYCHICTERRAIN || i == :MIST || i == :IONDELUGE || i == :TOPSYTURVY)
 			end
-			monRoles.push(:SWEEPER) 		if mon.ev[3]>251 && (mon.nature==:MODEST || mon.nature==:JOLLY || mon.nature==:TIMID || mon.nature==:ADAMANT) || (mon.item==(:CHOICEBAND) || mon.item==(:CHOICESPECS) || mon.item==(:CHOICESCARF) || mon.ability == :GORILLATACTICS)
+			monRoles.push(:SWEEPER) 		if mon.ev[3]>251 && (mon.nature==:MODEST || mon.nature==:JOLLY || mon.nature==:TIMID || mon.nature==:ADAMANT) || (mon.item==(:CHOICEBAND) || mon.item==(:CHOICESPECS) || mon.item==(:CHOICESCARF) || mon.hasAbility?(:GORILLATACTICS))
 			monRoles.push(:PHYSICALWALL) if healingmove && (mon.ev[2]>251 && (mon.nature==:BOLD || mon.nature==:RELAXED || mon.nature==:IMPISH || mon.nature==:LAX))
 			monRoles.push(:SPECIALWALL)	if healingmove && (mon.ev[5]>251 && (mon.nature==:CALM || mon.nature==:GENTLE || mon.nature==:SASSY || mon.nature==:CAREFUL))
 			monRoles.push(:CLERIC) 		if curemove || (wishmove && mon.ev[0]>251)
 			monRoles.push(:PHAZER) 		if phasemove
 			monRoles.push(:SCREENER) 	if mon.item==(:LIGHTCLAY) && screenmove
-			monRoles.push(:PIVOT) 		if (pivotmove && healingmove) || (mon.ability == :REGENERATOR)
+			monRoles.push(:PIVOT) 		if (pivotmove && healingmove) || (mon.hasAbility?(:REGENERATOR))
 			monRoles.push(:SPINNER) 		if spinmove
 			monRoles.push(:TANK) 		if (mon.ev[0]>251 && !healingmove) || mon.item==(:ASSAULTVEST)
 			monRoles.push(:BATONPASSER) 	if batonmove
-			monRoles.push(:STALLBREAKER) if tauntmove || mon.item==(:CHOICEBAND) || mon.item==(:CHOICESPECS) || mon.ability == :GORILLATACTICS
-			monRoles.push(:STATUSABSORBER) if restmove || (mon.ability == :COMATOSE) || mon.item==(:TOXICORB) || mon.item==(:FLAMEORB) || (mon.ability == :GUTS) || (mon.ability == :QUICKFEET)|| (mon.ability == :FLAREBOOST) || (mon.ability == :TOXICBOOST) || (mon.ability == :NATURALCURE) || (mon.ability == :MAGICGUARD) || (mon.ability == :MAGICBOUNCE) || hydrationCheck(mon)
-			monRoles.push(:TRAPPER) 		if (mon.ability == :SHADOWTAG) || (mon.ability == :ARENATRAP) || (mon.ability == :MAGNETPULL)
-			monRoles.push(:WEATHERSETTER)if weathermove || (mon.ability == :DROUGHT) || (mon.ability == :SANDSPIT)  || (mon.ability == :SANDSTREAM) || (mon.ability == :DRIZZLE) || (mon.ability == :SNOWWARNING) || (mon.ability == :PRIMORDIALSEA) || (mon.ability == :DESOLATELAND) || (mon.ability == :DELTASTREAM)
-			monRoles.push(:FIELDSETTER) 	if fieldmove || (mon.ability == :GRASSYSURGE) || (mon.ability == :ELECTRICSURGE) || (mon.ability == :MISTYSURGE) || (mon.ability == :PSYCHICSURGE) || mon.item==(:AMPLIFIELDROCK)|| (mon.ability == :DARKSURGE) 
+			monRoles.push(:STALLBREAKER) if tauntmove || mon.item==(:CHOICEBAND) || mon.item==(:CHOICESPECS) || mon.hasAbility?(:GORILLATACTICS)
+			monRoles.push(:STATUSABSORBER) if restmove || (mon.hasAbility?(:COMATOSE)) || mon.item==(:TOXICORB) || mon.item==(:FLAMEORB) || (mon.hasAbility?(:GUTS)) || (mon.hasAbility?(:QUICKFEET))|| (mon.hasAbility?(:FLAREBOOST)) || (mon.hasAbility?(:TOXICBOOST)) || (mon.hasAbility?(:NATURALCURE)) || (mon.hasAbility?(:MAGICGUARD)) || (mon.hasAbility?(:MAGICBOUNCE)) || hydrationCheck(mon)
+			monRoles.push(:TRAPPER) 		if (mon.hasAbility?(:SHADOWTAG)) || (mon.hasAbility?(:ARENATRAP)) || (mon.hasAbility?(:MAGNETPULL))
+			monRoles.push(:WEATHERSETTER)if weathermove || (mon.hasAbility?(:DROUGHT)) || (mon.hasAbility?(:SANDSPIT))  || (mon.hasAbility?(:SANDSTREAM)) || (mon.hasAbility?(:DRIZZLE)) || (mon.hasAbility?(:SNOWWARNING)) || (mon.hasAbility?(:PRIMORDIALSEA)) || (mon.hasAbility?(:DESOLATELAND)) || (mon.hasAbility?(:DELTASTREAM))
+			monRoles.push(:FIELDSETTER) 	if fieldmove || (mon.hasAbility?(:GRASSYSURGE)) || (mon.hasAbility?(:ELECTRICSURGE)) || (mon.hasAbility?(:MISTYSURGE)) || (mon.hasAbility?(:PSYCHICSURGE)) || mon.item==(:AMPLIFIELDROCK)|| (mon.hasAbility?(:DARKSURGE)) 
 			monRoles.push(:SECOND) 		if secondhighest
 			partyRoles.push(monRoles)
 		end
@@ -6589,7 +6589,7 @@ class PokeBattle_AI
 		miniscore-=1
 		if @move.effect != 100
 			addedeffect = @move.effect.to_f
-			addedeffect*=2 if @attacker.ability == :SERENEGRACE || @battle.FE == :RAINBOW
+			addedeffect*=2 if @attacker.hasAbility?(:SERENEGRACE) || @battle.FE == :RAINBOW
 			addedeffect=100 if addedeffect>100
 			miniscore*=addedeffect/100.0
 		end
@@ -6666,13 +6666,13 @@ class PokeBattle_AI
 	def pbRoughAccuracy(move,attacker,opponent)
 		# start with stuff that has set accuracy
 		# Override accuracy
-		return 100 if attacker.ability == :NOGUARD || opponent.ability == :NOGUARD || (attacker.ability == :FAIRYAURA && @battle.FE == :FAIRYTALE) && @mondata.skill>=MEDIUMSKILL
+		return 100 if attacker.hasAbility?(:NOGUARD) || opponent.hasAbility?(:NOGUARD) || (attacker.hasAbility?(:FAIRYAURA) && @battle.FE == :FAIRYTALE) && @mondata.skill>=MEDIUMSKILL
 		return 100 if move.accuracy==0   # Doesn't do accuracy check (always hits)
 		return 100 if move.function==0xA5 # Swift
 		if @mondata.skill>=MEDIUMSKILL
 			return 100 if opponent.effects[:LockOn]>0 && opponent.effects[:LockOnPos]==attacker.index			
 			if move.function==0x70 # OHKO moves
-				return 0 if opponent.ability == :STURDY || opponent.level>attacker.level || (@battle.FE == :CHESS && opponent.pokemon.piece==:PAWN)
+				return 0 if opponent.hasAbility?(:STURDY) || opponent.level>attacker.level || (@battle.FE == :CHESS && opponent.pokemon.piece==:PAWN)
 				return move.accuracy+attacker.level-opponent.level
 			end
 			return 100 if opponent.effects[:Telekinesis]>0
@@ -6702,33 +6702,33 @@ class PokeBattle_AI
 	  	end
 		# Accuracy stages
 		accstage=attacker.stages[PBStats::ACCURACY]
-		accstage=0 if opponent.ability == :UNAWARE && !moldBreakerCheck(attacker)
+		accstage=0 if opponent.hasAbility?(:UNAWARE) && !moldBreakerCheck(attacker)
 		accuracy=(accstage>=0) ? (accstage+3)*100.0/3 : 300.0/(3-accstage)
 		evastage=opponent.stages[PBStats::EVASION]
 		evastage-=2 if @battle.state.effects[:Gravity]!=0
 		evastage=-6 if evastage<-6
-		evastage=0 if opponent.effects[:Foresight] || opponent.effects[:MiracleEye] || move.function==0xA9 || attacker.ability == :UNAWARE && !moldBreakerCheck(opponent)
+		evastage=0 if opponent.effects[:Foresight] || opponent.effects[:MiracleEye] || move.function==0xA9 || attacker.hasAbility?(:UNAWARE) && !moldBreakerCheck(opponent)
 		evasion=(evastage>=0) ? (evastage+3)*100.0/3 : 300.0/(3-evastage)
 		# Accuracy modifiers
 		if @mondata.skill>=MEDIUMSKILL
-			accuracy*=1.3 if attacker.ability == :COMPOUNDEYES
-			accuracy*=1.1 if attacker.ability == :VICTORYSTAR
+			accuracy*=1.3 if attacker.hasAbility?(:COMPOUNDEYES)
+			accuracy*=1.1 if attacker.hasAbility?(:VICTORYSTAR)
 			if @mondata.skill>=HIGHSKILL
-				accuracy*=1.1 if attacker.pbPartner.ability == :VICTORYSTAR
-				accuracy*=0.8 if attacker.ability == :HUSTLE && move.basedamage>0 && move.pbIsPhysical?(move.pbType(attacker)) && !moldBreakerCheck(opponent)
+				accuracy*=1.1 if attacker.pbPartner.hasAbility?(:VICTORYSTAR)
+				accuracy*=0.8 if attacker.hasAbility?(:HUSTLE) && move.basedamage>0 && move.pbIsPhysical?(move.pbType(attacker)) && !moldBreakerCheck(opponent)
 			end
 			if @mondata.skill>=BESTSKILL
-				accuracy*=0.9 if attacker.ability == :LONGREACH && (@battle.FE == :ROCKY || @battle.FE == :FOREST) # Rocky Field # Forest Field
-				accuracy*= @battle.FE == :RAINBOW ? 0 : 0.5 if opponent.ability == :WONDERSKIN && @basedamage==0 && attacker.pbIsOpposing?(opponent.index) && !moldBreakerCheck(attacker)
-				evasion*=1.2 if opponent.ability == :TANGLEDFEET && opponent.effects[:Confusion]>0 && !moldBreakerCheck(attacker)
-				evasion*=1.2 if (@battle.pbWeather== :SANDSTORM || @battle.FE == :DESERT || @battle.FE == :ASHENBEACH) && opponent.ability == :SANDVEIL && !moldBreakerCheck(attacker)
-				evasion*=1.2 if (@battle.pbWeather== :HAIL || @battle.FE == :ICY || @battle.FE == :SNOWYMOUNTAIN) && opponent.ability == :SNOWCLOAK && !moldBreakerCheck(attacker)
+				accuracy*=0.9 if attacker.hasAbility?(:LONGREACH) && (@battle.FE == :ROCKY || @battle.FE == :FOREST) # Rocky Field # Forest Field
+				accuracy*= @battle.FE == :RAINBOW ? 0 : 0.5 if opponent.hasAbility?(:WONDERSKIN) && @basedamage==0 && attacker.pbIsOpposing?(opponent.index) && !moldBreakerCheck(attacker)
+				evasion*=1.2 if opponent.hasAbility?(:TANGLEDFEET) && opponent.effects[:Confusion]>0 && !moldBreakerCheck(attacker)
+				evasion*=1.2 if (@battle.pbWeather== :SANDSTORM || @battle.FE == :DESERT || @battle.FE == :ASHENBEACH) && opponent.hasAbility?(:SANDVEIL) && !moldBreakerCheck(attacker)
+				evasion*=1.2 if (@battle.pbWeather== :HAIL || @battle.FE == :ICY || @battle.FE == :SNOWYMOUNTAIN) && opponent.hasAbility?(:SNOWCLOAK) && !moldBreakerCheck(attacker)
 			end
 			if attacker.itemWorks?
 				accuracy*=1.1 if attacker.item == :WIDELENS
 				accuracy*=1.2 if attacker.item == :ZOOMLENS && attacker.pbSpeed<opponent.pbSpeed
 				if attacker.item == :MICLEBERRY
-					accuracy*=1.2 if (attacker.ability == :GLUTTONY && attacker.hp<=(attacker.totalhp/2.0).floor) || attacker.hp<=(attacker.totalhp/4.0).floor
+					accuracy*=1.2 if (attacker.hasAbility?(:GLUTTONY) && attacker.hp<=(attacker.totalhp/2.0).floor) || attacker.hp<=(attacker.totalhp/4.0).floor
 				end
 				if @mondata.skill>=HIGHSKILL
 					evasion*=1.1 if opponent.item == :BRIGHTPOWDER
@@ -6736,8 +6736,8 @@ class PokeBattle_AI
 				end
 			end
 		end
-		evasion = 100 if attacker.ability == :KEENEYE
-    	evasion = 100 if @mondata.skill>=BESTSKILL && @battle.FE == :ASHENBEACH && [:OWNTEMPO,:INNERFOCUS,:PUREPOWER,:SANDVEIL,:STEADFAST].include?(attacker.ability) && opponent.ability != :UNNERVE && @opponent.ability != :ASONE
+		evasion = 100 if attacker.hasAbility?(:KEENEYE)
+    	evasion = 100 if @mondata.skill>=BESTSKILL && @battle.FE == :ASHENBEACH && [:OWNTEMPO,:INNERFOCUS,:PUREPOWER,:SANDVEIL,:STEADFAST].any? { |a| attacker.hasAbility?(a) } && opponent.ability != :UNNERVE && @opponent.ability != :ASONE
 		accuracy*=baseaccuracy/evasion.to_f
 		accuracy=100 if accuracy>100
 		return accuracy
@@ -6752,8 +6752,8 @@ class PokeBattle_AI
 		for battler in [attacker, opponent]
 			index += 1
 			battlermove = (battler==attacker) ? attackermove : opponentmove
-			priorityarray[index][1] = -1 if battler.ability == :STALL
-			priorityarray[index][1] = 1 if battler.hasWorkingItem(:CUSTAPBERRY) && ((battler.ability == :GLUTTONY && battler.hp<=(battler.totalhp/2.0).floor) || battler.hp<=(battler.totalhp/4.0).floor)
+			priorityarray[index][1] = -1 if battler.hasAbility?(:STALL)
+			priorityarray[index][1] = 1 if battler.hasWorkingItem(:CUSTAPBERRY) && ((battler.hasAbility?(:GLUTTONY) && battler.hp<=(battler.totalhp/2.0).floor) || battler.hp<=(battler.totalhp/4.0).floor)
 			priorityarray[index][1] = -2 if (battler.itemWorks? && (battler.item == :LAGGINGTAIL || battler.item == :FULLINCENSE))
 			#speed priority
 			priorityarray[index][2] = battler.pbSpeed if @battle.trickroom==0
@@ -6762,11 +6762,11 @@ class PokeBattle_AI
 			pri = 0
 			pri = battlermove.priority if !battlermove.zmove
 			pri = pri.nil? ? 0 : pri
-			pri += 1 if battler.ability == :PRANKSTER && battlermove.basedamage==0 # Is status move
-			pri += 1 if battler.ability == :GALEWINGS && battlermove.type==:FLYING && ((battler.hp == battler.totalhp) || ((@battle.FE == :MOUNTAIN || @battle.FE == :SNOWYMOUNTAIN) && @battle.pbWeather == :STRONGWINDS))
+			pri += 1 if battler.hasAbility?(:PRANKSTER) && battlermove.basedamage==0 # Is status move
+			pri += 1 if battler.hasAbility?(:GALEWINGS) && battlermove.type==:FLYING && ((battler.hp == battler.totalhp) || ((@battle.FE == :MOUNTAIN || @battle.FE == :SNOWYMOUNTAIN) && @battle.pbWeather == :STRONGWINDS))
 			pri += 1 if @battle.FE == :CHESS && battler.pokemon && battler.pokemon.piece == :KING
 			pri += 1 if battlermove.move == :GRASSYGLIDE && (@battle.FE == :GRASSY || @battle.state.effects[:GRASSY] > 0)
-			pri += 3 if battler.ability == :TRIAGE && (PBStuff::HEALFUNCTIONS).include?(battlermove.function)
+			pri += 3 if battler.hasAbility?(:TRIAGE) && (PBStuff::HEALFUNCTIONS).include?(battlermove.function)
 			pri -= 1 if @battle.FE == :DEEPEARTH && battlermove.move == :COREENFORCER
 			priorityarray[index][0] = pri
 		end
@@ -6786,8 +6786,8 @@ class PokeBattle_AI
 				next 
 			end
 			priorityarray[i][0] = 1 if battler.pokemon && battler.pokemon.piece == :KING && @battle.FE == :CHESS
-			priorityarray[i][1] = -1 if battler.ability == :STALL
-			priorityarray[i][1] = 1 if battler.hasWorkingItem(:CUSTAPBERRY) && ((battler.ability == :GLUTTONY && battler.hp<=(battler.totalhp/2.0).floor) || battler.hp<=(battler.totalhp/4.0).floor)
+			priorityarray[i][1] = -1 if battler.hasAbility?(:STALL)
+			priorityarray[i][1] = 1 if battler.hasWorkingItem(:CUSTAPBERRY) && ((battler.hasAbility?(:GLUTTONY) && battler.hp<=(battler.totalhp/2.0).floor) || battler.hp<=(battler.totalhp/4.0).floor)
 			priorityarray[i][1] = -2 if (battler.itemWorks? && (battler.item == :LAGGINGTAIL || battler.item == :FULLINCENSE))
 			#speed priority
 			priorityarray[i][2] = pbRoughStat(battler,PBStats::SPEED) if @battle.trickroom==0
@@ -6808,29 +6808,29 @@ class PokeBattle_AI
 		if @battle.FE == :BURNING && !attacker.isAirborne? && attacker.burningFieldPassiveDamage?
 			subscore = 0
 			subscore += PBTypes.twoTypeEff(:FIRE,attacker.type1,attacker.type2)/32.0
-			subscore*=2.0 if (attacker.ability == :LEAFGUARD) || (attacker.ability == :ICEBODY) || (attacker.ability == :FLUFFY) || (attacker.ability == :GRASSPELT)
+			subscore*=2.0 if (attacker.hasAbility?(:LEAFGUARD)) || (attacker.hasAbility?(:ICEBODY)) || (attacker.hasAbility?(:FLUFFY)) || (attacker.hasAbility?(:GRASSPELT))
 			healing -= subscore
 		end
 		if @battle.FE == :UNDERWATER && attacker.underwaterFieldPassiveDamamge?
 			subscore = 0
 			subscore += PBTypes.twoTypeEff(:WATER,attacker.type1,attacker.type2)/32.0
-			subscore*=2.0 if (attacker.ability == :FLAMEBODY) || (attacker.ability == :MAGMAARMOR)
+			subscore*=2.0 if (attacker.hasAbility?(:FLAMEBODY)) || (attacker.hasAbility?(:MAGMAARMOR))
 			healing -= subscore
 		end
 		if @battle.FE == :MURKWATERSURFACE && attacker.murkyWaterSurfacePassiveDamage?
 			subscore = 0
 			subscore += PBTypes.twoTypeEff(:POISON,attacker.type1,attacker.type2)/32.0
-			subscore*=2.0 if (attacker.ability == :FLAMEBODY) || (attacker.ability == :MAGMAARMOR) || attacker.ability == :DRYSKIN || attacker.ability == :WATERABSORB
+			subscore*=2.0 if (attacker.hasAbility?(:FLAMEBODY)) || (attacker.hasAbility?(:MAGMAARMOR)) || attacker.hasAbility?(:DRYSKIN) || attacker.hasAbility?(:WATERABSORB)
 			healing -= subscore
 		end
 		# Field effect induced
-		healing -= 0.125 if @battle.FE == :CORROSIVE && (attacker.ability == :GRASSPELT || attacker.ability == :DRYSKIN)
-		healing -= 0.125 if @battle.FE == :DESERT &&  attacker.ability == :DRYSKIN
+		healing -= 0.125 if @battle.FE == :CORROSIVE && (attacker.hasAbility?(:GRASSPELT) || attacker.hasAbility?(:DRYSKIN))
+		healing -= 0.125 if @battle.FE == :DESERT &&  attacker.hasAbility?(:DRYSKIN)
 		healing -= 0.0625 if attacker.effects[:AquaRing] && @battle.FE == :CORROSIVEMIST && !attacker.hasType?(:STEEL) && !attacker.hasType?(:POISON) || !@battle.pbCheckGlobalAbility(:NEUTRALIZINGGAS)
 		healing -= 0.0625 if attacker.effects[:Ingrain] && (@battle.FE == :SWAMP || @battle.FE == :CORROSIVE) && !(attacker.hasType?(:STEEL) || attacker.hasType?(:POISON))
 
 		# weather induced
-		healing -= 0.125 if @battle.pbWeather == :SUNNYDAY && (attacker.ability == :SOLARPOWER || attacker.ability == :DRYSKIN)
+		healing -= 0.125 if @battle.pbWeather == :SUNNYDAY && (attacker.hasAbility?(:SOLARPOWER) || attacker.hasAbility?(:DRYSKIN))
 		healing -= 0.0625 if @battle.pbWeather == :SANDSTORM && !(attacker.hasType?(:GROUND) || attacker.hasType?(:ROCK) || attacker.hasType?(:STEEL))
 		healing -= 0.0625 if @battle.pbWeather == :HAIL && !attacker.hasType?(:ICE)
 		
@@ -6869,19 +6869,19 @@ class PokeBattle_AI
 			subscore *= 2.0 if (@battle.ProgressiveFieldCheck(PBFields::FLOWERGARDEN,4,5))
 			healing += subscore
 		end
-		if attacker.ability == :DRYSKIN
+		if attacker.hasAbility?(:DRYSKIN)
 			healing += 0.0625 if (@battle.FE == :CORROSIVE && (attacker.hasType?(:STEEL) || attacker.hasType?(:POISON))) || @battle.pbWeather== :RAINDANCE || @battle.FE == :MISTY || @battle.FE == :SWAMP || @battle.FE == :WATERSURFACE || @battle.FE == :UNDERWATER
 		end
 		healing += 0.0625 if attacker.itemWorks? && (attacker.item == :LEFTOVERS || (attacker.item == :BLACKSLUDGE && attacker.hasType?(:POISON)))
-		healing += 0.0625 if attacker.ability == :RAINDISH && @battle.pbWeather== :RAINDANCE
-		healing += 0.0625 if attacker.ability == :ICEBODY && (@battle.pbWeather== :HAIL || @battle.FE == :ICY || @battle.FE == :SNOWYMOUNTAIN)
-		healing += 0.125 if (attacker.status == :POISON || @battle.FE == :CORROSIVE || @battle.FE == :WASTELAND) && attacker.ability == :POISONHEAL
+		healing += 0.0625 if attacker.hasAbility?(:RAINDISH) && @battle.pbWeather== :RAINDANCE
+		healing += 0.0625 if attacker.hasAbility?(:ICEBODY) && (@battle.pbWeather== :HAIL || @battle.FE == :ICY || @battle.FE == :SNOWYMOUNTAIN)
+		healing += 0.125 if (attacker.status == :POISON || @battle.FE == :CORROSIVE || @battle.FE == :WASTELAND) && attacker.hasAbility?(:POISONHEAL)
 		if @battle.FE != :INDOOR
-			healing += 0.0625 if Rejuv && @battle.FE == :ELECTERRAIN && attacker.ability == :VOLTABSORB
+			healing += 0.0625 if Rejuv && @battle.FE == :ELECTERRAIN && attacker.hasAbility?(:VOLTABSORB)
 			healing += 0.0625 if @battle.FE == :GRASSY && !attacker.isAirborne?
 			healing += 0.0625 if @battle.FE == :RAINBOW && attacker.status == :SLEEP
-			healing += 0.0625 if @battle.FE == :SHORTCIRCUIT && attacker.ability == :VOLTABSORB
-			healing += 0.0625 if (@battle.FE == :WATERSURFACE || @battle.FE == :UNDERWATER) && attacker.ability == :WATERABSORB
+			healing += 0.0625 if @battle.FE == :SHORTCIRCUIT && attacker.hasAbility?(:VOLTABSORB)
+			healing += 0.0625 if (@battle.FE == :WATERSURFACE || @battle.FE == :UNDERWATER) && attacker.hasAbility?(:WATERABSORB)
 		end
 		return healing
 	end
@@ -6972,11 +6972,11 @@ class PokeBattle_AI
 			((PBTypes.oneTypeEff(type, :FLYING) > 2) || (PBTypes.oneTypeEff(type, :FLYING) < 2 && ($game_switches[:Inversemode] || (@battle.FE == :INVERSE))))
 		  	typemod /= 2
 		end
-		if @battle.FE == :SNOWYMOUNTAIN && opponent.ability == :ICESCALES && opponent.hasType?(:ICE) && !(opponent.moldbroken) &&
+		if @battle.FE == :SNOWYMOUNTAIN && opponent.hasAbility?(:ICESCALES) && opponent.hasType?(:ICE) && !(opponent.moldbroken) &&
 			((PBTypes.oneTypeEff(type, :ICE) > 2) || (PBTypes.oneTypeEff(type, :ICE) < 2 && ($game_switches[:Inversemode] || (@battle.FE == :INVERSE))))
 			typemod /= 2
 		end
-		if @battle.FE == :DRAGONSDEN && opponent.ability == :MULTISCALE && opponent.hasType?(:DRAGON) && !(opponent.moldbroken) &&
+		if @battle.FE == :DRAGONSDEN && opponent.hasAbility?(:MULTISCALE) && opponent.hasType?(:DRAGON) && !(opponent.moldbroken) &&
 			((PBTypes.oneTypeEff(type, :DRAGON) > 2) || (PBTypes.oneTypeEff(type, :DRAGON) < 2 && ($game_switches[:Inversemode] || (@battle.FE == :INVERSE))))
 			typemod /= 2
 		end
@@ -6984,7 +6984,7 @@ class PokeBattle_AI
 			((PBTypes.oneTypeEff(type, :GRASS) > 2) || (PBTypes.oneTypeEff(type, :GRASS) < 2 && ($game_switches[:Inversemode] || (@battle.FE == :INVERSE))))
 			typemod /= 2
 		end
-		if @battle.FE == :BEWITCHED && opponent.hasType?(:FAIRY) && (opponent.abilty == :PASTELVEIL || opponent.pbPartner.ability == :PASTELVEIL) && !(opponent.moldbroken) &&
+		if @battle.FE == :BEWITCHED && opponent.hasType?(:FAIRY) && (opponent.abilty == :PASTELVEIL || opponent.pbPartner.hasAbility?(:PASTELVEIL)) && !(opponent.moldbroken) &&
 			((PBTypes.oneTypeEff(type, :FAIRY) > 2) || (PBTypes.oneTypeEff(type, :FAIRY) < 2 && ($game_switches[:Inversemode] || (@battle.FE == :INVERSE))))
 			typemod /= 2
 		end
@@ -7020,7 +7020,7 @@ class PokeBattle_AI
 				move.type = @battle.field.mimicry if @battle.field.mimicry
 			when :NATUREPOWER
 				move = PokeBattle_Move.pbFromPBMove(@battle,PBMove.new(@battle.field.naturePower),attacker)
-				move.priority = 1 if attacker.ability == :PRANKSTER
+				move.priority = 1 if attacker.hasAbility?(:PRANKSTER)
 		end
 		return move
 	end
@@ -7040,11 +7040,11 @@ class PokeBattle_AI
 
 	def totalHazardDamage(pkmn)
 		percentdamage = 0
-		if pkmn.pbOwnSide.effects[:Spikes]>0 && !pkmn.isAirborne? && !pkmn.ability == :MAGICGUARD && !pkmn.hasWorkingItem(:HEAVYDUTYBOOTS)
+		if pkmn.pbOwnSide.effects[:Spikes]>0 && !pkmn.isAirborne? && !pkmn.hasAbility?(:MAGICGUARD) && !pkmn.hasWorkingItem(:HEAVYDUTYBOOTS)
 			spikesdiv=[8,8,6,4][pkmn.pbOwnSide.effects[:Spikes]]
 			percentdamage += (100.0/spikesdiv).floor
 		end
-		if pkmn.pbOwnSide.effects[:StealthRock] && !pkmn.ability == :MAGICGUARD && !pkmn.hasWorkingItem(:HEAVYDUTYBOOTS)
+		if pkmn.pbOwnSide.effects[:StealthRock] && !pkmn.hasAbility?(:MAGICGUARD) && !pkmn.hasWorkingItem(:HEAVYDUTYBOOTS)
 			eff=PBTypes.twoTypeEff(:ROCK,pkmn.type1,pkmn.type2)
 			if @mondata.skill>BESTSKILL && @battle.FE == :CRYSTALCAVERN
 				eff1=PBTypes.twoTypeEff(:WATER,pkmn.type1,pkmn.type2)
@@ -7061,7 +7061,7 @@ class PokeBattle_AI
 		if @mondata.skill>=BESTSKILL
 			# Corrosive Field Entry
 			if @battle.FE == :CORROSIVE
-				if ![:MAGICGUARD, :POISONHEAL, :IMMUNITY, :WONDERGUARD, :TOXICBOOST, :PASTELVEIL].include?(pkmn.ability)
+				if ![:MAGICGUARD, :POISONHEAL, :IMMUNITY, :WONDERGUARD, :TOXICBOOST, :PASTELVEIL].any? { |a| pkmn.hasAbility?(a) }
 					if !pkmn.isAirborne? && !pkmn.hasType?(:POISON) && !pkmn.hasType?(:STEEL)
 						eff=PBTypes.twoTypeEff(:POISON,pkmn.type1,pkmn.type2)
 						eff*=2
@@ -7115,7 +7115,7 @@ class PokeBattle_AI
 					abilityscore*=3 if attacker.moves.all? {|moveloop| moveloop!=nil && moveloop.pbType(attacker) == :WATER}
 					abilityscore*=2 if pbTypeModNoMessages(watermove.pbType(attacker),attacker,opponent,watermove)>4
 				end
-				abilityscore*=0.5 if opponent.ability == :DRYSKIN && attacker.moves.any? {|moveloop| moveloop!=nil && moveloop.pbType(attacker) == :FIRE}
+				abilityscore*=0.5 if opponent.hasAbility?(:DRYSKIN) && attacker.moves.any? {|moveloop| moveloop!=nil && moveloop.pbType(attacker) == :FIRE}
 			when :SAPSIPPER
 				for i in attacker.moves
 					next if i.nil?
@@ -7250,8 +7250,8 @@ class PokeBattle_AI
 				fieldscore*=1.5 if opponent.hasType?(:ELECTRIC) || opponent.pbPartner.hasType?(:ELECTRIC)
 				fieldscore*=0.5 if attacker.hasType?(:ELECTRIC)
 				fieldscore*=0.5 if pbPartyHasType?(:ELECTRIC)
-				fieldscore*=1.3 if opponent.ability == :SURGESURFER
-				fieldscore*=0.7 if attacker.ability == :SURGESURFER
+				fieldscore*=1.3 if opponent.hasAbility?(:SURGESURFER)
+				fieldscore*=0.7 if attacker.hasAbility?(:SURGESURFER)
 			when :GRASSY # Grassy Terrain
 				fieldscore*=1.5 if opponent.hasType?(:GRASS) || opponent.pbPartner.hasType?(:GRASS)
 				fieldscore*=0.5 if attacker.hasType?(:GRASS)
@@ -7282,8 +7282,8 @@ class PokeBattle_AI
 				fieldscore*=1.5 if opponent.hasType?(:FIGHTING) || opponent.pbPartner.hasType?(:FIGHTING)
 				fieldscore*=0.5 if attacker.hasType?(:FIGHTING)
 				fieldscore*=0.5 if pbPartyHasType?(:FIGHTING)
-				fieldscore*=1.5 if opponent.ability == :DANCER
-				fieldscore*=0.5 if attacker.ability == :DANCER
+				fieldscore*=1.5 if opponent.hasAbility?(:DANCER)
+				fieldscore*=0.5 if attacker.hasAbility?(:DANCER)
 				fieldscore*=0.5 if attacker.pbHasMove?(:SING) || attacker.pbHasMove?(:DRAGONDANCE) || attacker.pbHasMove?(:QUIVERDANCE)
 				fieldscore*=1.5 if checkAImoves([:SING,:DRAGONDANCE,:QUIVERDANCE],aimem)
 			when :BURNING # Burning Field
@@ -7303,16 +7303,16 @@ class PokeBattle_AI
 				fieldscore*=1.5 if opponent.hasType?(:NORMAL) || opponent.pbPartner.hasType?(:NORMAL)
 				fieldscore*=0.5 if attacker.hasType?(:NORMAL)
 				fieldscore*=0.5 if pbPartyHasType?(:NORMAL)
-				fieldscore*=1.4 if opponent.ability == :CLOUDNINE
-				fieldscore*=0.6 if attacker.ability == :CLOUDNINE
+				fieldscore*=1.4 if opponent.hasAbility?(:CLOUDNINE)
+				fieldscore*=0.6 if attacker.hasAbility?(:CLOUDNINE)
 				fieldscore*=0.8 if attacker.pbHasMove?(:SONICBOOM)
 				fieldscore*=1.2 if checkAImoves([:SONICBOOM],aimem)
 			when :CORROSIVE # Corrosive field
 				fieldscore*=1.3 if opponent.hasType?(:POISON) || opponent.pbPartner.hasType?(:POISON)
 				fieldscore*=0.7 if attacker.hasType?(:POISON)
 				fieldscore*=0.7 if pbPartyHasType?(:POISON)
-				fieldscore*=1.5 if opponent.ability == :CORROSION
-				fieldscore*=0.5 if attacker.ability == :CORROSION
+				fieldscore*=1.5 if opponent.hasAbility?(:CORROSION)
+				fieldscore*=0.5 if attacker.hasAbility?(:CORROSION)
 				fieldscore*=0.7 if attacker.pbHasMove?(:SLEEPPOWDER)
 				fieldscore*=1.3 if checkAImoves([:SLEEPPOWDER],aimem)
 			when :CORROSIVEMIST # Corromist field
@@ -7329,8 +7329,8 @@ class PokeBattle_AI
 					fieldscore*=1.4
 				end
 				fieldscore*=1.4 if !pbPartyHasType?(:POISON)
-				fieldscore*=1.5 if opponent.ability == :CORROSION
-				fieldscore*=0.5 if attacker.ability == :CORROSION
+				fieldscore*=1.5 if opponent.hasAbility?(:CORROSION)
+				fieldscore*=0.5 if attacker.hasAbility?(:CORROSION)
 				fieldscore*=1.5 if opponent.hasType?(:FIRE) || opponent.pbPartner.hasType?(:FIRE)
 				fieldscore*=0.8  if attacker.hasType?(:FIRE)
 				fieldscore*=0.8  if pbPartyHasType?(:FIRE)
@@ -7341,8 +7341,8 @@ class PokeBattle_AI
 				fieldscore*=0.5 if opponent.hasType?(:ELECTRIC) || opponent.pbPartner.hasType?(:WATER)
 				fieldscore*=0.7 if pbPartyHasType?(:GROUND)
 				fieldscore*=1.5 if pbPartyHasType?(:WATER) || pbPartyHasType?(:ELECTRIC)
-				fieldscore*=1.3 if opponent.ability == :SANDRUSH && @battle.pbWeather!=:SANDSTORM
-				fieldscore*=0.7 if attacker.ability == :SANDRUSH && @battle.pbWeather!=:SANDSTORM
+				fieldscore*=1.3 if opponent.hasAbility?(:SANDRUSH) && @battle.pbWeather!=:SANDSTORM
+				fieldscore*=0.7 if attacker.hasAbility?(:SANDRUSH) && @battle.pbWeather!=:SANDSTORM
 			when :ICY # Icy field
 				fieldscore*=1.3 if opponent.hasType?(:ICE) || opponent.pbPartner.hasType?(:ICE)
 				fieldscore*=0.5 if attacker.hasType?(:ICE)
@@ -7350,8 +7350,8 @@ class PokeBattle_AI
 				fieldscore*=0.5 if opponent.hasType?(:FIRE) || opponent.pbPartner.hasType?(:FIRE)
 				fieldscore*=1.1 if attacker.hasType?(:FIRE)
 				fieldscore*=1.1 if pbPartyHasType?(:FIRE)
-				fieldscore*=1.3 if opponent.ability == :SLUSHRUSH && @battle.pbWeather!=:HAIL
-				fieldscore*=0.7 if attacker.ability == :SLUSHRUSH && @battle.pbWeather!=:HAIL
+				fieldscore*=1.3 if opponent.hasAbility?(:SLUSHRUSH) && @battle.pbWeather!=:HAIL
+				fieldscore*=0.7 if attacker.hasAbility?(:SLUSHRUSH) && @battle.pbWeather!=:HAIL
 			when :ROCKY # Rocky field
 				fieldscore*=1.5 if opponent.hasType?(:ROCK) || opponent.pbPartner.hasType?(:ROCK)
 				fieldscore*=0.5 if attacker.hasType?(:ROCK)
@@ -7381,8 +7381,8 @@ class PokeBattle_AI
 				fieldscore*=1.4 if opponent.hasType?(:ELECTRIC) || opponent.pbPartner.hasType?(:ELECTRIC)
 				fieldscore*=0.6 if attacker.hasType?(:ELECTRIC)
 				fieldscore*=0.6 if pbPartyHasType?(:ELECTRIC)
-				fieldscore*=1.3 if opponent.ability == :SURGESURFER
-				fieldscore*=0.7 if attacker.ability == :SURGESURFER
+				fieldscore*=1.3 if opponent.hasAbility?(:SURGESURFER)
+				fieldscore*=0.7 if attacker.hasAbility?(:SURGESURFER)
 				fieldscore*=1.3 if opponent.hasType?(:DARK) || opponent.pbPartner.hasType?(:DARK) || opponent.hasType?(:GHOST) || opponent.pbPartner.hasType?(:GHOST)
 				fieldscore*=0.7 if attacker.hasType?(:DARK) || attacker.hasType?(:GHOST)
 				fieldscore*=0.7 if pbPartyHasType?(:DARK) || pbPartyHasType?(:GHOST)
@@ -7394,8 +7394,8 @@ class PokeBattle_AI
 				fieldscore*=1.3 if opponent.hasType?(:FIGHTING) || opponent.pbPartner.hasType?(:FIGHTING) || opponent.hasType?(:PSYCHIC) || opponent.pbPartner.hasType?(:PSYCHIC)
 				fieldscore*=0.7 if attacker.hasType?(:FIGHTING) || attacker.hasType?(:PSYCHIC)
 				fieldscore*=0.7 if pbPartyHasType?(:FIGHTING) || pbPartyHasType?(:PSYCHIC)
-				fieldscore*=1.3 if opponent.ability == :SANDRUSH && @battle.pbWeather!=:SANDSTORM
-				fieldscore*=0.7 if attacker.ability == :SANDRUSH && @battle.pbWeather!=:SANDSTORM
+				fieldscore*=1.3 if opponent.hasAbility?(:SANDRUSH) && @battle.pbWeather!=:SANDSTORM
+				fieldscore*=0.7 if attacker.hasAbility?(:SANDRUSH) && @battle.pbWeather!=:SANDSTORM
 			when :WATERSURFACE # Water Surface field
 				fieldscore*=1.6 if opponent.hasType?(:WATER) || opponent.pbPartner.hasType?(:WATER)
 				if attacker.hasType?(:WATER)
@@ -7404,10 +7404,10 @@ class PokeBattle_AI
 					fieldscore*=1.3
 				end
 				fieldscore*=0.4 if pbPartyHasType?(:WATER)
-				fieldscore*=1.3 if opponent.ability == :SWIFTSWIM && @battle.pbWeather!=:RAINDANCE
-				fieldscore*=0.7 if attacker.ability == :SWIFTSWIM && @battle.pbWeather!=:RAINDANCE
-				fieldscore*=1.3 if opponent.ability == :SURGESURFER
-				fieldscore*=0.7 if attacker.ability == :SURGESURFER
+				fieldscore*=1.3 if opponent.hasAbility?(:SWIFTSWIM) && @battle.pbWeather!=:RAINDANCE
+				fieldscore*=0.7 if attacker.hasAbility?(:SWIFTSWIM) && @battle.pbWeather!=:RAINDANCE
+				fieldscore*=1.3 if opponent.hasAbility?(:SURGESURFER)
+				fieldscore*=0.7 if attacker.hasAbility?(:SURGESURFER)
 				fieldscore*=1.3 if !attacker.hasType?(:POISON) && @battle.field.counter==1
 			when :UNDERWATER # Underwater field
 				fieldscore*=2.0 if opponent.hasType?(:WATER) || opponent.pbPartner.hasType?(:WATER)
@@ -7420,10 +7420,10 @@ class PokeBattle_AI
 				fieldscore*=1.2 if attacker.attack > attacker.spatk
 				fieldscore*=0.8 if opponent.attack > opponent.spatk
 				fieldscore*=0.1 if pbPartyHasType?(:WATER)
-				fieldscore*=0.9 if opponent.ability == :SWIFTSWIM
-				fieldscore*=1.1 if attacker.ability == :SWIFTSWIM
-				fieldscore*=1.1 if opponent.ability == :SURGESURFER
-				fieldscore*=0.9 if attacker.ability == :SURGESURFER
+				fieldscore*=0.9 if opponent.hasAbility?(:SWIFTSWIM)
+				fieldscore*=1.1 if attacker.hasAbility?(:SWIFTSWIM)
+				fieldscore*=1.1 if opponent.hasAbility?(:SURGESURFER)
+				fieldscore*=0.9 if attacker.hasAbility?(:SURGESURFER)
 				fieldscore*=1.3 if !attacker.hasType?(:POISON) && @battle.field.counter==1
 			when :CAVE # Cave field
 				fieldscore*=1.5 if opponent.hasType?(:ROCK) || opponent.pbPartner.hasType?(:ROCK)
@@ -7464,10 +7464,10 @@ class PokeBattle_AI
 					fieldscore*=1.3
 				end
 				fieldscore*=0.4 if pbPartyHasType?(:WATER)
-				fieldscore*=1.3 if opponent.ability == :SWIFTSWIM && @battle.pbWeather!=:RAINDANCE
-				fieldscore*=0.7 if attacker.ability == :SWIFTSWIM && @battle.pbWeather!=:RAINDANCE
-				fieldscore*=1.3 if opponent.ability == :SURGESURFER
-				fieldscore*=0.7 if attacker.ability == :SURGESURFER
+				fieldscore*=1.3 if opponent.hasAbility?(:SWIFTSWIM) && @battle.pbWeather!=:RAINDANCE
+				fieldscore*=0.7 if attacker.hasAbility?(:SWIFTSWIM) && @battle.pbWeather!=:RAINDANCE
+				fieldscore*=1.3 if opponent.hasAbility?(:SURGESURFER)
+				fieldscore*=0.7 if attacker.hasAbility?(:SURGESURFER)
 				fieldscore*=1.3 if opponent.hasType?(:STEEL) || opponent.pbPartner.hasType?(:STEEL) || opponent.hasType?(:POISON) || opponent.pbPartner.hasType?(:POISON)
 				if attacker.hasType?(:POISON)
 					fieldscore*=0.7
@@ -7486,8 +7486,8 @@ class PokeBattle_AI
 				fieldscore*=0.5 if opponent.hasType?(:FIRE) || opponent.pbPartner.hasType?(:FIRE)
 				fieldscore*=1.5 if attacker.hasType?(:FIRE)
 				fieldscore*=1.5 if pbPartyHasType?(:FIRE)
-				fieldscore*=1.3 if opponent.ability == :SLUSHRUSH && @battle.pbWeather!=:HAIL
-				fieldscore*=0.7 if attacker.ability == :SLUSHRUSH && @battle.pbWeather!=:HAIL
+				fieldscore*=1.3 if opponent.hasAbility?(:SLUSHRUSH) && @battle.pbWeather!=:HAIL
+				fieldscore*=0.7 if attacker.hasAbility?(:SLUSHRUSH) && @battle.pbWeather!=:HAIL
 			when :HOLY # Holy field
 				fieldscore*=1.4 if opponent.hasType?(:NORMAL) || opponent.pbPartner.hasType?(:NORMAL) || opponent.hasType?(:FAIRY) || opponent.pbPartner.hasType?(:FAIRY)
 				fieldscore*=0.6 if attacker.hasType?(:NORMAL) || attacker.hasType?(:FAIRY)
@@ -7515,8 +7515,8 @@ class PokeBattle_AI
 				fieldscore*=1.5 if opponent.hasType?(:DRAGON) || opponent.pbPartner.hasType?(:DRAGON) || opponent.hasType?(:STEEL) || opponent.pbPartner.hasType?(:STEEL) || opponent.hasType?(:FAIRY) || opponent.pbPartner.hasType?(:FAIRY)
 				fieldscore*=0.5 if attacker.hasType?(:DRAGON) || attacker.hasType?(:STEEL) || attacker.hasType?(:FAIRY)
 				fieldscore*=0.5 if pbPartyHasType?(:DRAGON) || pbPartyHasType?(:STEEL) || pbPartyHasType?(:FAIRY)
-				fieldscore*=1.3 if opponent.ability == :STANCECHANGE
-				fieldscore*=0.7 if attacker.ability == :STANCECHANGE
+				fieldscore*=1.3 if opponent.hasAbility?(:STANCECHANGE)
+				fieldscore*=0.7 if attacker.hasAbility?(:STANCECHANGE)
 			when :DRAGONSDEN # Dragon's Den field
 				fieldscore*=1.7 if opponent.hasType?(:DRAGON) || opponent.pbPartner.hasType?(:DRAGON)
 				fieldscore*=0.3 if attacker.hasType?(:DRAGON)
@@ -7524,8 +7524,8 @@ class PokeBattle_AI
 				fieldscore*=1.5 if opponent.hasType?(:FIRE) || opponent.pbPartner.hasType?(:FIRE)
 				fieldscore*=0.5 if attacker.hasType?(:FIRE)
 				fieldscore*=0.5 if pbPartyHasType?(:FIRE)
-				fieldscore*=1.3 if opponent.ability == :MULTISCALE
-				fieldscore*=0.7 if attacker.ability == :MULTISCALE
+				fieldscore*=1.3 if opponent.hasAbility?(:MULTISCALE)
+				fieldscore*=0.7 if attacker.hasAbility?(:MULTISCALE)
 			when :FLOWERGARDEN4 # Flower Garden field
 				fieldscore*=1.5  if opponent.hasType?(:BUG) || opponent.pbPartner.hasType?(:BUG) || opponent.hasType?(:GRASS) || opponent.pbPartner.hasType?(:GRASS)
 				fieldscore*=0.33 if attacker.hasType?(:GRASS) || attacker.hasType?(:BUG)
@@ -7560,8 +7560,8 @@ class PokeBattle_AI
 				fieldscore*=1.7 if opponent.hasType?(:PSYCHIC) || opponent.pbPartner.hasType?(:PSYCHIC)
 				fieldscore*=0.3 if attacker.hasType?(:PSYCHIC)
 				fieldscore*=0.3 if pbPartyHasType?(:PSYCHIC)
-				fieldscore*=1.3 if opponent.ability == :TELEPATHY
-				fieldscore*=0.7 if attacker.ability == :TELEPATHY
+				fieldscore*=1.3 if opponent.hasAbility?(:TELEPATHY)
+				fieldscore*=0.7 if attacker.hasAbility?(:TELEPATHY)
 		end
 		fieldscore*=0.01
 		return fieldscore
@@ -7733,7 +7733,7 @@ class PokeBattle_AI
 				itemscore*=0.7 if eff2>4
 				itemscore*=1.1 if eff2<4
 				itemscore*=1.2 if eff2==0
-				itemscore*=0.7 if @attacker.ability == :REGENERATOR && partynumber>1
+				itemscore*=0.7 if @attacker.hasAbility?(:REGENERATOR) && partynumber>1
 			end
 			if PBStuff::STATUSITEMS.include?(i)
 				PBDebug.log(sprintf("This is a status-curing item.")) if $INTERNAL
@@ -7748,28 +7748,28 @@ class PokeBattle_AI
 						end
 					end
 					if @attacker.status== :SLEEP
-						itemscore*=0.6 if @attacker.pbHasMove?(:SLEEPTALK) || @attacker.pbHasMove?(:SNORE) || @attacker.pbHasMove?(:REST) || @attacker.ability == :COMATOSE
-						itemscore*=1.3 if checkAImoves([:DREAMEATER,:NIGHTMARE],aimem) || opponent1.ability == :BADDREAMS
+						itemscore*=0.6 if @attacker.pbHasMove?(:SLEEPTALK) || @attacker.pbHasMove?(:SNORE) || @attacker.pbHasMove?(:REST) || @attacker.hasAbility?(:COMATOSE)
+						itemscore*=1.3 if checkAImoves([:DREAMEATER,:NIGHTMARE],aimem) || opponent1.hasAbility?(:BADDREAMS)
 						itemscore*= highdamage > 0.2 * @attacker.hp ? 1.3 : 0.7
 					end
 					if @attacker.status== :PARALYSIS
-						itemscore*=0.5 if @attacker.ability == :QUICKFEET || @attacker.ability == :GUTS
+						itemscore*=0.5 if @attacker.hasAbility?(:QUICKFEET) || @attacker.hasAbility?(:GUTS)
 						itemscore*=1.3 if @attacker.pbSpeed>opponent1.pbSpeed && (@attacker.pbSpeed*0.5)<opponent1.pbSpeed
 						itemscore*=1.1
 					end
 					if @attacker.status== :BURN
 						itemscore*=1.1
 						itemscore*= @attacker.attack>@attacker.spatk ? 1.2 : 0.8
-						itemscore*=0.6 if @attacker.ability == :GUTS
-						itemscore*=0.7 if @attacker.ability == :MAGICGUARD
-						itemscore*=0.8 if @attacker.ability == :FLAREBOOST
+						itemscore*=0.6 if @attacker.hasAbility?(:GUTS)
+						itemscore*=0.7 if @attacker.hasAbility?(:MAGICGUARD)
+						itemscore*=0.8 if @attacker.hasAbility?(:FLAREBOOST)
 					end
 					if @attacker.status== :POISON
 						itemscore*=1.1
-						itemscore*=0.5 if @attacker.ability == :GUTS
-						itemscore*=0.5 if @attacker.ability == :MAGICGUARD
-						itemscore*=0.5 if @attacker.ability == :TOXICBOOST
-						itemscore*=0.2 if @attacker.ability == :POISONHEAL
+						itemscore*=0.5 if @attacker.hasAbility?(:GUTS)
+						itemscore*=0.5 if @attacker.hasAbility?(:MAGICGUARD)
+						itemscore*=0.5 if @attacker.hasAbility?(:TOXICBOOST)
+						itemscore*=0.2 if @attacker.hasAbility?(:POISONHEAL)
 						itemscore*=1.1 if @attacker.effects[:Toxic]>0
 						itemscore*=1.5 if @attacker.effects[:Toxic]>3
 					end
@@ -7780,8 +7780,8 @@ class PokeBattle_AI
 					end
 				end
 				itemscore*=0.5 if @attacker.pbHasMove?(:REFRESH) || @attacker.pbHasMove?(:REST) || @attacker.pbHasMove?(:PURIFY)
-				itemscore*=0.2 if @attacker.ability == :NATURALCURE && partynumber>1
-				itemscore*=0.3 if @attacker.ability == :SHEDSKIN
+				itemscore*=0.2 if @attacker.hasAbility?(:NATURALCURE) && partynumber>1
+				itemscore*=0.3 if @attacker.hasAbility?(:SHEDSKIN)
 				
 			end
 			# General "Is it a good idea to use an item at all right now" checks
@@ -7941,13 +7941,13 @@ class PokeBattle_AI
 			#speed changing
 			pbStatChangingSwitch(i)
 			pbStatChangingSwitch(nonmegaform)
-			if i.ability == :MIMICRY
+			if i.hasAbility?(:MIMICRY)
 				type = :NORMAL
 				type = @battle.field.mimicry
 				i.type1=type
 				i.type2=type
 			end
-			if (i.ability == :IMPOSTER)
+			if (i.hasAbility?(:IMPOSTER))
 				transformed = true
 				i = pbMakeFakeBattler(@opponent.pokemon)
 				i.hp = nonmegaform.hp
@@ -8136,16 +8136,16 @@ class PokeBattle_AI
 				end
 				if theseRoles.include?(:WEATHERSETTER)
 					rolescore+=30
-					if (i.ability == :DROUGHT) || (nonmegaform.ability == :DROUGHT) || i.pbHasMove?(:SUNNYDAY)
+					if (i.hasAbility?(:DROUGHT)) || (nonmegaform.hasAbility?(:DROUGHT)) || i.pbHasMove?(:SUNNYDAY)
 						rolescore+=60 if @battle.weather!=:SUNNYDAY
-					elsif (i.ability == :DRIZZLE) || (nonmegaform.ability == :DRIZZLE) || i.pbHasMove?(:RAINDANCE)
+					elsif (i.hasAbility?(:DRIZZLE)) || (nonmegaform.hasAbility?(:DRIZZLE)) || i.pbHasMove?(:RAINDANCE)
 						rolescore+=60 if @battle.weather!=:RAINDANCE
-					elsif (i.ability == :SANDSTREAM) || (nonmegaform.ability == :SANDSTREAM) || (i.ability == :SANDSPIT) || (nonmegaform.ability == :SANDSPIT) || i.pbHasMove?(:SANDSTORM)
+					elsif (i.hasAbility?(:SANDSTREAM)) || (nonmegaform.hasAbility?(:SANDSTREAM)) || (i.hasAbility?(:SANDSPIT)) || (nonmegaform.hasAbility?(:SANDSPIT)) || i.pbHasMove?(:SANDSTORM)
 						rolescore+=60 if @battle.weather!=:SANDSTORM
-					elsif (i.ability == :SNOWWARNING) || (nonmegaform.ability == :SNOWWARNING) || i.pbHasMove?(:HAIL)
+					elsif (i.hasAbility?(:SNOWWARNING)) || (nonmegaform.hasAbility?(:SNOWWARNING)) || i.pbHasMove?(:HAIL)
 						rolescore+=60 if @battle.weather!=:HAIL
-					elsif (i.ability == :PRIMORDIALSEA) || (i.ability == :DESOLATELAND) || (i.ability == :DELTASTREAM) ||
-						(nonmegaform.ability == :PRIMORDIALSEA) || (nonmegaform.ability == :DESOLATELAND) || (nonmegaform.ability == :DELTASTREAM)
+					elsif (i.hasAbility?(:PRIMORDIALSEA)) || (i.hasAbility?(:DESOLATELAND)) || (i.hasAbility?(:DELTASTREAM)) ||
+						(nonmegaform.hasAbility?(:PRIMORDIALSEA)) || (nonmegaform.hasAbility?(:DESOLATELAND)) || (nonmegaform.hasAbility?(:DELTASTREAM))
 						rolescore+=60
 					end
 				end
@@ -8156,21 +8156,21 @@ class PokeBattle_AI
 			weatherscore=0
 			case @battle.weather
 				when :HAIL
-					weatherscore+=25 if (i.ability == :MAGICGUARD) || (i.ability == :OVERCOAT) || i.hasType?(:ICE)
-					weatherscore+=50 if (i.ability == :SNOWCLOAK) || (i.ability == :ICEBODY)
-					weatherscore+=80 if (i.ability == :SLUSHRUSH)
-					weatherscore+=30 if (i.ability == :ICEFACE) && i.form == 1
+					weatherscore+=25 if (i.hasAbility?(:MAGICGUARD)) || (i.hasAbility?(:OVERCOAT)) || i.hasType?(:ICE)
+					weatherscore+=50 if (i.hasAbility?(:SNOWCLOAK)) || (i.hasAbility?(:ICEBODY))
+					weatherscore+=80 if (i.hasAbility?(:SLUSHRUSH))
+					weatherscore+=30 if (i.hasAbility?(:ICEFACE)) && i.form == 1
 				when :RAINDANCE
-					weatherscore+=50 if (i.ability == :DRYSKIN) || (i.ability == :HYDRATION) || (i.ability == :RAINDISH)
-					weatherscore+=80 if (i.ability == :SWIFTSWIM)
+					weatherscore+=50 if (i.hasAbility?(:DRYSKIN)) || (i.hasAbility?(:HYDRATION)) || (i.hasAbility?(:RAINDISH))
+					weatherscore+=80 if (i.hasAbility?(:SWIFTSWIM))
 				when :SUNNYDAY
-					weatherscore-=40 if (i.ability == :DRYSKIN)
-					weatherscore+=50 if (i.ability == :SOLARPOWER)
-					weatherscore+=80 if (i.ability == :CHLOROPHYLL)
+					weatherscore-=40 if (i.hasAbility?(:DRYSKIN))
+					weatherscore+=50 if (i.hasAbility?(:SOLARPOWER))
+					weatherscore+=80 if (i.hasAbility?(:CHLOROPHYLL))
 				when :SANDSTORM
-					weatherscore+=25 if (i.ability == :MAGICGUARD) || (i.ability == :OVERCOAT) || i.hasType?(:ROCK) || i.hasType?(:GROUND) || i.hasType?(:STEEL)
-					weatherscore+=50 if (i.ability == :SANDVEIL) || (i.ability == :SANDFORCE)
-					weatherscore+=80 if (i.ability == :SANDRUSH)
+					weatherscore+=25 if (i.hasAbility?(:MAGICGUARD)) || (i.hasAbility?(:OVERCOAT)) || i.hasType?(:ROCK) || i.hasType?(:GROUND) || i.hasType?(:STEEL)
+					weatherscore+=50 if (i.hasAbility?(:SANDVEIL)) || (i.hasAbility?(:SANDFORCE))
+					weatherscore+=80 if (i.hasAbility?(:SANDRUSH))
 			end
 			if @battle.trickroom>0
 				weatherscore+= i.pbSpeed<@opponent.pbSpeed ? 50 : -50
@@ -8182,8 +8182,8 @@ class PokeBattle_AI
 			movesscore=0
 			if @mondata.skill>=HIGHSKILL
 				if @attacker.pbOwnSide.effects[:ToxicSpikes] > 0
-					movesscore+=80 if nonmegaform.hasType?(:POISON) && !nonmegaform.hasType?(:FLYING) && !(nonmegaform.ability == :LEVITATE)
-					movesscore+=30 if nonmegaform.hasType?(:FLYING) || nonmegaform.hasType?(:STEEL) || (nonmegaform.ability == :LEVITATE)
+					movesscore+=80 if nonmegaform.hasType?(:POISON) && !nonmegaform.hasType?(:FLYING) && !(nonmegaform.hasAbility?(:LEVITATE))
+					movesscore+=30 if nonmegaform.hasType?(:FLYING) || nonmegaform.hasType?(:STEEL) || (nonmegaform.hasAbility?(:LEVITATE))
 				end
 				if i.pbHasMove?(:CLEARSMOG) || i.pbHasMove?(:HAZE)
 					movesscore+= (10)* statchangecounter(@opponent,1,7,1)
@@ -8204,8 +8204,8 @@ class PokeBattle_AI
 				end
 				if i.pbHasMove?(:PURSUIT) || (i.pbHasMove?(:SANDSTORM) || i.pbHasMove?(:HAIL)) && @opponent.item != :SAFETYGOGGLES ||
 					 i.pbHasMove?(:TOXIC) || i.pbHasMove?(:LEECHSEED)
-					movesscore+=150 if (@opponent.ability == :WONDERGUARD)
-					movesscore+=150 if (@opponent.pbPartner.ability == :WONDERGUARD)
+					movesscore+=150 if (@opponent.hasAbility?(:WONDERGUARD))
+					movesscore+=150 if (@opponent.pbPartner.hasAbility?(:WONDERGUARD))
 				end
 			end
 			monscore+=movesscore
@@ -8245,7 +8245,7 @@ class PokeBattle_AI
 						abilityscore+=15 if checkAImoves(PBStuff::PARAMOVE,aimem)
 						abilityscore+=15 if checkAImoves(PBStuff::PARAMOVE,aimem2)
 					when :OBLIVIOUS
-						abilityscore+=20 if (@opponent.ability == :CUTECHARM) || (@opponent.pbPartner.ability == :CUTECHARM)
+						abilityscore+=20 if (@opponent.hasAbility?(:CUTECHARM)) || (@opponent.pbPartner.hasAbility?(:CUTECHARM))
 						abilityscore+=20 if checkAImoves([:ATTRACT],aimem)
 						abilityscore+=20 if checkAImoves([:ATTRACT],aimem2)
 					when :COMPOUNDEYES
@@ -8267,7 +8267,7 @@ class PokeBattle_AI
 					when :WATERBUBBLE,:WATERVEIL,:FLAREBOOST
 						if checkAImoves(PBStuff::BURNMOVE,aimem)
 							abilityscore+=10
-							abilityscore+=10 if (i.ability == :FLAREBOOST)
+							abilityscore+=10 if (i.hasAbility?(:FLAREBOOST))
 						end
 					when :OWNTEMPO
 						abilityscore+=20 if checkAImoves(PBStuff::CONFUMOVE,aimem)
@@ -8317,7 +8317,7 @@ class PokeBattle_AI
 						abilityscore-=90 if instantdievar
 					when :EFFECTSPORE,:STATIC,:POISONPOINT,:ROUGHSKIN,:IRONBARBS,:FLAMEBODY,:CUTECHARM,:MUMMY,:AFTERMATH,:GOOEY,:FLUFFY,:PERISHBODY,:WANDERINGSPIRIT
 						if checkAIbestMove(@opponent).contactMove? || (@opponent.pbPartner.hp > 0 && checkAIbestMove(@opponent.pbPartner).contactMove?)
-							abilityscore+=30 unless i.ability == :FLUFFY && (@opponent.hasType?(:FIRE) || @opponent.pbPartner.hasType?(:FIRE))
+							abilityscore+=30 unless i.hasAbility?(:FLUFFY) && (@opponent.hasType?(:FIRE) || @opponent.pbPartner.hasType?(:FIRE))
 						end
 					when :COTTONDOWN
 						if incomingpercentage<0.5
@@ -8331,8 +8331,8 @@ class PokeBattle_AI
 						if [:WATERABSORB,:VOLTABSORB,:STORMDRAIN,:MOTORDRIVE,:FLASHFIRE,:LEVITATE,:LIGHTNINGROD,
 							:SAPSIPPER,:DRYSKIN,:SLUSHRUSH,:SANDRUSH,:SWIFTSWIM,:CHLOROPHYLL,:SPEEDBOOST,
 							:WONDERGUARD,:PRANKSTER].include?(@opponent.ability) || 
-							(pbAIfaster?() && ((@opponent.ability == :ADAPTABILITY) || (@opponent.ability == :DOWNLOAD) || (@opponent.ability == :PROTEAN) || (@opponent.ability == :LIBERO))) || 
-							(@opponent.attack>@opponent.spatk && (@opponent.ability == :INTIMIDATE)) || (@opponent.ability == :UNAWARE) || (i.hp==i.totalhp && ((@opponent.ability == :MULTISCALE) || (@opponent.ability == :SHADOWSHIELD)))
+							(pbAIfaster?() && ((@opponent.hasAbility?(:ADAPTABILITY)) || (@opponent.hasAbility?(:DOWNLOAD)) || (@opponent.hasAbility?(:PROTEAN)) || (@opponent.hasAbility?(:LIBERO)))) || 
+							(@opponent.attack>@opponent.spatk && (@opponent.hasAbility?(:INTIMIDATE))) || (@opponent.hasAbility?(:UNAWARE)) || (i.hp==i.totalhp && ((@opponent.hasAbility?(:MULTISCALE)) || (@opponent.hasAbility?(:SHADOWSHIELD))))
 							abilityscore+=60
 						end
 					when :MAGMAARMOR
@@ -8373,8 +8373,8 @@ class PokeBattle_AI
 					when :RATTLED
 						abilityscore+=15 if [:DARK,:GHOST, :BUG].include?(checkAIbestMove().pbType(@opponent)) || (@opponent.pbPartner.hp > 0 && [:DARK,:GHOST, :BUG].include?(checkAIbestMove(@opponent.pbPartner).pbType(@opponent.pbPartner)))
 					when :IRONBARBS,:ROUGHSKIN
-						abilityscore+=30 if (@opponent.ability == :SKILLLINK)
-						abilityscore+=30 if (@opponent.pbPartner.hp > 0 && @opponent.pbPartner.ability == :SKILLLINK)
+						abilityscore+=30 if (@opponent.hasAbility?(:SKILLLINK))
+						abilityscore+=30 if (@opponent.pbPartner.hp > 0 && @opponent.pbPartner.hasAbility?(:SKILLLINK))
 					when :PRANKSTER
 						abilityscore+=50 if !pbAIfaster?(nil,nil,i,@opponent) && !@opponent.hasType?(:DARK)
 						abilityscore+=50 if (@opponent.pbPartner.hp > 0 && !pbAIfaster?(nil,nil,i,@opponent.pbPartner) && !@opponent.pbPartner.hasType?(:DARK))
@@ -8384,8 +8384,8 @@ class PokeBattle_AI
 					when :BULLETPROOF
 						abilityscore+=60 if (PBStuff::BULLETMOVE).include?(checkAIbestMove().move) || (@opponent.pbPartner.hp > 0 && (PBStuff::BULLETMOVE).include?(checkAIbestMove(@opponent.pbPartner).move))
 					when :AURABREAK
-						abilityscore+=50 if (@opponent.ability == :FAIRYAURA) || (@opponent.ability == :DARKAURA)
-						abilityscore+=50 if (@opponent.pbPartner.hp > 0 && (@opponent.pbPartner.ability == :FAIRYAURA) || (@opponent.pbPartner.ability == :DARKAURA))
+						abilityscore+=50 if (@opponent.hasAbility?(:FAIRYAURA)) || (@opponent.hasAbility?(:DARKAURA))
+						abilityscore+=50 if (@opponent.pbPartner.hp > 0 && (@opponent.pbPartner.hasAbility?(:FAIRYAURA)) || (@opponent.pbPartner.hasAbility?(:DARKAURA)))
 					when :PROTEAN, :LIBERO
 						abilityscore+=40 if pbAIfaster?(nil,nil,i,@opponent) || (@opponent.pbPartner.hp > 0 && pbAIfaster?(nil,nil,i,@opponent.pbPartner))
 					when :DANCER
@@ -8397,8 +8397,8 @@ class PokeBattle_AI
 						abilityscore+=20 if checkAIpriority(aimem)
 						abilityscore+=20 if checkAIpriority(aimem2) && @mondata.skill>=BESTSKILL
 					when :SANDSTREAM,:SNOWWARNING,:SANDSTREAM,:SNOWWARNING,:SANDSPIT
-						abilityscore+=70 if (@opponent.ability == :WONDERGUARD)
-						abilityscore+=70 if (@opponent.pbPartner.hp > 0 && (@opponent.pbPartner.ability == :WONDERGUARD))
+						abilityscore+=70 if (@opponent.hasAbility?(:WONDERGUARD))
+						abilityscore+=70 if (@opponent.pbPartner.hp > 0 && (@opponent.pbPartner.hasAbility?(:WONDERGUARD)))
 					when :DEFEATIST
 						abilityscore -= 80 if @attacker.hp != 0 # hard switch
 					when :STURDY
@@ -8417,7 +8417,7 @@ class PokeBattle_AI
 				end
 			end
 			if transformed  #pokemon has imposter ability. because we copy pokemon, we can use i to see ability opponent
-				abilityscore+=50 if (i.ability == :PUREPOWER) || (i.ability == :HUGEPOWER) || (i.ability == :MOXIE) || (i.ability == :CHILLINGNEIGH) || (i.ability == :GRIMNEIGH) || (i.ability == :SPEEDBOOST) || (i.ability == :BEASTBOOST) || (i.ability == :SOULHEART) || (i.ability == :WONDERGUARD) || (i.ability == :PROTEAN) || (i.ability == :LIBERO)
+				abilityscore+=50 if (i.hasAbility?(:PUREPOWER)) || (i.hasAbility?(:HUGEPOWER)) || (i.hasAbility?(:MOXIE)) || (i.hasAbility?(:CHILLINGNEIGH)) || (i.hasAbility?(:GRIMNEIGH)) || (i.hasAbility?(:SPEEDBOOST)) || (i.hasAbility?(:BEASTBOOST)) || (i.hasAbility?(:SOULHEART)) || (i.hasAbility?(:WONDERGUARD)) || (i.hasAbility?(:PROTEAN)) || (i.hasAbility?(:LIBERO))
 				abilityscore+=30 if (i.level>nonmegaform.level) || pbGetMonRoles(@opponent).include?(:SWEEPER)
 				abilityscore = -200 if i.effects[:Substitute] > 0
 				abilityscore = -500 if i.species == :DITTO
@@ -8428,8 +8428,8 @@ class PokeBattle_AI
 			itemscore = 0
 			if @mondata.skill>=HIGHSKILL
 				if (i.item == :ROCKYHELMET)
-					itemscore+=30 if (@opponent.ability == :SKILLLINK)
-					itemscore+=30 if (@opponent.pbPartner.ability == :SKILLLINK)
+					itemscore+=30 if (@opponent.hasAbility?(:SKILLLINK))
+					itemscore+=30 if (@opponent.pbPartner.hasAbility?(:SKILLLINK))
 					itemscore+=30 if checkAIbestMove(@opponent).contactMove? || (@opponent.pbPartner.hp > 0 && checkAIbestMove(@opponent.pbPartner).contactMove?)
 				end
 				if (i.item == :AIRBALLOON)
@@ -8449,7 +8449,7 @@ class PokeBattle_AI
 				  itemscore+=10 if checkAImoves([:LOWKICK,:GRASSKNOT],aimem)
 				end
 				if (i.item == :DESTINYKNOT)
-				  itemscore+=20 if (@opponent.ability == :CUTECHARM)
+				  itemscore+=20 if (@opponent.hasAbility?(:CUTECHARM))
 				  itemscore+=20 if checkAImoves([:ATTRACT],aimem)
 				end
 				if (i.item == :ABSORBBULB)
@@ -8458,10 +8458,10 @@ class PokeBattle_AI
 				if (i.item == :CELLBATTERY)
 				  itemscore+=25 if :ELECTRIC == checkAIbestMove().pbType(@opponent) ||  (@opponent.pbPartner.hp > 0 && :ELECTRIC == checkAIbestMove(@opponent.pbPartner).pbType(@opponent.pbPartner))
 				end
-				if (((i.item == :FOCUSSASH) || (@battle.FE == :CHESS && i.pokemon.piece==:PAWN) || ((i.ability == :STURDY)))) && i.hp == i.totalhp
-					if 	(((@battle.weather== :SANDSTORM && !(i.hasType?(:ROCK) || i.hasType?(:GROUND) || i.hasType?(:STEEL)))  || (@battle.weather== :HAIL && !(i.hasType?(:ICE)))) && !((i.ability == :OVERCOAT)))  || @attacker.pbOwnSide.effects[:StealthRock] ||
+				if (((i.item == :FOCUSSASH) || (@battle.FE == :CHESS && i.pokemon.piece==:PAWN) || ((i.hasAbility?(:STURDY))))) && i.hp == i.totalhp
+					if 	(((@battle.weather== :SANDSTORM && !(i.hasType?(:ROCK) || i.hasType?(:GROUND) || i.hasType?(:STEEL)))  || (@battle.weather== :HAIL && !(i.hasType?(:ICE)))) && !((i.hasAbility?(:OVERCOAT))))  || @attacker.pbOwnSide.effects[:StealthRock] ||
 						@attacker.pbOwnSide.effects[:Spikes]>0 || @attacker.pbOwnSide.effects[:ToxicSpikes]>0
-						if !(i.ability == :MAGICGUARD)
+						if !(i.hasAbility?(:MAGICGUARD))
 							itemscore-=40
 						end
 					end
@@ -8476,7 +8476,7 @@ class PokeBattle_AI
 				  	itemscore+=25 if :ICE == checkAIbestMove().pbType(@opponent) ||  (@opponent.pbPartner.hp > 0 && :ICE == checkAIbestMove(@opponent.pbPartner).pbType(@opponent.pbPartner))
 				end
 				if (i.item == :PROTECTIVEPADS)
-					itemscore+=25 if (i.ability == :EFFECTSPORE) || (i.ability == :STATIC) || (i.ability == :POISONPOINT) || (i.ability == :ROUGHSKIN) || (i.ability == :WANDERINGSPIRIT) || (i.ability == :PERISHBODY)  || (i.ability == :IRONBARBS) || (i.ability == :FLAMEBODY) || (i.ability == :CUTECHARM) || (i.ability == :MUMMY) || (i.ability == :AFTERMATH) || (i.ability == :GOOEY) || ((i.ability == :FLUFFY) && (!@opponent.hasType?(:FIRE) && !@opponent.pbPartner.hasType?(:FIRE))) || (@opponent.item == :ROCKYHELMET)
+					itemscore+=25 if (i.hasAbility?(:EFFECTSPORE)) || (i.hasAbility?(:STATIC)) || (i.hasAbility?(:POISONPOINT)) || (i.hasAbility?(:ROUGHSKIN)) || (i.hasAbility?(:WANDERINGSPIRIT)) || (i.hasAbility?(:PERISHBODY))  || (i.hasAbility?(:IRONBARBS)) || (i.hasAbility?(:FLAMEBODY)) || (i.hasAbility?(:CUTECHARM)) || (i.hasAbility?(:MUMMY)) || (i.hasAbility?(:AFTERMATH)) || (i.hasAbility?(:GOOEY)) || ((i.hasAbility?(:FLUFFY)) && (!@opponent.hasType?(:FIRE) && !@opponent.pbPartner.hasType?(:FIRE))) || (@opponent.item == :ROCKYHELMET)
 				end
 				if i.item == :MAGICALSEED
 					itemscore+=75 if (@battle.FE == :NEWWORLD || @battle.FE == :INVERSE) && @attacker.hp != 0 #New World or Inverse Field, hard switch
@@ -8489,154 +8489,154 @@ class PokeBattle_AI
 			if @mondata.skill>=BESTSKILL
 			  case @battle.FE
 				when :ELECTERRAIN
-				  fieldscore+=50 if (i.ability == :SURGESURFER)
-				  fieldscore+=25 if (i.ability == :GALVANIZE)
-				  fieldscore+=25 if (i.ability == :TRANSISTOR)
+				  fieldscore+=50 if (i.hasAbility?(:SURGESURFER))
+				  fieldscore+=25 if (i.hasAbility?(:GALVANIZE))
+				  fieldscore+=25 if (i.hasAbility?(:TRANSISTOR))
 				  fieldscore+=25 if i.hasType?(:ELECTRIC)
 				when :GRASSY
-				  fieldscore+=30 if (i.ability == :GRASSPELT)
-				  fieldscore+=30 if (i.ability == :COTTONDOWN)
+				  fieldscore+=30 if (i.hasAbility?(:GRASSPELT))
+				  fieldscore+=30 if (i.hasAbility?(:COTTONDOWN))
 				  fieldscore+=25 if i.hasType?(:GRASS) || i.hasType?(:FIRE)
 				when :MISTY
 				  fieldscore+=20 if i.hasType?(:FAIRY)
-				  fieldscore+=20 if (i.ability == :MARVELSCALE)
-				  fieldscore+=20 if (i.ability == :DRYSKIN)
-				  fieldscore+=20 if (i.ability == :WATERCOMPACTION)
-				  fieldscore+=25 if (i.ability == :PIXILATE)
-				  fieldscore+=25 if (i.ability == :SOULHEART)
+				  fieldscore+=20 if (i.hasAbility?(:MARVELSCALE))
+				  fieldscore+=20 if (i.hasAbility?(:DRYSKIN))
+				  fieldscore+=20 if (i.hasAbility?(:WATERCOMPACTION))
+				  fieldscore+=25 if (i.hasAbility?(:PIXILATE))
+				  fieldscore+=25 if (i.hasAbility?(:SOULHEART))
 				when :DARKCRYSTALCAVERN
-				  fieldscore+=30 if (i.ability == :PRISMARMOR)
-				  fieldscore+=30 if (i.ability == :SHADOWSHIELD)
+				  fieldscore+=30 if (i.hasAbility?(:PRISMARMOR))
+				  fieldscore+=30 if (i.hasAbility?(:SHADOWSHIELD))
 				when :CHESS
-				  fieldscore+=10 if (i.ability == :ADAPTABILITY)
-				  fieldscore+=10 if (i.ability == :SYNCHRONIZE)
-				  fieldscore+=10 if (i.ability == :ANTICIPATION)
-				  fieldscore+=10 if (i.ability == :TELEPATHY)
+				  fieldscore+=10 if (i.hasAbility?(:ADAPTABILITY))
+				  fieldscore+=10 if (i.hasAbility?(:SYNCHRONIZE))
+				  fieldscore+=10 if (i.hasAbility?(:ANTICIPATION))
+				  fieldscore+=10 if (i.hasAbility?(:TELEPATHY))
 				when :BIGTOP
-				  fieldscore+=30 if (i.ability == :SHEERFORCE)
-				  fieldscore+=30 if (i.ability == :PUREPOWER)
-				  fieldscore+=30 if (i.ability == :HUGEPOWER)
-				  fieldscore+=30 if (i.ability == :GUTS)
-				  fieldscore+=10 if (i.ability == :DANCER)
+				  fieldscore+=30 if (i.hasAbility?(:SHEERFORCE))
+				  fieldscore+=30 if (i.hasAbility?(:PUREPOWER))
+				  fieldscore+=30 if (i.hasAbility?(:HUGEPOWER))
+				  fieldscore+=30 if (i.hasAbility?(:GUTS))
+				  fieldscore+=10 if (i.hasAbility?(:DANCER))
 				  fieldscore+=20 if i.hasType?(:FIGHTING)
-				  fieldscore+=20 if (i.ability == :PUNKROCK)
+				  fieldscore+=20 if (i.hasAbility?(:PUNKROCK))
 				when :BURNING
 				  fieldscore+=25 if i.hasType?(:FIRE)
-				  fieldscore+=15 if (i.ability == :WATERVEIL)
-				  fieldscore+=15 if (i.ability == :WATERBUBBLE)
-				  fieldscore+=30 if (i.ability == :FLASHFIRE)
-				  fieldscore+=30 if (i.ability == :FLAREBOOST)
-				  fieldscore+=30 if (i.ability == :BLAZE)
-				  fieldscore-=30 if (i.ability == :ICEBODY)
-				  fieldscore-=30 if (i.ability == :LEAFGUARD)
-				  fieldscore-=30 if (i.ability == :GRASSPELT)
-				  fieldscore-=30 if (i.ability == :FLUFFY)
+				  fieldscore+=15 if (i.hasAbility?(:WATERVEIL))
+				  fieldscore+=15 if (i.hasAbility?(:WATERBUBBLE))
+				  fieldscore+=30 if (i.hasAbility?(:FLASHFIRE))
+				  fieldscore+=30 if (i.hasAbility?(:FLAREBOOST))
+				  fieldscore+=30 if (i.hasAbility?(:BLAZE))
+				  fieldscore-=30 if (i.hasAbility?(:ICEBODY))
+				  fieldscore-=30 if (i.hasAbility?(:LEAFGUARD))
+				  fieldscore-=30 if (i.hasAbility?(:GRASSPELT))
+				  fieldscore-=30 if (i.hasAbility?(:FLUFFY))
 				when :SWAMP
-				  fieldscore+=15 if (i.ability == :GOOEY)
-				  fieldscore+=20 if (i.ability == :WATERCOMPACTION)
-				  fieldscore+=15 if (i.ability == :PROPELLERTAIL)
+				  fieldscore+=15 if (i.hasAbility?(:GOOEY))
+				  fieldscore+=20 if (i.hasAbility?(:WATERCOMPACTION))
+				  fieldscore+=15 if (i.hasAbility?(:PROPELLERTAIL))
 				when :RAINBOW
-				  fieldscore+=10 if (i.ability == :WONDERSKIN)
-				  fieldscore+=20 if (i.ability == :MARVELSCALE)
-				  fieldscore+=25 if (i.ability == :SOULHEART)
-				  fieldscore+=30 if (i.ability == :CLOUDNINE)
-				  fieldscore+=30 if (i.ability == :PRISMARMOR)
-				  fieldscore+=20 if (i.ability == :PASTELVEIL)
+				  fieldscore+=10 if (i.hasAbility?(:WONDERSKIN))
+				  fieldscore+=20 if (i.hasAbility?(:MARVELSCALE))
+				  fieldscore+=25 if (i.hasAbility?(:SOULHEART))
+				  fieldscore+=30 if (i.hasAbility?(:CLOUDNINE))
+				  fieldscore+=30 if (i.hasAbility?(:PRISMARMOR))
+				  fieldscore+=20 if (i.hasAbility?(:PASTELVEIL))
 				when :CORROSIVE
-				  fieldscore+=20 if (i.ability == :POISONHEAL)
-				  fieldscore+=25 if (i.ability == :TOXICBOOST)
-				  fieldscore+=30 if (i.ability == :MERCILESS)
-				  fieldscore+=30 if (i.ability == :CORROSION)
+				  fieldscore+=20 if (i.hasAbility?(:POISONHEAL))
+				  fieldscore+=25 if (i.hasAbility?(:TOXICBOOST))
+				  fieldscore+=30 if (i.hasAbility?(:MERCILESS))
+				  fieldscore+=30 if (i.hasAbility?(:CORROSION))
 				  fieldscore+=15 if i.hasType?(:POISON)
 				when :CORROSIVEMIST
-				  fieldscore+=10 if (i.ability == :WATERCOMPACTION)
-				  fieldscore+=20 if (i.ability == :POISONHEAL)
-				  fieldscore+=25 if (i.ability == :TOXICBOOST)
-				  fieldscore+=30 if (i.ability == :MERCILESS)
-				  fieldscore+=30 if (i.ability == :CORROSION)
+				  fieldscore+=10 if (i.hasAbility?(:WATERCOMPACTION))
+				  fieldscore+=20 if (i.hasAbility?(:POISONHEAL))
+				  fieldscore+=25 if (i.hasAbility?(:TOXICBOOST))
+				  fieldscore+=30 if (i.hasAbility?(:MERCILESS))
+				  fieldscore+=30 if (i.hasAbility?(:CORROSION))
 				  fieldscore+=15 if i.hasType?(:POISON)
 				when :DESERT
-				  fieldscore+=20 if ((i.ability == :SANDSTREAM) || (nonmegaform.ability == :SANDSTREAM) || (i.ability == :SANDSPIT) || (nonmegaform.ability == :SANDSPIT))
-				  fieldscore+=25 if (i.ability == :SANDVEIL)
-				  fieldscore+=30 if (i.ability == :SANDFORCE)
-				  fieldscore+=50 if (i.ability == :SANDRUSH)
+				  fieldscore+=20 if ((i.hasAbility?(:SANDSTREAM)) || (nonmegaform.hasAbility?(:SANDSTREAM)) || (i.hasAbility?(:SANDSPIT)) || (nonmegaform.hasAbility?(:SANDSPIT)))
+				  fieldscore+=25 if (i.hasAbility?(:SANDVEIL))
+				  fieldscore+=30 if (i.hasAbility?(:SANDFORCE))
+				  fieldscore+=50 if (i.hasAbility?(:SANDRUSH))
 				  fieldscore+=20 if i.hasType?(:GROUND)
 				  fieldscore-=25 if i.hasType?(:ELECTRIC)
 				when :ICY
 				  fieldscore+=25 if i.hasType?(:ICE)
-				  fieldscore+=25 if (i.ability == :ICEBODY)
-				  fieldscore+=25 if (i.ability == :SNOWCLOAK)
-				  fieldscore+=25 if (i.ability == :REFRIGERATE)
-				  fieldscore+=50 if (i.ability == :SLUSHRUSH)
+				  fieldscore+=25 if (i.hasAbility?(:ICEBODY))
+				  fieldscore+=25 if (i.hasAbility?(:SNOWCLOAK))
+				  fieldscore+=25 if (i.hasAbility?(:REFRIGERATE))
+				  fieldscore+=50 if (i.hasAbility?(:SLUSHRUSH))
 				when :ROCKY
-				  fieldscore-=15 if (i.ability == :GORILLATACTICS)
+				  fieldscore-=15 if (i.hasAbility?(:GORILLATACTICS))
 				when :FOREST
-				  fieldscore+=20 if (i.ability == :SAPSIPPER)
+				  fieldscore+=20 if (i.hasAbility?(:SAPSIPPER))
 				  fieldscore+=25 if i.hasType?(:GRASS) || i.hasType?(:BUG)
-				  fieldscore+=30 if (i.ability == :GRASSPELT)
-				  fieldscore+=30 if (i.ability == :OVERGROW)
-				  fieldscore+=30 if (i.ability == :SWARM)
+				  fieldscore+=30 if (i.hasAbility?(:GRASSPELT))
+				  fieldscore+=30 if (i.hasAbility?(:OVERGROW))
+				  fieldscore+=30 if (i.hasAbility?(:SWARM))
 				when :SUPERHEATED
 				  fieldscore+=15 if i.hasType?(:FIRE)
 				when :FACTORY
 				  fieldscore+=25 if i.hasType?(:ELECTRIC)
-				  fieldscore+=20 if (i.ability == :MOTORDRIVE)
-				  fieldscore+=20 if (i.ability == :STEELWORKER)
-				  fieldscore+=25 if (i.ability == :DOWNLOAD)
-				  fieldscore+=25 if (i.ability == :TECHNICIAN)
-				  fieldscore+=25 if (i.ability == :GALVANIZE)
+				  fieldscore+=20 if (i.hasAbility?(:MOTORDRIVE))
+				  fieldscore+=20 if (i.hasAbility?(:STEELWORKER))
+				  fieldscore+=25 if (i.hasAbility?(:DOWNLOAD))
+				  fieldscore+=25 if (i.hasAbility?(:TECHNICIAN))
+				  fieldscore+=25 if (i.hasAbility?(:GALVANIZE))
 				when :SHORTCIRCUIT
-				  fieldscore+=20 if (i.ability == :VOLTABSORB)
-				  fieldscore+=20 if (i.ability == :STATIC)
-				  fieldscore+=25 if (i.ability == :GALVANIZE)
-				  fieldscore+=50 if (i.ability == :SURGESURFER)
+				  fieldscore+=20 if (i.hasAbility?(:VOLTABSORB))
+				  fieldscore+=20 if (i.hasAbility?(:STATIC))
+				  fieldscore+=25 if (i.hasAbility?(:GALVANIZE))
+				  fieldscore+=50 if (i.hasAbility?(:SURGESURFER))
 				  fieldscore+=25 if i.hasType?(:ELECTRIC)
 				when :WASTELAND
 				  fieldscore+=10 if i.hasType?(:POISON)
-				  fieldscore+=10 if (i.ability == :CORROSION)
-				  fieldscore+=20 if (i.ability == :POISONHEAL)
-				  fieldscore+=20 if (i.ability == :EFFECTSPORE)
-				  fieldscore+=20 if (i.ability == :POISONPOINT)
-				  fieldscore+=20 if (i.ability == :STENCH)
-				  fieldscore+=20 if (i.ability == :GOOEY)
-				  fieldscore+=25 if (i.ability == :TOXICBOOST)
-				  fieldscore+=30 if (i.ability == :MERCILESS)
+				  fieldscore+=10 if (i.hasAbility?(:CORROSION))
+				  fieldscore+=20 if (i.hasAbility?(:POISONHEAL))
+				  fieldscore+=20 if (i.hasAbility?(:EFFECTSPORE))
+				  fieldscore+=20 if (i.hasAbility?(:POISONPOINT))
+				  fieldscore+=20 if (i.hasAbility?(:STENCH))
+				  fieldscore+=20 if (i.hasAbility?(:GOOEY))
+				  fieldscore+=25 if (i.hasAbility?(:TOXICBOOST))
+				  fieldscore+=30 if (i.hasAbility?(:MERCILESS))
 				when :ASHENBEACH
 				  fieldscore+=10 if i.hasType?(:FIGHTING)
-				  fieldscore+=15 if (i.ability == :INNERFOCUS)
-				  fieldscore+=15 if (i.ability == :OWNTEMPO)
-				  fieldscore+=15 if (i.ability == :PUREPOWER)
-				  fieldscore+=15 if (i.ability == :STEADFAST)
-				  fieldscore+=20 if ((i.ability == :SANDSTREAM) || (nonmegaform.ability == :SANDSTREAM))
-				  fieldscore+=20 if (i.ability == :WATERCOMPACTION)
-				  fieldscore+=30 if (i.ability == :SANDFORCE)
-				  fieldscore+=35 if (i.ability == :SANDVEIL)
-				  fieldscore+=50 if (i.ability == :SANDRUSH)
+				  fieldscore+=15 if (i.hasAbility?(:INNERFOCUS))
+				  fieldscore+=15 if (i.hasAbility?(:OWNTEMPO))
+				  fieldscore+=15 if (i.hasAbility?(:PUREPOWER))
+				  fieldscore+=15 if (i.hasAbility?(:STEADFAST))
+				  fieldscore+=20 if ((i.hasAbility?(:SANDSTREAM)) || (nonmegaform.hasAbility?(:SANDSTREAM)))
+				  fieldscore+=20 if (i.hasAbility?(:WATERCOMPACTION))
+				  fieldscore+=30 if (i.hasAbility?(:SANDFORCE))
+				  fieldscore+=35 if (i.hasAbility?(:SANDVEIL))
+				  fieldscore+=50 if (i.hasAbility?(:SANDRUSH))
 				when :WATERSURFACE
 				  fieldscore+=25 if i.hasType?(:WATER)
 				  fieldscore+=25 if i.hasType?(:ELECTRIC)
-				  fieldscore+=25 if (i.ability == :WATERVEIL)
-				  fieldscore+=25 if (i.ability == :HYDRATION)
-				  fieldscore+=25 if (i.ability == :TORRENT)
-				  fieldscore+=25 if (i.ability == :SCHOOLING)
-				  fieldscore+=25 if (i.ability == :WATERCOMPACTION)
-				  fieldscore+=50 if (i.ability == :SWIFTSWIM)
-				  fieldscore+=50 if (i.ability == :SURGESURFER)
-				  fieldscore+=25 if (i.ability == :STEAMENGINE)
+				  fieldscore+=25 if (i.hasAbility?(:WATERVEIL))
+				  fieldscore+=25 if (i.hasAbility?(:HYDRATION))
+				  fieldscore+=25 if (i.hasAbility?(:TORRENT))
+				  fieldscore+=25 if (i.hasAbility?(:SCHOOLING))
+				  fieldscore+=25 if (i.hasAbility?(:WATERCOMPACTION))
+				  fieldscore+=50 if (i.hasAbility?(:SWIFTSWIM))
+				  fieldscore+=50 if (i.hasAbility?(:SURGESURFER))
+				  fieldscore+=25 if (i.hasAbility?(:STEAMENGINE))
 				  mod1=PBTypes.oneTypeEff(:WATER,i.type1)
 				  mod2=(i.type1==i.type2 || i.type2.nil?) ? 2 : PBTypes.oneTypeEff(:WATER,i.type2)
 				  fieldscore-=50 if mod1*mod2>4
 				when :UNDERWATER
 				  fieldscore+=25 if i.hasType?(:WATER)
 				  fieldscore+=25 if i.hasType?(:ELECTRIC)
-				  fieldscore+=25 if (i.ability == :WATERVEIL)
-				  fieldscore+=25 if (i.ability == :HYDRATION)
-				  fieldscore+=25 if (i.ability == :TORRENT)
-				  fieldscore+=25 if (i.ability == :SCHOOLING)
-				  fieldscore+=25 if (i.ability == :WATERCOMPACTION)
-				  fieldscore+=50 if (i.ability == :SWIFTSWIM)
-				  fieldscore+=50 if (i.ability == :SURGESURFER)
-				  fieldscore+=25 if (i.ability == :STEAMENGINE)
+				  fieldscore+=25 if (i.hasAbility?(:WATERVEIL))
+				  fieldscore+=25 if (i.hasAbility?(:HYDRATION))
+				  fieldscore+=25 if (i.hasAbility?(:TORRENT))
+				  fieldscore+=25 if (i.hasAbility?(:SCHOOLING))
+				  fieldscore+=25 if (i.hasAbility?(:WATERCOMPACTION))
+				  fieldscore+=50 if (i.hasAbility?(:SWIFTSWIM))
+				  fieldscore+=50 if (i.hasAbility?(:SURGESURFER))
+				  fieldscore+=25 if (i.hasAbility?(:STEAMENGINE))
 				  mod1=PBTypes.oneTypeEff(:WATER,i.type1)
 				  mod2=(i.type1==i.type2 || i.type2.nil?) ? 2 : PBTypes.oneTypeEff(:WATER,i.type2)
 				  fieldscore-=50 if mod1*mod2>4
@@ -8645,94 +8645,94 @@ class PokeBattle_AI
 				when :GLITCH
 				when :CRYSTALCAVERN
 				  fieldscore+=25 if i.hasType?(:DRAGON)
-				  fieldscore+=30 if (i.ability == :PRISMARMOR)
+				  fieldscore+=30 if (i.hasAbility?(:PRISMARMOR))
 				when :MURKWATERSURFACE
 				  fieldscore+=25 if i.hasType?(:WATER)
 				  fieldscore+=25 if i.hasType?(:POISON)
 				  fieldscore+=25 if i.hasType?(:ELECTRIC)
-				  fieldscore+=25 if (i.ability == :SCHOOLING)
-				  fieldscore+=25 if (i.ability == :WATERCOMPACTION)
-				  fieldscore+=25 if (i.ability == :TOXICBOOST)
-				  fieldscore+=25 if (i.ability == :POISONHEAL)
-				  fieldscore+=25 if (i.ability == :MERCILESS)
-				  fieldscore+=50 if (i.ability == :SWIFTSWIM)
-				  fieldscore+=50 if (i.ability == :SURGESURFER)
-				  fieldscore+=20 if (i.ability == :GOOEY)
-				  fieldscore+=20 if (i.ability == :STENCH)
+				  fieldscore+=25 if (i.hasAbility?(:SCHOOLING))
+				  fieldscore+=25 if (i.hasAbility?(:WATERCOMPACTION))
+				  fieldscore+=25 if (i.hasAbility?(:TOXICBOOST))
+				  fieldscore+=25 if (i.hasAbility?(:POISONHEAL))
+				  fieldscore+=25 if (i.hasAbility?(:MERCILESS))
+				  fieldscore+=50 if (i.hasAbility?(:SWIFTSWIM))
+				  fieldscore+=50 if (i.hasAbility?(:SURGESURFER))
+				  fieldscore+=20 if (i.hasAbility?(:GOOEY))
+				  fieldscore+=20 if (i.hasAbility?(:STENCH))
 				when :MOUNTAIN
 				  fieldscore+=25 if i.hasType?(:ROCK)
 				  fieldscore+=25 if i.hasType?(:FLYING)
-				  fieldscore+=20 if ((i.ability == :SNOWWARNING) || (nonmegaform.ability == :SNOWWARNING))
-				  fieldscore+=20 if ((i.ability == :DROUGHT) || (nonmegaform.ability == :DROUGHT))
-				  fieldscore+=25 if (i.ability == :LONGREACH)
-				  fieldscore+=30 if (i.ability == :GALEWINGS) && @battle.weather== :STRONGWINDS
+				  fieldscore+=20 if ((i.hasAbility?(:SNOWWARNING)) || (nonmegaform.hasAbility?(:SNOWWARNING)))
+				  fieldscore+=20 if ((i.hasAbility?(:DROUGHT)) || (nonmegaform.hasAbility?(:DROUGHT)))
+				  fieldscore+=25 if (i.hasAbility?(:LONGREACH))
+				  fieldscore+=30 if (i.hasAbility?(:GALEWINGS)) && @battle.weather== :STRONGWINDS
 				when :SNOWYMOUNTAIN
 				  fieldscore+=25 if i.hasType?(:ROCK)
 				  fieldscore+=25 if i.hasType?(:FLYING)
 				  fieldscore+=25 if i.hasType?(:ICE)
-				  fieldscore+=20 if ((i.ability == :SNOWWARNING) || (nonmegaform.ability == :DROUGHT))
-				  fieldscore+=20 if ((i.ability == :DROUGHT) || (nonmegaform.ability == :DROUGHT))
-				  fieldscore+=20 if (i.ability == :ICEBODY)
-				  fieldscore+=20 if (i.ability == :SNOWCLOAK)
-				  fieldscore+=25 if (i.ability == :LONGREACH)
-				  fieldscore+=25 if (i.ability == :REFRIGERATE)
-				  fieldscore+=30 if (i.ability == :GALEWINGS) && @battle.weather== :STRONGWINDS
-				  fieldscore+=50 if (i.ability == :SLUSHRUSH)
+				  fieldscore+=20 if ((i.hasAbility?(:SNOWWARNING)) || (nonmegaform.hasAbility?(:DROUGHT)))
+				  fieldscore+=20 if ((i.hasAbility?(:DROUGHT)) || (nonmegaform.hasAbility?(:DROUGHT)))
+				  fieldscore+=20 if (i.hasAbility?(:ICEBODY))
+				  fieldscore+=20 if (i.hasAbility?(:SNOWCLOAK))
+				  fieldscore+=25 if (i.hasAbility?(:LONGREACH))
+				  fieldscore+=25 if (i.hasAbility?(:REFRIGERATE))
+				  fieldscore+=30 if (i.hasAbility?(:GALEWINGS)) && @battle.weather== :STRONGWINDS
+				  fieldscore+=50 if (i.hasAbility?(:SLUSHRUSH))
 				when :HOLY
 				  fieldscore+=20 if i.hasType?(:NORMAL)
-				  fieldscore+=20 if (i.ability == :JUSTIFIED)
+				  fieldscore+=20 if (i.hasAbility?(:JUSTIFIED))
 				when :MIRROR
-				  fieldscore+=25 if (i.ability == :SANDVEIL)
-				  fieldscore+=25 if (i.ability == :SNOWCLOAK)
-				  fieldscore+=25 if (i.ability == :ILLUSION)
-				  fieldscore+=25 if (i.ability == :TANGLEDFEET)
-				  fieldscore+=25 if (i.ability == :MAGICBOUNCE)
-				  fieldscore+=25 if (i.ability == :COLORCHANGE)
+				  fieldscore+=25 if (i.hasAbility?(:SANDVEIL))
+				  fieldscore+=25 if (i.hasAbility?(:SNOWCLOAK))
+				  fieldscore+=25 if (i.hasAbility?(:ILLUSION))
+				  fieldscore+=25 if (i.hasAbility?(:TANGLEDFEET))
+				  fieldscore+=25 if (i.hasAbility?(:MAGICBOUNCE))
+				  fieldscore+=25 if (i.hasAbility?(:COLORCHANGE))
 				when :FAIRYTALE
 				  fieldscore+=25 if i.hasType?(:FAIRY)
 				  fieldscore+=25 if i.hasType?(:STEEL)
 				  fieldscore+=40 if i.hasType?(:DRAGON)
-				  fieldscore+=25 if (i.ability == :POWEROFALCHEMY)
-				  fieldscore+=25 if (i.ability == :MIRRORARMOR)
-				  fieldscore+=25 if (i.ability == :PASTELVEIL)
-				  fieldscore+=25 if ((i.ability == :MAGICGUARD) || (nonmegaform.ability == :MAGICGUARD))
-				  fieldscore+=25 if (i.ability == :MAGICBOUNCE)
-				  fieldscore+=25 if (i.ability == :FAIRYAURA)
-				  fieldscore+=25 if (i.ability == :BATTLEARMOR)
-				  fieldscore+=25 if (i.ability == :SHELLARMOR)
-				  fieldscore+=25 if (i.ability == :MAGICIAN)
-				  fieldscore+=25 if (i.ability == :MARVELSCALE)
-				  fieldscore+=30 if (i.ability == :STANCECHANGE)
-				  fieldscore+=50 if (i.ability == :DAUNTLESSSHIELD)
-				  fieldscore+=50 if (i.ability == :INTREPIDSWORD)
+				  fieldscore+=25 if (i.hasAbility?(:POWEROFALCHEMY))
+				  fieldscore+=25 if (i.hasAbility?(:MIRRORARMOR))
+				  fieldscore+=25 if (i.hasAbility?(:PASTELVEIL))
+				  fieldscore+=25 if ((i.hasAbility?(:MAGICGUARD)) || (nonmegaform.hasAbility?(:MAGICGUARD)))
+				  fieldscore+=25 if (i.hasAbility?(:MAGICBOUNCE))
+				  fieldscore+=25 if (i.hasAbility?(:FAIRYAURA))
+				  fieldscore+=25 if (i.hasAbility?(:BATTLEARMOR))
+				  fieldscore+=25 if (i.hasAbility?(:SHELLARMOR))
+				  fieldscore+=25 if (i.hasAbility?(:MAGICIAN))
+				  fieldscore+=25 if (i.hasAbility?(:MARVELSCALE))
+				  fieldscore+=30 if (i.hasAbility?(:STANCECHANGE))
+				  fieldscore+=50 if (i.hasAbility?(:DAUNTLESSSHIELD))
+				  fieldscore+=50 if (i.hasAbility?(:INTREPIDSWORD))
 				when :DRAGONSDEN
 				  fieldscore+=25 if i.hasType?(:FIRE)
 				  fieldscore+=50 if i.hasType?(:DRAGON)
-				  fieldscore+=20 if (i.ability == :MARVELSCALE)
-				  fieldscore+=20 if (i.ability == :MULTISCALE)
-				  fieldscore+=20 if ((i.ability == :MAGMAARMOR) || (nonmegaform.ability == :MAGMAARMOR))
+				  fieldscore+=20 if (i.hasAbility?(:MARVELSCALE))
+				  fieldscore+=20 if (i.hasAbility?(:MULTISCALE))
+				  fieldscore+=20 if ((i.hasAbility?(:MAGMAARMOR)) || (nonmegaform.hasAbility?(:MAGMAARMOR)))
 				when :FLOWERGARDEN1,:FLOWERGARDEN2,:FLOWERGARDEN3,:FLOWERGARDEN4,:FLOWERGARDEN5
 				  fieldscore+=25 if i.hasType?(:GRASS)
 				  fieldscore+=25 if i.hasType?(:BUG)
-				  fieldscore+=20 if (i.ability == :FLOWERGIFT)
-				  fieldscore+=20 if (i.ability == :FLOWERVEIL)
-				  fieldscore+=20 if ((i.ability == :DROUGHT) || (nonmegaform.ability == :DROUGHT))
-				  fieldscore+=20 if ((i.ability == :DRIZZLE) || (nonmegaform.ability == :DRIZZLE))
-				  fieldscore+=25 if (i.ability == :RIPEN)
+				  fieldscore+=20 if (i.hasAbility?(:FLOWERGIFT))
+				  fieldscore+=20 if (i.hasAbility?(:FLOWERVEIL))
+				  fieldscore+=20 if ((i.hasAbility?(:DROUGHT)) || (nonmegaform.hasAbility?(:DROUGHT)))
+				  fieldscore+=20 if ((i.hasAbility?(:DRIZZLE)) || (nonmegaform.hasAbility?(:DRIZZLE)))
+				  fieldscore+=25 if (i.hasAbility?(:RIPEN))
 				when :STARLIGHT
 				  fieldscore+=25 if i.hasType?(:PSYCHIC)
 				  fieldscore+=25 if i.hasType?(:FAIRY)
 				  fieldscore+=25 if i.hasType?(:DARK)
-				  fieldscore+=20 if (i.ability == :MARVELSCALE)
-				  fieldscore+=20 if (i.ability == :VICTORYSTAR)
-				  fieldscore+=25 if ((i.ability == :ILLUMINATE) || (nonmegaform.ability == :ILLUMINATE))
-				  fieldscore+=30 if (i.ability == :SHADOWSHIELD)
+				  fieldscore+=20 if (i.hasAbility?(:MARVELSCALE))
+				  fieldscore+=20 if (i.hasAbility?(:VICTORYSTAR))
+				  fieldscore+=25 if ((i.hasAbility?(:ILLUMINATE)) || (nonmegaform.hasAbility?(:ILLUMINATE)))
+				  fieldscore+=30 if (i.hasAbility?(:SHADOWSHIELD))
 				when :NEWWORLD
 				  fieldscore+=25 if i.hasType?(:FLYING)
 				  fieldscore+=25 if i.hasType?(:DARK)
-				  fieldscore+=20 if (i.ability == :VICTORYSTAR)
-				  fieldscore+=25 if (i.ability == :LEVITATE)
-				  fieldscore+=30 if (i.ability == :SHADOWSHIELD)
+				  fieldscore+=20 if (i.hasAbility?(:VICTORYSTAR))
+				  fieldscore+=25 if (i.hasAbility?(:LEVITATE))
+				  fieldscore+=30 if (i.hasAbility?(:SHADOWSHIELD))
 				when :INVERSE
 				  fieldscore+=10 if i.hasType?(:NORMAL)
 				  fieldscore+=10 if i.hasType?(:ICE)
@@ -8740,50 +8740,50 @@ class PokeBattle_AI
 				  fieldscore-=30 if i.hasType?(:STEEL)
 				when :PSYTERRAIN
 				  fieldscore+=25 if i.hasType?(:PSYCHIC)
-				  fieldscore+=20 if (i.ability == :PUREPOWER)
-				  fieldscore+=20 if ((i.ability == :ANTICIPATION) || (nonmegaform.ability == :ANTICIPATION))
-				  fieldscore+=50 if (i.ability == :TELEPATHY)
+				  fieldscore+=20 if (i.hasAbility?(:PUREPOWER))
+				  fieldscore+=20 if ((i.hasAbility?(:ANTICIPATION)) || (nonmegaform.hasAbility?(:ANTICIPATION)))
+				  fieldscore+=50 if (i.hasAbility?(:TELEPATHY))
 				when :CLOUDS
 					fieldscore+=25 if i.hasType?(:FLYING)
-					fieldscore+=20 if (i.ability == :CLOUDNINE)
-					fieldscore+=20 if (i.ability == :FLUFFY)
-					fieldscore+=20 if (i.ability == :HYDRATION)
-					fieldscore+=20 if (i.ability == :FORECAST)
-					fieldscore+=20 if (i.ability == :OVERCOAT)
+					fieldscore+=20 if (i.hasAbility?(:CLOUDNINE))
+					fieldscore+=20 if (i.hasAbility?(:FLUFFY))
+					fieldscore+=20 if (i.hasAbility?(:HYDRATION))
+					fieldscore+=20 if (i.hasAbility?(:FORECAST))
+					fieldscore+=20 if (i.hasAbility?(:OVERCOAT))
 				when :DARKNESS1
 					fieldscore+=10 if i.hasType?(:DARK)
-					fieldscore+=10 if (i.ability == :DARKAURA)
-					fieldscore-=10 if (i.ability == :FAIRYAURA)
-					fieldscore+=20 if (i.ability == :RATTLED)
+					fieldscore+=10 if (i.hasAbility?(:DARKAURA))
+					fieldscore-=10 if (i.hasAbility?(:FAIRYAURA))
+					fieldscore+=20 if (i.hasAbility?(:RATTLED))
 				when :DARKNESS2
 					fieldscore+=20 if i.hasType?(:DARK)
-					fieldscore+=20 if (i.ability == :DARKAURA)
-					fieldscore-=20 if (i.ability == :FAIRYAURA)
-					fieldscore+=20 if (i.ability == :RATTLED)
-					fieldscore-=20 if (i.ability == :INSOMNIA)
-					fieldscore+=20 if (i.ability == :BADDREAMS)
-					fieldscore+=20 if (i.ability == :SHADOWSHIELD)
+					fieldscore+=20 if (i.hasAbility?(:DARKAURA))
+					fieldscore-=20 if (i.hasAbility?(:FAIRYAURA))
+					fieldscore+=20 if (i.hasAbility?(:RATTLED))
+					fieldscore-=20 if (i.hasAbility?(:INSOMNIA))
+					fieldscore+=20 if (i.hasAbility?(:BADDREAMS))
+					fieldscore+=20 if (i.hasAbility?(:SHADOWSHIELD))
 				when :DARKNESS3
 					fieldscore+=40 if i.hasType?(:DARK)
-					fieldscore+=40 if (i.ability == :DARKAURA)
-					fieldscore-=40 if (i.ability == :FAITTLED)
-					fieldscore-=20 if (i.ability == :INSOMNIA)
-					fieldscore+=40 if (i.ability == :BADDREAMS)
-					fieldscore+=20 if (i.ability == :SHADOWSHIELD)
+					fieldscore+=40 if (i.hasAbility?(:DARKAURA))
+					fieldscore-=40 if (i.hasAbility?(:FAITTLED))
+					fieldscore-=20 if (i.hasAbility?(:INSOMNIA))
+					fieldscore+=40 if (i.hasAbility?(:BADDREAMS))
+					fieldscore+=20 if (i.hasAbility?(:SHADOWSHIELD))
 				when :DANCEFLOOR
 					fieldscore+=10 if i.hasType?(:GHOST)
 					fieldscore+=10 if i.hasType?(:DARK)
 					fieldscore+=20 if i.hasType?(:PSYCHIC)
-					fieldscore+=20 if (i.ability == :INSOMNIA)
-					fieldscore+=20 if (i.ability == :MAGICGUARD)
-					fieldscore+=10 if (i.ability == :MAGICIAN)
-					fieldscore+=40 if (i.ability == :DANCER)
-					fieldscore+=20 if (i.ability == :ILLUMINATE)
+					fieldscore+=20 if (i.hasAbility?(:INSOMNIA))
+					fieldscore+=20 if (i.hasAbility?(:MAGICGUARD))
+					fieldscore+=10 if (i.hasAbility?(:MAGICIAN))
+					fieldscore+=40 if (i.hasAbility?(:DANCER))
+					fieldscore+=20 if (i.hasAbility?(:ILLUMINATE))
 				when :CROWD
-					fieldscore+=20 if (i.ability == :GUTS)
-					fieldscore+=10 if (i.ability == :INNERFOCUS)
-					fieldscore+=30 if (i.ability == :INTIMIDATE)
-					fieldscore+=20 if (i.ability == :IRONFIST)
+					fieldscore+=20 if (i.hasAbility?(:GUTS))
+					fieldscore+=10 if (i.hasAbility?(:INNERFOCUS))
+					fieldscore+=30 if (i.hasAbility?(:INTIMIDATE))
+					fieldscore+=20 if (i.hasAbility?(:IRONFIST))
 			  end
 			end
 			monscore += fieldscore
@@ -8791,7 +8791,7 @@ class PokeBattle_AI
 			#Other
 			otherscore = 0
 			otherscore -= 70 if hard_switch && @attacker.species == i.species
-			otherscore -= 100 if @opponent.ability == :WONDERGUARD && roughdamagearray[0].max == 0
+			otherscore -= 100 if @opponent.hasAbility?(:WONDERGUARD) && roughdamagearray[0].max == 0
 			if @attacker.effects[:FutureSight] >= 1
 				move, moveuser = @attacker.pbFutureSightUserPlusMove
 				damage = hard_switch ? pbRoughDamage(move,moveuser,nonmegaform) : pbRoughDamage(move,moveuser,i)
@@ -8863,7 +8863,7 @@ class PokeBattle_AI
 			statusscore+=200
 		end
 		statusscore+= (@attacker.effects[:Toxic]*15) if @attacker.effects[:Toxic]>0
-		statusscore+=50 if @attacker.ability == :NATURALCURE && !@attacker.status.nil?
+		statusscore+=50 if @attacker.hasAbility?(:NATURALCURE) && !@attacker.status.nil?
 		statusscore+=60 if @mondata.partyroles.any? {|roles| roles.include?(:CLERIC)} && !@attacker.status.nil?
 		if @attacker.status== :SLEEP
 			statusscore+=170 if checkAImoves([:DREAMEATER,:NIGHTMARE],aimem)
@@ -8901,7 +8901,7 @@ class PokeBattle_AI
 		end
 		PBDebug.log(sprintf("Initial switchscore building: Stat Stages (%d)",statscore)) if $INTERNAL
 		#Healing potential
-		healscore+=30 if (@attacker.hp.to_f)/@attacker.totalhp<(2/3) && @attacker.ability == :REGENERATOR
+		healscore+=30 if (@attacker.hp.to_f)/@attacker.totalhp<(2/3) && @attacker.hasAbility?(:REGENERATOR)
 		if @attacker.effects[:Wish]>0
 			for i in @mondata.party
 				next if i.nil? || i.hp == 0 || @mondata.party.index(i) == @attacker.pokemonIndex
@@ -8925,11 +8925,11 @@ class PokeBattle_AI
 			for oppmon in [@opponent, @opponent.pbPartner]
 				next if oppmon.hp <= 0
 				bothimmune = false if [0x05,0x06,0x017].include?(i.function) && i.basedamage==0 && (oppmon.pbCanPoison?(false,false,i.move==:TOXIC && @attacker.ability==:CORROSION) && !hydrationCheck(oppmon)) || oppmon.status == :POISON
-				bothimmune = false if i.move==:PERISHSONG && !(oppmon.ability == :SOUNDPROOF && !moldBreakerCheck(@attacker))
+				bothimmune = false if i.move==:PERISHSONG && !(oppmon.hasAbility?(:SOUNDPROOF) && !moldBreakerCheck(@attacker))
 				bothimmune = false if i.function == 0xdc && (!noLeechSeed(oppmon) || oppmon.effects[:LeechSeed] > -1)
 				if i.basedamage > 0
 					typemod = pbTypeModNoMessages(i.pbType(@attacker),@attacker,oppmon,i)
-					typemod = 0 if oppmon.ability == :WONDERGUARD && typemod<=4
+					typemod = 0 if oppmon.hasAbility?(:WONDERGUARD) && typemod<=4
 					bothimmune = false if typemod != 0
 				end
 			end
@@ -8955,7 +8955,7 @@ class PokeBattle_AI
 			forcedscore+=200 if encoreScore <= 30
 			forcedscore+=110 if @attacker.effects[:Torment]
 		end
-		if (@attacker.item == :CHOICEBAND || @attacker.item == :CHOICESPECS || @attacker.item == :CHOICESCARF || @attacker.ability == :GORILLATACTICS) && @attacker.effects[:ChoiceBand] != nil
+		if (@attacker.item == :CHOICEBAND || @attacker.item == :CHOICESPECS || @attacker.item == :CHOICESCARF || @attacker.hasAbility?(:GORILLATACTICS)) && @attacker.effects[:ChoiceBand] != nil
 			for i in 0...@attacker.moves.length
 				if @attacker.moves[i].move==@attacker.effects[:ChoiceBand]
 					choiceindex = i
@@ -9052,18 +9052,18 @@ class PokeBattle_AI
 				for i in @mondata.party
 					count+=1
 					next if i.nil? || i.hp == 0 || @mondata.party.index(i) == @attacker.pokemonIndex
-					if (i.ability == :STEADFAST)
+					if (i.hasAbility?(:STEADFAST))
 						specialscore+=90
 						break
 					end
 				end
 			end
 			#punishing skill-link multi-hit contact moves
-			if oppmon.ability == :SKILLLINK
+			if oppmon.hasAbility?(:SKILLLINK)
 				if getAIMemory(oppmon).any? {|moveloop| moveloop!=nil && moveloop.function==0xC0 && moveloop.contactMove?}
 					for i in @mondata.party
 						next if i.nil? || i.hp == 0 || @mondata.party.index(i) == @attacker.pokemonIndex
-						if (i.item == :ROCKYHELMET) || (i.ability == :ROUGHSKIN) || (i.ability == :IRONBARBS)
+						if (i.item == :ROCKYHELMET) || (i.hasAbility?(:ROUGHSKIN)) || (i.hasAbility?(:IRONBARBS))
 							specialscore+=70
 							break
 						end
@@ -9145,7 +9145,7 @@ class PokeBattle_AI
 		end
 		betterswitchscore+=100 if @attacker.turncount==0
 		betterswitchscore+=90 if @attacker.effects[:PerishSong]==0 && @attacker.pbHasMove?(:BATONPASS)
-		betterswitchscore+=60 if @attacker.ability == :WIMPOUT || @attacker.ability == :EMERGENCYEXIT
+		betterswitchscore+=60 if @attacker.hasAbility?(:WIMPOUT) || @attacker.hasAbility?(:EMERGENCYEXIT)
 		PBDebug.log(sprintf("Initial noswitchscore building: Alternate Switching Options (%d)",betterswitchscore)) if $INTERNAL
 		secondwindscore = 0
 		#Can you kill them before they kill you?
@@ -9180,12 +9180,12 @@ class PokeBattle_AI
 		# Sticky Web
 		if mon.pbOwnSide.effects[:StickyWeb] && !mon.isAirborne?
 			drop = @battle.FE == :FOREST ? 2 : 1
-			mon.stages[PBStats::SPEED]-= drop unless mon.item == :WHITEHERB || mon.ability == :WHITESMOKE || mon.ability == :CLEARBODY
-			mon.unburdened = true 			  if mon.ability == :UNBURDEN && mon.item == :WHITEHERB
+			mon.stages[PBStats::SPEED]-= drop unless mon.item == :WHITEHERB || mon.hasAbility?(:WHITESMOKE) || mon.hasAbility?(:CLEARBODY)
+			mon.unburdened = true 			  if mon.hasAbility?(:UNBURDEN) && mon.item == :WHITEHERB
 		end
 		# Seed Stat boosts
 		if mon.item == @battle.field.seeds[:seedtype]
-			mon.unburdened = true if mon.ability == :UNBURDEN
+			mon.unburdened = true if mon.hasAbility?(:UNBURDEN)
 			@battle.field.seeds[:stats].each_pair {|stat,statval| mon.stages[stat]+=statval}
 		end
 		# Abilities on Entry
@@ -9215,50 +9215,50 @@ class PokeBattle_AI
 		end
 		# Fairy Tale Abilities
 		if @battle.FE == :FAIRYTALE
-			if [:MAGICGUARD, :MAGICBOUNCE, :POWEROFALCHEMY, :MIRRORARMOR, :PASTELVEIL].include?(mon.ability)
+			if [:MAGICGUARD, :MAGICBOUNCE, :POWEROFALCHEMY, :MIRRORARMOR, :PASTELVEIL].any? { |a| mon.hasAbility?(a) }
 				mon.stages[PBStats::SPDEF]+=1 
 			end
-			if [:BATTLEARMOR, :SHELLARMOR, :POWEROFALCHEMY].include?(mon.ability)
+			if [:BATTLEARMOR, :SHELLARMOR, :POWEROFALCHEMY].any? { |a| mon.hasAbility?(a) }
 				mon.stages[PBStats::DEFENSE]+=1 
 			end
-			if mon.ability == :MAGICIAN
+			if mon.hasAbility?(:MAGICIAN)
 				mon.stages[PBStats::SPATK]+=1
 			end 
 		end
 		# Starlight Illuminate
 		if @battle.FE == :STARLIGHT
-			mon.stages[PBStats::SPATK]+=2 if mon.ability == :ILLUMINATE
+			mon.stages[PBStats::SPATK]+=2 if mon.hasAbility?(:ILLUMINATE)
 		end
 		# Water Compaction
 		if @battle.FE == :MISTY || @battle.FE == :CORROSIVEMIST || @battle.state.effects[:MISTY] > 0
-			mon.stages[PBStats::DEFENSE]+=2 if mon.ability == :WATERCOMPACTION
+			mon.stages[PBStats::DEFENSE]+=2 if mon.hasAbility?(:WATERCOMPACTION)
 		end
 		# Mirror Field Evasion & Accuracy
 		if @battle.FE == :MIRROR
-			mon.stages[PBStats::EVASION]+=1 if [:SANDVEIL,:SNOWCLOAK,:TANGLEDFEET,:MAGICBOUNCE,:COLOURCHANGE].include?(mon.ability)
-			mon.stages[PBStats::EVASION]+=2 if mon.ability == :ILLUSION
-			mon.stages[PBStats::ACCURACY]+=1 if [:KEENEYE,:COMPOUNDEYES].include?(mon.ability)
+			mon.stages[PBStats::EVASION]+=1 if [:SANDVEIL,:SNOWCLOAK,:TANGLEDFEET,:MAGICBOUNCE,:COLOURCHANGE].any? { |a| mon.hasAbility?(a) }
+			mon.stages[PBStats::EVASION]+=2 if mon.hasAbility?(:ILLUSION)
+			mon.stages[PBStats::ACCURACY]+=1 if [:KEENEYE,:COMPOUNDEYES].any? { |a| mon.hasAbility?(a) }
 		end
 		# Rattled 
-		if mon.ability == :RATTLED
+		if mon.hasAbility?(:RATTLED)
 			mon.stages[PBStats::SPEED]+=1 if @battle.FE == :DIMENSIONAL || @battle.FE == :FROZENDIMENSION || @battle.FE == :HAUNTED
 		end
 		# Dimensionals
 		if @battle.FE == :DIMENSIONAL || @battle.FE == :FROZENDIMENSION
-			mon.stages[PBStats::SPATK]+=1 if mon.ability == :BERSERK
-			mon.stages[PBStats::ATTACK]+=1 if mon.ability == :JUSTIFIED || mon.ability == :ANGERPOINT
+			mon.stages[PBStats::SPATK]+=1 if mon.hasAbility?(:BERSERK)
+			mon.stages[PBStats::ATTACK]+=1 if mon.hasAbility?(:JUSTIFIED) || mon.hasAbility?(:ANGERPOINT)
 		end
 		# Sky
 		if @battle.FE == :SKY
-			mon.stages[PBStats::DEFENSE]+=1 if mon.ability == :BIGPECKS
-			mon.stages[PBStats::SPEED]+=1 if mon.ability == :LEVITATE || mon.ability == :SOLARIDOL || mon.ability == :LUNARIDOL
+			mon.stages[PBStats::DEFENSE]+=1 if mon.hasAbility?(:BIGPECKS)
+			mon.stages[PBStats::SPEED]+=1 if mon.hasAbility?(:LEVITATE) || mon.hasAbility?(:SOLARIDOL) || mon.hasAbility?(:LUNARIDOL)
 		end 
 		# Colosseum
 		if @battle.FE == :COLOSSEUM
-			mon.stages[PBStats::DEFENSE]+=1 if  (mon.ability == :BATTLEARMOR || mon.ability == :SHELLARMOR)
-			mon.stages[PBStats::SPDEF]+=1 if  (mon.ability == :MIRRORARMOR || mon.ability == :MAGICGUARD)
-			mon.stages[PBStats::ATTACK]+=1 if mon.ability == :JUSTIFIED || mon.ability == :NOGUARD
-			mon.stages[PBStats::SPATK]+=1 if mon.ability == :JUSTIFIED || mon.ability == :NOGUARD
+			mon.stages[PBStats::DEFENSE]+=1 if  (mon.hasAbility?(:BATTLEARMOR) || mon.hasAbility?(:SHELLARMOR))
+			mon.stages[PBStats::SPDEF]+=1 if  (mon.hasAbility?(:MIRRORARMOR) || mon.hasAbility?(:MAGICGUARD))
+			mon.stages[PBStats::ATTACK]+=1 if mon.hasAbility?(:JUSTIFIED) || mon.hasAbility?(:NOGUARD)
+			mon.stages[PBStats::SPATK]+=1 if mon.hasAbility?(:JUSTIFIED) || mon.hasAbility?(:NOGUARD)
 		end
 		#Contrary	
 		if mon.ability==:CONTRARY
@@ -9463,7 +9463,7 @@ class PokeBattle_AI
 		typemod=pbTypeModNoMessages(move.pbType(attacker),attacker,opponent,move) if @mondata.skill >= HIGHSKILL
 		return typemod if typemod<=0
 		return 0 if !moveSuccesful?(oldmove,attacker,opponent)
-		return 0 if opponent.totalhp == 1 && opponent.ability == :STURDY && move.pbNumHits(attacker)==1 && !attacker.effects[:ParentalBond] && !move.pbIsMultiHit && !moldBreakerCheck(attacker)
+		return 0 if opponent.totalhp == 1 && opponent.hasAbility?(:STURDY) && move.pbNumHits(attacker)==1 && !attacker.effects[:ParentalBond] && !move.pbIsMultiHit && !moldBreakerCheck(attacker)
 		if @mondata.skill>=MEDIUMSKILL
 		  basedamage = pbBetterBaseDamage(move,attacker,opponent)
 		end
@@ -9526,7 +9526,7 @@ class PokeBattle_AI
 				atkstage=opponent.stages[PBStats::SPATK]+6
 			end
 			if @battle.FE == :GLITCH
-				atk = attacker.getSpecialStat(opponent.ability == :UNAWARE)
+				atk = attacker.getSpecialStat(opponent.hasAbility?(:UNAWARE))
 				atkstage = 6 #getspecialstat handles unaware
 			end
 		end
@@ -9537,16 +9537,16 @@ class PokeBattle_AI
 			basedamage=(basedamage*move.moveFieldBoost).round
 			case @battle.FE
 			when :ELECTERRAIN
-				if type == :ELECTRIC && opponent.ability == :TRANSISTOR
+				if type == :ELECTRIC && opponent.hasAbility?(:TRANSISTOR)
 					basedamage = (basedamage*0.5).round
 				end
 			when :CHESS
 				# Chess Move boost
 				if (CHESSMOVES).include?(move.move)
-					if (opponent.ability == :ADAPTABILITY) || (opponent.ability == :ANTICIPATION) || (opponent.ability == :SYNCHRONIZE) || (opponent.ability == :TELEPATHY)
+					if (opponent.hasAbility?(:ADAPTABILITY)) || (opponent.hasAbility?(:ANTICIPATION)) || (opponent.hasAbility?(:SYNCHRONIZE)) || (opponent.hasAbility?(:TELEPATHY))
 						basedamage=(basedamage*0.5).round
 					end
-					if (opponent.ability == :OBLIVIOUS) || (opponent.ability == :KLUTZ) || (opponent.ability == :UNAWARE) || (opponent.ability == :SIMPLE) || opponent.effects[:Confusion]>0
+					if (opponent.hasAbility?(:OBLIVIOUS)) || (opponent.hasAbility?(:KLUTZ)) || (opponent.hasAbility?(:UNAWARE)) || (opponent.hasAbility?(:SIMPLE)) || opponent.effects[:Confusion]>0
 						basedamage=(basedamage*2).round
 					end
 				end
@@ -9562,8 +9562,8 @@ class PokeBattle_AI
 			when :BIGTOP
 				if ((type == :FIGHTING && move.pbIsPhysical?(type)) ||
 						(PBFields::STRIKERMOVES).include?(move.move))
-					if attacker.ability == :HUGEPOWER || attacker.ability == :GUTS ||
-						attacker.ability == :PUREPOWER || attacker.ability == :SHEERFORCE
+					if attacker.hasAbility?(:HUGEPOWER) || attacker.hasAbility?(:GUTS) ||
+						attacker.hasAbility?(:PUREPOWER) || attacker.hasAbility?(:SHEERFORCE)
 						provimult=2.2
           				provimult=1.6 if $game_variables[:DifficultyModes]==:EASY
 						basedamage=(basedamage*provimult).round
@@ -9579,7 +9579,7 @@ class PokeBattle_AI
 					basedamage=(basedamage*provimult).round
 				end
 			when :RAINBOW
-				if type == :POISON && opponent.ability == :PASTELVEIL
+				if type == :POISON && opponent.hasAbility?(:PASTELVEIL)
 					basedamage = (basedamage*0.5).round
 				end
 			when :SHORTCIRCUIT
@@ -9587,7 +9587,7 @@ class PokeBattle_AI
 				damageroll = ((damageroll-1.0)/2.0)+1.0 if $game_variables[:DifficultyModes]==:EASY
 				basedamage=(basedamage*damageroll).round
 			when :WATERSURFACE, :UNDERWATER
-				if attacker.ability == :PROPELLERTAIL
+				if attacker.hasAbility?(:PROPELLERTAIL)
 					basedamage=(basedamage*1.5).round if move.priority > 0
 				end
 			when :CAVE
@@ -9620,19 +9620,19 @@ class PokeBattle_AI
 		if @mondata.skill>=MEDIUMSKILL
 		  ############ ATTACKER ABILITY CHECKS ############
 			#Technician
-			if attacker.ability == :TECHNICIAN
+			if attacker.hasAbility?(:TECHNICIAN)
 				basedamage=(basedamage*1.5).round if (basedamage<=60) || (@battle.FE == :FACTORY && basedamage<=80)
 			# Iron Fist
-			elsif attacker.ability == :IRONFIST
+			elsif attacker.hasAbility?(:IRONFIST)
 				basedamage=(basedamage*1.2).round if move.punchMove?
 			# Strong Jaw
-			elsif attacker.ability == :STRONGJAW
+			elsif attacker.hasAbility?(:STRONGJAW)
 				basedamage=(basedamage*1.5).round if (PBStuff::BITEMOVE).include?(move.move)
 			#Tough Claws
-			elsif attacker.ability == :TOUGHCLAWS
+			elsif attacker.hasAbility?(:TOUGHCLAWS)
 				basedamage=(basedamage*1.3).round if move.contactMove?
 			# Reckless
-			elsif attacker.ability == :RECKLESS
+			elsif attacker.hasAbility?(:RECKLESS)
 				if move.function==0xFA ||  # Take Down, etc.
 					move.function==0xFD ||  # Volt Tackle
 					move.function==0xFE ||  # Flare Blitz
@@ -9641,17 +9641,17 @@ class PokeBattle_AI
 					basedamage=(basedamage*1.2).round
 				end
 			# Flare Boost
-			elsif attacker.ability == :FLAREBOOST
+			elsif attacker.hasAbility?(:FLAREBOOST)
 				if (attacker.status== :BURN || @battle.FE == :BURNING) && move.pbIsSpecial?(type)
 					basedamage=(basedamage*1.5).round
 				end
 			# Toxic Boost
-			elsif attacker.ability == :TOXICBOOST
+			elsif attacker.hasAbility?(:TOXICBOOST)
 				if (attacker.status== :POISON || @battle.FE == :CORROSIVE || @battle.FE == :CORROSIVEMIST || @battle.FE == :WASTELAND || @battle.FE == :MURKWATERSURFACE) && move.pbIsPhysical?(type)
 					basedamage=(basedamage*1.5).round
 				end
 			# Rivalry
-			elsif attacker.ability == :RIVALRY
+			elsif attacker.hasAbility?(:RIVALRY)
 				if attacker.gender!=2 && opponent.gender!=2
 					if attacker.gender==opponent.gender
 						basedamage=(basedamage*1.25).round
@@ -9660,12 +9660,12 @@ class PokeBattle_AI
 					end
 				end
 			# Mega Launcher
-			elsif (attacker.ability == :MEGALAUNCHER)
+			elsif (attacker.hasAbility?(:MEGALAUNCHER))
 				if move.move == :AURASPHERE || move.move == :DRAGONPULSE || move.move == :DARKPULSE || move.move == :WATERPULSE || move.move == :ORIGINPULSE
 					basedamage=(basedamage*1.5).round
 				end
 			# Sand Force
-			elsif attacker.ability == :SANDFORCE
+			elsif attacker.hasAbility?(:SANDFORCE)
 				if @battle.pbWeather== :SANDSTORM && (type == :ROCK || type == :GROUND || type == :STEEL)
 					basedamage=(basedamage*1.3).round
 				elsif @mondata.skill>=BESTSKILL && (@battle.FE == :DESERT || @battle.FE == :ASHENBEACH) &&
@@ -9673,39 +9673,39 @@ class PokeBattle_AI
 					basedamage=(basedamage*1.3).round
 				end
 			# Analytic
-			elsif attacker.ability == :ANALYTIC
+			elsif attacker.hasAbility?(:ANALYTIC)
 				if pbAIfaster?(move,nil,attacker,opponent)
 					basedamage = (basedamage*1.3).round
 				end
 			# Sheer Force
-			elsif attacker.ability == :SHEERFORCE
+			elsif attacker.hasAbility?(:SHEERFORCE)
 				basedamage=(basedamage*1.3).round if move.effect>0
 			# Normalize
-			elsif attacker.ability == :NORMALIZE
+			elsif attacker.hasAbility?(:NORMALIZE)
 				basedamage=(basedamage*1.2).round
 			# Hustle
-			elsif attacker.ability == :HUSTLE
+			elsif attacker.hasAbility?(:HUSTLE)
 				atk=(atk*1.5).round if move.pbIsPhysical?(type)
 			# Guts
-			elsif attacker.ability == :GUTS
+			elsif attacker.hasAbility?(:GUTS)
 				atk=(atk*1.5).round if !attacker.status.nil? && move.pbIsPhysical?(type)
 			#Plus/Minus
-			elsif attacker.ability == :PLUS ||  attacker.ability == :MINUS
+			elsif attacker.hasAbility?(:PLUS) ||  attacker.hasAbility?(:MINUS)
 				if move.pbIsSpecial?(type)
 					partner=attacker.pbPartner
-					if partner.ability == :PLUS || partner.ability == :MINUS
+					if partner.hasAbility?(:PLUS) || partner.hasAbility?(:MINUS)
 						atk=(atk*1.5).round
 					elsif @battle.FE == :SHORTCIRCUIT && @mondata.skill>=BESTSKILL
 						atk=(atk*1.5).round
 					end
 				end
 			#Defeatist
-			elsif attacker.ability == :DEFEATIST
+			elsif attacker.hasAbility?(:DEFEATIST)
 				atk=(atk*0.5).round if attacker.hp<=(attacker.totalhp/2.0).floor
 			#Pure/Huge Power
-			elsif attacker.ability == :PUREPOWER || attacker.ability == :HUGEPOWER
+			elsif attacker.hasAbility?(:PUREPOWER) || attacker.hasAbility?(:HUGEPOWER)
 				if @mondata.skill>=BESTSKILL
-					if attacker.ability == :PUREPOWER && @battle.FE == :PSYTERRAIN
+					if attacker.hasAbility?(:PUREPOWER) && @battle.FE == :PSYTERRAIN
 						atk=(atk*2.0).round if move.pbIsSpecial?(type)
 					else
 						atk=(atk*2.0).round if move.pbIsPhysical?(type)
@@ -9714,7 +9714,7 @@ class PokeBattle_AI
 					atk=(atk*2.0).round
 				end
 			#Solar Power
-			elsif attacker.ability == :SOLARPOWER
+			elsif attacker.hasAbility?(:SOLARPOWER)
 				if @battle.pbWeather== :SUNNYDAY && move.pbIsSpecial?(type)
 					atk=(atk*1.5).round
 				end
@@ -9724,48 +9724,48 @@ class PokeBattle_AI
 					atk=(atk*1.5).round
 				end
 			#Slow Start
-			elsif attacker.ability == :SLOWSTART
+			elsif attacker.hasAbility?(:SLOWSTART)
 				if attacker.turncount<5 && move.pbIsPhysical?(type)
 					atk=(atk*0.5).round
 				end
 			#Punk Rock (offensive)
-			elsif attacker.ability == :PUNKROCK && move.isSoundBased?
+			elsif attacker.hasAbility?(:PUNKROCK) && move.isSoundBased?
 				if @battle.FE == :BIGTOP || @battle.FE == :CAVE
 					basedamage=(basedamage*1.5).round
 				else
 					basedamage=(basedamage*1.3).round
 				end
 			#Power Spot
-			elsif attacker.pbPartner.ability == :POWERSPOT
+			elsif attacker.pbPartner.hasAbility?(:POWERSPOT)
 				if @battle.FE == :HOLY || @battle.FE == :PSYTERRAIN
 					basedamage=(basedamage*1.5).round
 				else
 					basedamage=(basedamage*1.3).round
 				end
 			#Steely Spirit
-			elsif move.type == :STEEL && attacker.ability == :STEELYSPIRIT || attacker.pbPartner.ability == :STEELYSPIRIT
+			elsif move.type == :STEEL && attacker.hasAbility?(:STEELYSPIRIT) || attacker.pbPartner.hasAbility?(:STEELYSPIRIT)
 				if @battle.FE == :FAIRYTALE
 					basedamage=(basedamage*2.0).round
 				else
 					basedamage=(basedamage*1.5).round
 				end
-			elsif move.type == :ELECTRIC && attacker.ability == :TRANSISTOR
+			elsif move.type == :ELECTRIC && attacker.hasAbility?(:TRANSISTOR)
 				basedamage=(basedamage*1.5).round
-			elsif move.type == :DRAGON && attacker.ability == :DRAGONSMAW
+			elsif move.type == :DRAGON && attacker.hasAbility?(:DRAGONSMAW)
 				basedamage=(basedamage*1.5).round
-			elsif  attacker.ability == :GORILLATACTICS && move.pbIsPhysical?(type)
+			elsif  attacker.hasAbility?(:GORILLATACTICS) && move.pbIsPhysical?(type)
 				atk=(atk*1.5).round
 			# Type Changing Abilities
 			elsif move.type == :NORMAL && attacker.ability != :NORMALIZE
 				# Aerilate
-				if attacker.ability == :AERILATE
+				if attacker.hasAbility?(:AERILATE)
 					if @battle.FE == :MOUNTAIN || @battle.FE == :SNOWYMOUNTAIN # Snowy Mountain && Mountain
 						basedamage=(basedamage*1.5).round
 					else
 					basedamage=(basedamage*1.2).round
 					end
 				# Galvanize
-				elsif attacker.ability == :GALVANIZE
+				elsif attacker.hasAbility?(:GALVANIZE)
 					if @mondata.skill>=BESTSKILL
 						if @battle.FE == :ELECTERRAIN || @battle.FE == :FACTORY # Electric or Factory Fields
 							basedamage=(basedamage*1.5).round
@@ -9778,14 +9778,14 @@ class PokeBattle_AI
 						basedamage=(basedamage*1.2).round
 					end
 				# Pixilate
-				elsif attacker.ability == :PIXILATE
+				elsif attacker.hasAbility?(:PIXILATE)
 					if @mondata.skill>=BESTSKILL
 						basedamage= @battle.FE == :MISTY ? (basedamage*1.5).round : (basedamage*1.2).round # Misty Field
 					else
 						basedamage=(basedamage*1.2).round
 					end
 				# Refrigerate
-				elsif attacker.ability == :REFRIGERATE
+				elsif attacker.hasAbility?(:REFRIGERATE)
 					if @mondata.skill>=BESTSKILL
 						if @battle.FE == :ICY || @battle.FE == :SNOWYMOUNTAIN # Icy Fields
 							basedamage=(basedamage*1.5).round
@@ -9797,28 +9797,28 @@ class PokeBattle_AI
 					end
 				end
 			# Execution
-			elsif attacker.ability == :EXECUTION
+			elsif attacker.hasAbility?(:EXECUTION)
 				basedamage=(basedamage*2.0).round if opponent.hp<=(opponent.totalhp/2.0).floor
 		  	end
 
 		  ############ OPPONENT ABILITY CHECKS ############
 			if !moldBreakerCheck(attacker)
 				# Heatproof
-				if opponent.ability == :HEATPROOF
+				if opponent.hasAbility?(:HEATPROOF)
 					if type == :FIRE
 						basedamage=(basedamage*0.5).round
 					end
 				# Dry Skin
-				elsif opponent.ability == :DRYSKIN
+				elsif opponent.hasAbility?(:DRYSKIN)
 					if type == :FIRE
 						basedamage=(basedamage*1.25).round
 					end
-				elsif opponent.ability == :THICKFAT
+				elsif opponent.hasAbility?(:THICKFAT)
 					if type == :ICE || type == :FIRE
 						atk=(atk*0.5).round
 					end
 				# Punk Rock (defensive)
-				elsif opponent.ability == :PUNKROCK
+				elsif opponent.hasAbility?(:PUNKROCK)
 					if move.isSoundBased?
 						basedamage=(basedamage*0.5).round
 					end
@@ -9968,41 +9968,41 @@ class PokeBattle_AI
 				end
 			# Dark Aura/Aurabreak
 			elsif type == :DARK
-				if @battle.battlers.any? {|battler| battler.ability == :DARKAURA}
+				if @battle.battlers.any? {|battler| battler.hasAbility?(:DARKAURA)}
 					if @battle.FE== :DARKNESS1
-						basedamage*= @battle.battlers.any? {|battler| battler.ability == :AURABREAK} ? (0.6) : (1.4)
+						basedamage*= @battle.battlers.any? {|battler| battler.hasAbility?(:AURABREAK)} ? (0.6) : (1.4)
 					elsif @battle.FE == :DARKNESS2
-						basedamage*= @battle.battlers.any? {|battler| battler.ability == :AURABREAK} ? (0.5) : (1.5)
+						basedamage*= @battle.battlers.any? {|battler| battler.hasAbility?(:AURABREAK)} ? (0.5) : (1.5)
 					elsif @battle.FE == :DARKNESS3
-						basedamage*= @battle.battlers.any? {|battler| battler.ability == :AURABREAK} ? (0.33) : (1.66)
+						basedamage*= @battle.battlers.any? {|battler| battler.hasAbility?(:AURABREAK)} ? (0.33) : (1.66)
 					else
-						basedamage*= @battle.battlers.any? {|battler| battler.ability == :AURABREAK} ? (2.0/3) : (4.0/3)
+						basedamage*= @battle.battlers.any? {|battler| battler.hasAbility?(:AURABREAK)} ? (2.0/3) : (4.0/3)
 					end
 				end
 			# Fairy Aura/Aurabreak
 			elsif type == :FAIRY
-				if @battle.battlers.any? {|battler| battler.ability == :FAIRYAURA}
+				if @battle.battlers.any? {|battler| battler.hasAbility?(:FAIRYAURA)}
 					if @battle.FE== :DARKNESS1
-						basedamage*= @battle.battlers.any? {|battler| battler.ability == :AURABREAK} ? (0.7) : (1.3)
+						basedamage*= @battle.battlers.any? {|battler| battler.hasAbility?(:AURABREAK)} ? (0.7) : (1.3)
 					elsif @battle.FE == :DARKNESS2
-						basedamage*= @battle.battlers.any? {|battler| battler.ability == :AURABREAK} ? (0.8) : (1.2)
+						basedamage*= @battle.battlers.any? {|battler| battler.hasAbility?(:AURABREAK)} ? (0.8) : (1.2)
 					elsif @battle.FE == :DARKNESS3
-						basedamage*= @battle.battlers.any? {|battler| battler.ability == :AURABREAK} ? (0.9) : (1.1)
+						basedamage*= @battle.battlers.any? {|battler| battler.hasAbility?(:AURABREAK)} ? (0.9) : (1.1)
 					else
-						basedamage*= @battle.battlers.any? {|battler| battler.ability == :AURABREAK} ? (2.0/3) : (4.0/3)
+						basedamage*= @battle.battlers.any? {|battler| battler.hasAbility?(:AURABREAK)} ? (2.0/3) : (4.0/3)
 					end
 				end
 			end
 			#Battery
-			if attacker.pbPartner.ability == :BATTERY && move.pbIsSpecial?(type)
+			if attacker.pbPartner.hasAbility?(:BATTERY) && move.pbIsSpecial?(type)
 				atk=(atk*1.3).round
 			end
 			#Flower Gift
 			if @battle.pbWeather== :SUNNYDAY && move.pbIsPhysical?(type)
-				if attacker.ability == :FLOWERGIFT && attacker.species == :CHERRIM
+				if attacker.hasAbility?(:FLOWERGIFT) && attacker.species == :CHERRIM
 					atk=(atk*1.5).round
 				end
-				if attacker.pbPartner.ability == :FLOWERGIFT && attacker.pbPartner.species == :CHERRIM
+				if attacker.pbPartner.hasAbility?(:FLOWERGIFT) && attacker.pbPartner.species == :CHERRIM
 					atk=(atk*1.5).round
 				end
 			end
@@ -10010,31 +10010,31 @@ class PokeBattle_AI
 
 		# Pinch Abilities
 		if @mondata.skill>=BESTSKILL
-			if @battle.FE == :BURNING && attacker.ability == :BLAZE && type == :FIRE
+			if @battle.FE == :BURNING && attacker.hasAbility?(:BLAZE) && type == :FIRE
 				atk=(atk*1.5).round
-			elsif @battle.FE == :FOREST && attacker.ability == :OVERGROW && type == :GRASS
+			elsif @battle.FE == :FOREST && attacker.hasAbility?(:OVERGROW) && type == :GRASS
 				atk=(atk*1.5).round
-			elsif @battle.FE == :FOREST && attacker.ability == :SWARM && type == :BUG
+			elsif @battle.FE == :FOREST && attacker.hasAbility?(:SWARM) && type == :BUG
 				atk=(atk*1.5).round
-			elsif (@battle.FE == :WATERSURFACE || @battle.FE == :UNDERWATER) && attacker.ability == :TORRENT && type == :WATER
+			elsif (@battle.FE == :WATERSURFACE || @battle.FE == :UNDERWATER) && attacker.hasAbility?(:TORRENT) && type == :WATER
 				atk=(atk*1.5).round
-			elsif @battle.ProgressiveFieldCheck(PBFields::FLOWERGARDEN) && attacker.ability == :SWARM && type == :BUG
+			elsif @battle.ProgressiveFieldCheck(PBFields::FLOWERGARDEN) && attacker.hasAbility?(:SWARM) && type == :BUG
 				atk=(atk*1.5).round if @battle.ProgressiveFieldCheck(PBFields::FLOWERGARDEN,1,2)
 				atk=(atk*1.8).round if @battle.ProgressiveFieldCheck(PBFields::FLOWERGARDEN,3,4)
 				atk=(atk*2).round if @battle.FE == :FLOWERGARDEN5
-			elsif @battle.ProgressiveFieldCheck(PBFields::FLOWERGARDEN) && attacker.ability == :OVERGROW && type == :GRASS
+			elsif @battle.ProgressiveFieldCheck(PBFields::FLOWERGARDEN) && attacker.hasAbility?(:OVERGROW) && type == :GRASS
 				atk=(atk*1.5).round if @battle.ProgressiveFieldCheck(PBFields::FLOWERGARDEN,1,2)
 				atk=(atk*1.8).round if @battle.ProgressiveFieldCheck(PBFields::FLOWERGARDEN,3,4)
 				atk=(atk*2).round if @battle.FE == :FLOWERGARDEN5
 			elsif attacker.hp<=(attacker.totalhp/3.0).floor
-				if (attacker.ability == :OVERGROW && type == :GRASS) || (attacker.ability == :BLAZE && type == :FIRE) ||
-					(attacker.ability == :TORRENT && type == :WATER) || (attacker.ability == :SWARM && type == :BUG)
+				if (attacker.hasAbility?(:OVERGROW) && type == :GRASS) || (attacker.hasAbility?(:BLAZE) && type == :FIRE) ||
+					(attacker.hasAbility?(:TORRENT) && type == :WATER) || (attacker.hasAbility?(:SWARM) && type == :BUG)
 					atk=(atk*1.5).round
 				end
 			end
 		elsif @mondata.skill>=MEDIUMSKILL && attacker.hp<=(attacker.totalhp/3.0).floor
-			if (attacker.ability == :OVERGROW && type == :GRASS) || (attacker.ability == :BLAZE && type == :FIRE) ||
-				(attacker.ability == :TORRENT && type == :WATER) || (attacker.ability == :SWARM && type == :BUG)
+			if (attacker.hasAbility?(:OVERGROW) && type == :GRASS) || (attacker.hasAbility?(:BLAZE) && type == :FIRE) ||
+				(attacker.hasAbility?(:TORRENT) && type == :WATER) || (attacker.hasAbility?(:SWARM) && type == :BUG)
 				atk=(atk*1.5).round
 			end
 		end
@@ -10063,13 +10063,13 @@ class PokeBattle_AI
 		#Specific ability field boosts
 		if @mondata.skill>=BESTSKILL
 			if @battle.FE == :STARLIGHT || @battle.FE == :NEWWORLD
-				atk=(atk*1.5).round if attacker.ability == :VICTORYSTAR
+				atk=(atk*1.5).round if attacker.hasAbility?(:VICTORYSTAR)
 				partner=attacker.pbPartner
-				atk=(atk*1.5).round if partner && partner.ability == :VICTORYSTAR
+				atk=(atk*1.5).round if partner && partner.hasAbility?(:VICTORYSTAR)
 			end
-			atk=(atk*1.5).round if attacker.ability == :QUEENLYMAJESTY && (@battle.FE == :CHESS || @battle.FE == :FAIRYTALE)
-			atk=(atk*1.5).round if attacker.ability == :LONGREACH && (@battle.FE == :MOUNTAIN || @battle.FE == :SNOWYMOUNTAIN)
-			atk=(atk*1.5).round if attacker.ability == :CORROSION && (@battle.FE == :CORROSIVE || @battle.FE == :CORROSIVEMIST)
+			atk=(atk*1.5).round if attacker.hasAbility?(:QUEENLYMAJESTY) && (@battle.FE == :CHESS || @battle.FE == :FAIRYTALE)
+			atk=(atk*1.5).round if attacker.hasAbility?(:LONGREACH) && (@battle.FE == :MOUNTAIN || @battle.FE == :SNOWYMOUNTAIN)
+			atk=(atk*1.5).round if attacker.hasAbility?(:CORROSION) && (@battle.FE == :CORROSIVE || @battle.FE == :CORROSIVEMIST)
 			atk=(atk*0.5).round if @battle.FE == :UNDERWATER && move.pbIsPhysical?(type) && type != :WATER && attacker.ability!=:STEELWORKER
 		end
 
@@ -10082,14 +10082,14 @@ class PokeBattle_AI
 				defense=opponent.spdef
 				defstage=opponent.stages[PBStats::SPDEF]+6
 				if @battle.FE == :GLITCH
-					defense = opponent.getSpecialStat(attacker.ability == :UNAWARE)
+					defense = opponent.getSpecialStat(attacker.hasAbility?(:UNAWARE))
 					defstage = 6 #getspecialstat handles unaware
 				end
 				applysandstorm=true
 			end
 		end
 		defstage=6 if move.function==0xA9 # Chip Away (ignore stat stages)
-		defstage=6 if attacker.ability == :UNAWARE
+		defstage=6 if attacker.hasAbility?(:UNAWARE)
 		defense=(defense*1.0*stagemul[defstage]/stagediv[defstage]).floor
 		defense = 1 if (defense == 0 || !defense)
 
@@ -10106,7 +10106,7 @@ class PokeBattle_AI
 				defense=(defense*1.5).round if opponent.hasType?(:ROCK) && applysandstorm
 			end
 			# Defensive Abilities
-			if opponent.ability == :MARVELSCALE
+			if opponent.hasAbility?(:MARVELSCALE)
 				if move.pbIsPhysical?(type)
 					if !opponent.status.nil?
 						defense=(defense*1.5).round
@@ -10114,19 +10114,19 @@ class PokeBattle_AI
 						defense=(defense*1.5).round
 					end
 				end
-			elsif opponent.ability == :GRASSPELT
+			elsif opponent.hasAbility?(:GRASSPELT)
 				defense=(defense*1.5).round if move.pbIsPhysical?(type) && (@battle.FE == :GRASSY || @battle.FE == :FOREST) # Grassy Field
-			elsif opponent.ability == :FLUFFY && !moldBreakerCheck(attacker)
+			elsif opponent.hasAbility?(:FLUFFY) && !moldBreakerCheck(attacker)
 				defense=(defense*2).round if !move.zmove &&move.contactMove? && attacker.ability != :LONGREACH
 				defense=(defense*0.5).round if type == :FIRE
-			elsif opponent.ability == :FURCOAT
+			elsif opponent.hasAbility?(:FURCOAT)
 				defense=(defense*2).round if move.pbIsPhysical?(type) && !moldBreakerCheck(attacker)
-			elsif opponent.ability == :ICESCALES
+			elsif opponent.hasAbility?(:ICESCALES)
 				defense=(defense*2).round if move.pbIsSpecial?(type) && !moldBreakerCheck(attacker)
 			end
 			if (@battle.pbWeather== :SUNNYDAY || @battle.ProgressiveFieldCheck(PBFields::FLOWERGARDEN)) && move.pbIsSpecial?(type) && @battle.FE != :GLITCH
-				defense=(defense*1.5).round if opponent.ability == :FLOWERGIFT && (opponent.species == :CHERRIM)
-				defense=(defense*1.5).round if opponent.pbPartner.ability == :FLOWERGIFT && opponent.pbPartner.species == :CHERRIM
+				defense=(defense*1.5).round if opponent.hasAbility?(:FLOWERGIFT) && (opponent.species == :CHERRIM)
+				defense=(defense*1.5).round if opponent.pbPartner.hasAbility?(:FLOWERGIFT) && opponent.pbPartner.species == :CHERRIM
 			end
 		end
 
@@ -10227,16 +10227,16 @@ class PokeBattle_AI
 		# STAB
 		if @mondata.skill>=MEDIUMSKILL
 			# Water Bubble
-			if attacker.ability == :WATERBUBBLE && type == :WATER
+			if attacker.hasAbility?(:WATERBUBBLE) && type == :WATER
 				damage=(damage*=2).round
 			end
-			if attacker.hasType?(type) || attacker.ability == :PROTEAN || attacker.ability == :LIBERO
-				if attacker.ability == :ADAPTABILITY
+			if attacker.hasType?(type) || attacker.hasAbility?(:PROTEAN) || attacker.hasAbility?(:LIBERO)
+				if attacker.hasAbility?(:ADAPTABILITY)
 					damage=(damage*2).round
 				else
 					damage=(damage*1.5).round
 				end
-			elsif attacker.ability == :STEELWORKER && type == :STEEL
+			elsif attacker.hasAbility?(:STEELWORKER) && type == :STEEL
 				if @battle.FE == :FACTORY # Factory Field
 					damage=(damage*2).round
 				else
@@ -10251,7 +10251,7 @@ class PokeBattle_AI
 		end
 		# Water Bubble
 		if @mondata.skill>=MEDIUMSKILL
-			if opponent.ability == :WATERBUBBLE && type == :FIRE
+			if opponent.hasAbility?(:WATERBUBBLE) && type == :FIRE
 				damage=(damage*=0.5).round
 			end
 			# Burn
@@ -10282,34 +10282,34 @@ class PokeBattle_AI
 		end
 
 		if @mondata.skill>=MEDIUMSKILL
-			if opponent.ability == :MULTISCALE && !moldBreakerCheck(attacker) || opponent.ability == :SHADOWSHIELD
+			if opponent.hasAbility?(:MULTISCALE) && !moldBreakerCheck(attacker) || opponent.hasAbility?(:SHADOWSHIELD)
 				damage=(damage*0.5).round if opponent.hp==opponent.totalhp
 			end
-			if opponent.ability == :SOLIDROCK || opponent.ability == :FILTER || opponent.ability == :PRISMARMOR
+			if opponent.hasAbility?(:SOLIDROCK) || opponent.hasAbility?(:FILTER) || opponent.hasAbility?(:PRISMARMOR)
 				damage=(damage*0.75).round if typemod>4
 			end
-			if opponent.ability == :SHADOWSHIELD && [:STARLIGHT, :NEWWORLD, :DARKCRYSTALCAVERN].include?(@battle.FE)
+			if opponent.hasAbility?(:SHADOWSHIELD) && [:STARLIGHT, :NEWWORLD, :DARKCRYSTALCAVERN].include?(@battle.FE)
 				damage=(damage*0.75).round if typemod>4
 			end
-			if opponent.ability == :SHADOWSHIELD && @battle.ProgressiveFieldCheck(PBFields::DARKNESS,2,3)
+			if opponent.hasAbility?(:SHADOWSHIELD) && @battle.ProgressiveFieldCheck(PBFields::DARKNESS,2,3)
 				damage=(damage*0.33).round if opponent.hp==opponent.totalhp
 			end
-			damage=(damage*0.75).round if opponent.pbPartner.ability == :FRIENDGUARD
-			damage=(damage*2.0).round if attacker.ability == :STAKEOUT && @battle.switchedOut[opponent.index]
+			damage=(damage*0.75).round if opponent.pbPartner.hasAbility?(:FRIENDGUARD)
+			damage=(damage*2.0).round if attacker.hasAbility?(:STAKEOUT) && @battle.switchedOut[opponent.index]
 		end
 
 		if @mondata.skill>=MEDIUMSKILL
 			# Tinted Lens
-			damage=(damage*2.0).round if attacker.ability == :TINTEDLENS && typemod<4
+			damage=(damage*2.0).round if attacker.hasAbility?(:TINTEDLENS) && typemod<4
 			# Neuroforce
-			damage=(damage*1.25).round if attacker.ability == :NEUROFORCE && typemod>4
+			damage=(damage*1.25).round if attacker.hasAbility?(:NEUROFORCE) && typemod>4
 		end
 
 		# Flower Veil + Flower Garden Shenanigans
 		if @mondata.skill>=BESTSKILL
 			if @battle.ProgressiveFieldCheck(PBFields::FLOWERGARDEN,3,5)
-				if (opponent.pbPartner.ability == :FLOWERVEIL &&
-				opponent.hasType?(:GRASS)) || opponent.ability == :FLOWERVEIL
+				if (opponent.pbPartner.hasAbility?(:FLOWERVEIL) &&
+				opponent.hasType?(:GRASS)) || opponent.hasAbility?(:FLOWERVEIL)
 					damage=(damage*0.5).round
 				end
 				case @battle.FE
@@ -10334,7 +10334,7 @@ class PokeBattle_AI
 				damage=(damage*1.3).round
 			end
 			if typemod>4 && oppitemworks && !ai_mon_attacking
-				berrymod = opponent.ability == :RIPEN ? 0.25 : 0.5
+				berrymod = opponent.hasAbility?(:RIPEN) ? 0.25 : 0.5
 				case opponent.item
 					when :CHOPLEBERRY	then damage=(damage*berrymod).round if type == :FIGHTING
 					when :COBABERRY		then damage=(damage*berrymod).round if type == :FLYING
@@ -10551,7 +10551,7 @@ class PokeBattle_AI
 			when 0xBF # Triple Kick
 				return move.basedamage*6
 			when 0xC0 # Fury Attack
-				if attacker.ability == :SKILLLINK
+				if attacker.hasAbility?(:SKILLLINK)
 					return move.basedamage*5
 				else
 					return (move.basedamage*19/6).floor
@@ -10664,7 +10664,7 @@ class PokeBattle_AI
 	def mirrorNeverMiss
 		return (@attacker.stages[PBStats::ACCURACY] < 0 || @opponent.stages[PBStats::EVASION] > 0 || @opponent.item == :BRIGHTPOWDER || 
 			@opponent.item == :LAXINCENSE || accuracyWeatherAbilityActive?(@opponent) || @opponent.vanished) &&
-			 @opponent.ability != :NOGUARD && @attacker.ability != :NOGUARD && !(@attacker.ability == :FAIRYAURA && @battle.FE == :FAIRYTALE)
+			 @opponent.ability != :NOGUARD && @attacker.ability != :NOGUARD && !(@attacker.hasAbility?(:FAIRYAURA) && @battle.FE == :FAIRYTALE)
 	end
 
 	def mistExplosion
@@ -10692,9 +10692,9 @@ class PokeBattle_AI
 	def moveSuccesful?(move,attacker,opponent)
 		if move.pbIsPriorityMoveAI(attacker)
 			return false if @battle.FE == :PSYTERRAIN && !attacker.isAirborne?
-			return false if opponent.ability == :DAZZLING || opponent.ability == :QUEENLYMAJESTY || (opponent.ability == :MIRRORARMOR && @battle.FE == :STARLIGHT)
-			return false if opponent.pbPartner.ability == :DAZZLING || opponent.pbPartner.ability == :QUEENLYMAJESTY || (opponent.pbPartner.ability == :MIRRORARMOR && @battle.FE == :STARLIGHT)
-			return false if opponent.ability == :PRANKSTER && move.pbIsStatus?
+			return false if opponent.hasAbility?(:DAZZLING) || opponent.hasAbility?(:QUEENLYMAJESTY) || (opponent.hasAbility?(:MIRRORARMOR) && @battle.FE == :STARLIGHT)
+			return false if opponent.pbPartner.hasAbility?(:DAZZLING) || opponent.pbPartner.hasAbility?(:QUEENLYMAJESTY) || (opponent.pbPartner.hasAbility?(:MIRRORARMOR) && @battle.FE == :STARLIGHT)
+			return false if opponent.hasAbility?(:PRANKSTER) && move.pbIsStatus?
 		end
 		return true
 	end
@@ -10708,19 +10708,19 @@ class PokeBattle_AI
 	end
 
 	def hydrationCheck(battler)
-		return battler.ability == :HYDRATION && (@battle.pbWeather== :RAINDANCE || @battle.FE == :WATERSURFACE || @battle.FE == :UNDERWATER)
+		return battler.hasAbility?(:HYDRATION) && (@battle.pbWeather== :RAINDANCE || @battle.FE == :WATERSURFACE || @battle.FE == :UNDERWATER)
 	end
 
 	def notOHKO?(attacker,opponent, immediate = false)
 		return false if @battle.pbWeather == :HAIL && !attacker.hasType?(:ICE) && !immediate
 		return false if @battle.pbWeather == :SANDSTORM && !(attacker.hasType?(:ROCK) || attacker.hasType?(:GROUND) || attacker.hasType?(:STEEL)) && !immediate
 		return false if attacker.hp != attacker.totalhp
-		return false if attacker.ability == :PARENTALBOND || attacker.ability == :SKILLLINK
+		return false if attacker.hasAbility?(:PARENTALBOND) || attacker.hasAbility?(:SKILLLINK)
 		bestmove, damage = checkAIMovePlusDamage(opponent, attacker)
 		return false if bestmove.pbIsMultiHit && damage >= attacker.hp
 		return true  if attacker.hasWorkingItem(:FOCUSSASH)
 		return true  if @battle.FE == :CHESS && attacker.pokemon.piece==:PAWN && !attacker.damagestate.pawnsturdyused && @mondata.skill >= HIGHSKILL
-		return true	 if attacker.ability == :STURDY && !moldBreakerCheck(opponent)
+		return true	 if attacker.hasAbility?(:STURDY) && !moldBreakerCheck(opponent)
 		return false
 	end
 
@@ -10728,11 +10728,11 @@ class PokeBattle_AI
 		return true if battler.item == :IRONBALL if @battle.FE != :DEEPEARTH
 		return true if battler.effects[:Ingrain]
 		return true if battler.effects[:SmackDown]
-		return false if [:MAGNETPULL,:CONTRARY,:UNAWARE,:OBLIVIOUS].include?(battler.ability) && @battle.FE == :DEEPEARTH
+		return false if [:MAGNETPULL,:CONTRARY,:UNAWARE,:OBLIVIOUS].any? { |a| battler.hasAbility?(a) } && @battle.FE == :DEEPEARTH
 		return true if @battle.state.effects[:Gravity]!=0
 		return true if @battle.FE == :CAVE
 		return false if battler.hasType?(:FLYING) && battler.effects[:Roost]==false && @battle.FE != :INVERSE
-		return false if battler.ability == :LEVITATE
+		return false if battler.hasAbility?(:LEVITATE)
 		return false if battler.item == :AIRBALLOON && battler.itemWorks?
 		return false if battler.effects[:MagnetRise]>0
 		return false if battler.effects[:Telekinesis]>0
@@ -10740,7 +10740,7 @@ class PokeBattle_AI
 	  end
 
 	def secondaryEffectNegated?(move = @move, attacker = @attacker, opponent = @opponent)
-		return move.basedamage > 0 && ((opponent.ability == :SHIELDDUST && !([0x1C,0x1D,0x1E,0x1F,0x20,0x2D,0x2F,0x147,0x186,0x307].include?(move.function))) || attacker.ability == :SHEERFORCE)
+		return move.basedamage > 0 && ((opponent.hasAbility?(:SHIELDDUST) && !([0x1C,0x1D,0x1E,0x1F,0x20,0x2D,0x2F,0x147,0x186,0x307].include?(move.function))) || attacker.hasAbility?(:SHEERFORCE))
 	end
 
 	def seedProtection?(battler = @attacker)
@@ -10748,8 +10748,8 @@ class PokeBattle_AI
 	end
 
 	def accuracyWeatherAbilityActive?(battler)
-		return (battler.ability == :SANDVEIL && (@battle.pbWeather== :SANDSTORM || @mondata.skill >=BESTSKILL && (@battle.FE == :DESERT || @battle.FE == :ASHENBEACH))) ||
-		(battler.ability == :SNOWCLOAK && (@battle.pbWeather== :HAIL || @mondata.skill >=BESTSKILL && (@battle.FE == :ICY || @battle.FE == :SNOWYMOUNTAIN)))
+		return (battler.hasAbility?(:SANDVEIL) && (@battle.pbWeather== :SANDSTORM || @mondata.skill >=BESTSKILL && (@battle.FE == :DESERT || @battle.FE == :ASHENBEACH))) ||
+		(battler.hasAbility?(:SNOWCLOAK) && (@battle.pbWeather== :HAIL || @mondata.skill >=BESTSKILL && (@battle.FE == :ICY || @battle.FE == :SNOWYMOUNTAIN)))
 	end
 
 	def firstOpponent
diff --git a/Battle_Effects.rb b/Battle_Effects.rb
index d3ccb8b..794b47d 100644
--- a/Battle_Effects.rb
+++ b/Battle_Effects.rb
@@ -9,7 +9,7 @@ class PokeBattle_Battler
   # End of Minior streamlining
 
   def pbCanStatus?(showMessages,ignorestatus=false) #catchall true/false for situations where one can't be statused
-    if ((@ability == :FLOWERVEIL || pbPartner.ability == :FLOWERVEIL) && (hasType?(:GRASS) || @battle.FE == :BEWITCHED)) && !(self.moldbroken)
+    if ((self.hasAbility?(:FLOWERVEIL) || pbPartner.hasAbility?(:FLOWERVEIL)) && (hasType?(:GRASS) || @battle.FE == :BEWITCHED)) && !(self.moldbroken)
       @battle.pbDisplay(_INTL("{1} is protected by Flower Veil!",pbThis)) if showMessages
       return false
     end
@@ -21,12 +21,12 @@ class PokeBattle_Battler
       @battle.pbDisplay(_INTL("Amulet Coin prevents {1} from being inflicted by status on Dragon's Den!",pbThis)) if showMessages
       return false
     end
-    if (self.ability == :LEAFGUARD && ((@battle.pbWeather== :SUNNYDAY && !hasWorkingItem(:UTILITYUMBRELLA)) ||
+    if (self.hasAbility?(:LEAFGUARD) && ((@battle.pbWeather== :SUNNYDAY && !hasWorkingItem(:UTILITYUMBRELLA)) ||
       @battle.FE == :FOREST || @battle.ProgressiveFieldCheck(PBFields::FLOWERGARDEN,2,5) || (Rejuv && @battle.FE == :GRASSY) || @battle.state.effects[:GRASSY] > 0)) && !(self.moldbroken)
       @battle.pbDisplay(_INTL("{1} is protected by Leaf Guard!",pbThis)) if showMessages
       return false
     end
-    if (!ignorestatus && !self.status.nil?) || (self.ability == :COMATOSE && @battle.FE!=:ELECTERRAIN)
+    if (!ignorestatus && !self.status.nil?) || (self.hasAbility?(:COMATOSE) && @battle.FE!=:ELECTERRAIN)
       @battle.pbDisplay(_INTL("{1} is already statused!",pbThis)) if showMessages
       return false
     end
@@ -50,12 +50,12 @@ class PokeBattle_Battler
 #===============================================================================
   def pbCanSleep?(showMessages,selfsleep=false,ignorestatus=false)
     return false if isFainted?   
-    if (!ignorestatus && status== :SLEEP) || (self.ability == :COMATOSE && @battle.FE != :ELECTERRAIN)
+    if (!ignorestatus && status== :SLEEP) || (self.hasAbility?(:COMATOSE) && @battle.FE != :ELECTERRAIN)
       @battle.pbDisplay(_INTL("{1} is already asleep!",pbThis)) if showMessages
       return false
     end
     return false if !pbCanStatus?(showMessages,ignorestatus)
-    if !(self.ability == :SOUNDPROOF)
+    if !(self.hasAbility?(:SOUNDPROOF))
       for i in 0...4
         if @battle.battlers[i].effects[:Uproar]>0
           @battle.pbDisplay(_INTL("But the uproar kept {1} awake!",pbThis(true))) if showMessages
@@ -63,17 +63,17 @@ class PokeBattle_Battler
         end
       end
     end
-    if ((self.ability == :VITALSPIRIT) || (self.ability == :INSOMNIA) || (self.ability == :SWEETVEIL))  && !(self.moldbroken)
+    if ((self.hasAbility?(:VITALSPIRIT)) || (self.hasAbility?(:INSOMNIA)) || (self.hasAbility?(:SWEETVEIL)))  && !(self.moldbroken)
          abilityname=getAbilityName(self.ability)
          @battle.pbDisplay(_INTL("{1} stayed awake using its {2}!",pbThis,abilityname)) if showMessages
          return false
     end
-    if (pbPartner.ability == :SWEETVEIL) && !(self.moldbroken)
+    if (pbPartner.hasAbility?(:SWEETVEIL)) && !(self.moldbroken)
       abilityname=getAbilityName(pbPartner.ability)
       @battle.pbDisplay(_INTL("{1} stayed awake using its partner's {2}!",pbThis,abilityname)) if showMessages
       return false
     end
-    if self.ability == :WORLDOFNIGHTMARES
+    if self.hasAbility?(:WORLDOFNIGHTMARES)
       @battle.pbDisplay(_INTL("{1}'s dreams jolted them right back up!",pbThis)) if showMessages
       return false
     end
@@ -85,7 +85,7 @@ class PokeBattle_Battler
       @battle.pbDisplay(_INTL("The concert is too loud and hype to sleep!",pbThis)) if showMessages
       return false
     end
-    if self.ability == :EARLYBIRD && !(self.moldbroken) && @battle.FE == :SKY
+    if self.hasAbility?(:EARLYBIRD) && !(self.moldbroken) && @battle.FE == :SKY
       @battle.pbDisplay(_INTL("{1} can't fall asleep in the open skies!",pbThis)) if showMessages
       return false
     end
@@ -94,19 +94,19 @@ class PokeBattle_Battler
 
   def pbCanSleepYawn?
     return false if !pbCanStatus?(true)
-    if !(@ability == :SOUNDPROOF)
+    if !(self.hasAbility?(:SOUNDPROOF))
       for i in 0...4
         return false if @battle.battlers[i].effects[:Uproar]>0
       end
     end
-    if ((@ability == :VITALSPIRIT) || (@ability == :INSOMNIA)) &&  !(self.moldbroken) || pbShieldsUp?
+    if ((self.hasAbility?(:VITALSPIRIT)) || (self.hasAbility?(:INSOMNIA))) &&  !(self.moldbroken) || pbShieldsUp?
       return false
     end
-    if (pbPartner.ability == :SWEETVEIL || @ability == :SWEETVEIL) && !(self.moldbroken)
+    if (pbPartner.hasAbility?(:SWEETVEIL) || self.hasAbility?(:SWEETVEIL)) && !(self.moldbroken)
        @battle.pbDisplay(_INTL("{1} is protected by Sweet Veil!",pbThis)) #if showMessages
       return false
     end
-    if @ability == :WORLDOFNIGHTMARES
+    if self.hasAbility?(:WORLDOFNIGHTMARES)
       @battle.pbDisplay(_INTL("{1}'s dreams jolted them right back up!",pbThis))
       return false
     end
@@ -153,11 +153,11 @@ class PokeBattle_Battler
       @battle.pbDisplay(_INTL("It doesn't affect {1}...",pbThis(true))) if showMessages
       return false
     end
-    if ((self.ability == :IMMUNITY) || (self.ability == :PASTELVEIL && @battle.FE != :INFERNAL))  && !(self.moldbroken)
+    if ((self.hasAbility?(:IMMUNITY)) || (self.hasAbility?(:PASTELVEIL) && @battle.FE != :INFERNAL))  && !(self.moldbroken)
         @battle.pbDisplay(_INTL("{1}'s {2} prevents poisoning!",pbThis,getAbilityName(self.ability))) if showMessages
         return false
     end
-    if (pbPartner.ability == :PASTELVEIL && @battle.FE != :INFERNAL) && !(self.moldbroken)
+    if (pbPartner.hasAbility?(:PASTELVEIL) && @battle.FE != :INFERNAL) && !(self.moldbroken)
       abilityname=getAbilityName(pbPartner.ability)
       @battle.pbDisplay(_INTL("{1} stayed healthy using its partner's {2}!",pbThis,abilityname)) if showMessages
       return false
@@ -173,13 +173,13 @@ class PokeBattle_Battler
         opponent.pbThis,getAbilityName(opponent.ability),pbThis(true)))
       return false
     end
-    if ((self.ability == :IMMUNITY) || (self.ability == :PASTELVEIL && @battle.FE != :INFERNAL))
+    if ((self.hasAbility?(:IMMUNITY)) || (self.hasAbility?(:PASTELVEIL) && @battle.FE != :INFERNAL))
       @battle.pbDisplay(_INTL("{1}'s {2} prevents {3}'s {4} from working!",
       pbThis,getAbilityName(self.ability),
       opponent.pbThis(true),getAbilityName(opponent.ability)))
       return false
     end
-    if (pbPartner.ability == :PASTELVEIL && @battle.FE != :INFERNAL)
+    if (pbPartner.hasAbility?(:PASTELVEIL) && @battle.FE != :INFERNAL)
       abilityname=getAbilityName(pbPartner.ability)
       @battle.pbDisplay(_INTL("{1} stayed healthy using its partner's {2}!",pbThis,abilityname)) if showMessages
       return false
@@ -191,10 +191,10 @@ class PokeBattle_Battler
     return false if isFainted?
     return false if !pbCanStatus?(showMessages)
     return false if hasType?(:POISON) || hasType?(:STEEL)
-    return false if (self.ability == :IMMUNITY)
-    return false if (self.ability == :PASTELVEIL && @battle.FE != :INFERNAL)
+    return false if (self.hasAbility?(:IMMUNITY))
+    return false if (self.hasAbility?(:PASTELVEIL) && @battle.FE != :INFERNAL)
 
-    if (pbPartner.ability == :PASTELVEIL && @battle.FE != :INFERNAL) && !(self.moldbroken)
+    if (pbPartner.hasAbility?(:PASTELVEIL) && @battle.FE != :INFERNAL) && !(self.moldbroken)
       abilityname=getAbilityName(pbPartner.ability)
       @battle.pbDisplay(_INTL("{1} stayed healthy using its partner's {2}!",pbThis,abilityname)) if showMessages
       return false
@@ -228,7 +228,7 @@ class PokeBattle_Battler
       return false
     end
     return false if !pbCanStatus?(showMessages)
-    if (self.ability == :WATERBUBBLE) && !(self.moldbroken)
+    if (self.hasAbility?(:WATERBUBBLE)) && !(self.moldbroken)
       @battle.pbDisplay(_INTL("{1} is protected by its Water Bubble!",pbThis)) if showMessages
       return false
     end
@@ -236,7 +236,7 @@ class PokeBattle_Battler
       @battle.pbDisplay(_INTL("It doesn't affect {1}...",pbThis(true))) if showMessages
       return false
     end
-    if (self.ability == :WATERVEIL) && !(self.moldbroken)
+    if (self.hasAbility?(:WATERVEIL)) && !(self.moldbroken)
       @battle.pbDisplay(_INTL("{1}'s {2} prevents burns!",pbThis,getAbilityName(self.ability))) if showMessages
       return false
     end
@@ -247,7 +247,7 @@ class PokeBattle_Battler
   def pbCanBurnSynchronize?(opponent,showMessages=false)
     return false if isFainted?
     return false if !pbCanStatus?(showMessages)
-    if (self.ability == :WATERBUBBLE) && !(self.moldbroken)
+    if (self.hasAbility?(:WATERBUBBLE)) && !(self.moldbroken)
       @battle.pbDisplay(_INTL("{1} is protected by its Water Bubble!",pbThis)) if showMessages
       return false
     end
@@ -256,7 +256,7 @@ class PokeBattle_Battler
           opponent.pbThis,getAbilityName(opponent.ability),pbThis(true)))
       return false
     end
-    if (self.ability == :WATERVEIL)
+    if (self.hasAbility?(:WATERVEIL))
       @battle.pbDisplay(_INTL("{1}'s {2} prevents {3}'s {4} from working!",
       pbThis,getAbilityName(self.ability),
       opponent.pbThis(true),getAbilityName(opponent.ability)))
@@ -291,7 +291,7 @@ class PokeBattle_Battler
       @battle.pbDisplay(_INTL("But it failed!")) if showMessages
       return false
     end
-    if (self.ability == :LIMBER) && !(self.moldbroken)
+    if (self.hasAbility?(:LIMBER)) && !(self.moldbroken)
         @battle.pbDisplay(_INTL("{1}'s {2} prevents paralysis!",pbThis,getAbilityName(self.ability))) if showMessages
         return false
     end
@@ -303,7 +303,7 @@ class PokeBattle_Battler
     if hasType?(:ELECTRIC)
       return false
     end
-    if (self.ability == :LIMBER)
+    if (self.hasAbility?(:LIMBER))
         @battle.pbDisplay(_INTL("{1}'s {2} prevents {3}'s {4} from working!",
         pbThis,getAbilityName(self.ability),
         opponent.pbThis(true),getAbilityName(opponent.ability)))
@@ -363,7 +363,7 @@ class PokeBattle_Battler
     return false if !pbCanStatus?(showMessages)
     return false if self.hasType?(:ICE)
     return false if @battle.pbWeather==:SUNNYDAY && !hasWorkingItem(:UTILITYUMBRELLA)
-    return false if self.ability == :MAGMAARMOR && !(self.moldbroken) && @battle.FE != :FROZENDIMENSION
+    return false if self.hasAbility?(:MAGMAARMOR) && !(self.moldbroken) && @battle.FE != :FROZENDIMENSION
     return false if @battle.FE == :VOLCANIC    
     return true
   end
@@ -439,11 +439,11 @@ class PokeBattle_Battler
       @battle.pbDisplay(_INTL("{1} is already confused!",pbThis)) if showMessages
       return false
     end
-    if (self.ability == :OWNTEMPO) && !(self.moldbroken && moldbreakercheck)
+    if (self.hasAbility?(:OWNTEMPO)) && !(self.moldbroken && moldbreakercheck)
       @battle.pbDisplay(_INTL("{1}'s {2} prevents confusion!",pbThis,getAbilityName(self.ability))) if showMessages
       return false
     end
-    if @battle.FE == :ASHENBEACH && (hasType?(:FIGHTING) || (self.ability == :INNERFOCUS))
+    if @battle.FE == :ASHENBEACH && (hasType?(:FIGHTING) || (self.hasAbility?(:INNERFOCUS)))
       @battle.pbDisplay(_INTL("{1} broke through the confusion!",pbThis)) if showMessages
       return false
     end
@@ -455,7 +455,7 @@ class PokeBattle_Battler
   end
 
   def pbConfuseSelf
-    if @effects[:Confusion]==0 && !(self.ability == :OWNTEMPO)
+    if @effects[:Confusion]==0 && !(self.hasAbility?(:OWNTEMPO))
       @effects[:Confusion]=2+@battle.pbRandom(4)
       @battle.pbCommonAnimation("Confusion",self,nil)
       @battle.pbDisplay(_INTL("{1} became confused!",pbThis))
@@ -523,7 +523,7 @@ class PokeBattle_Battler
   end
 
   def pbIncreaseStatBasic(stat,increment)
-    increment*=2 if (self.ability == :SIMPLE) && !(self.moldbroken)
+    increment*=2 if (self.hasAbility?(:SIMPLE)) && !(self.moldbroken)
     @stages[stat]+=increment
     @stages[stat]=6 if @stages[stat]>6
     @effects[:BurningJealousy] = true
@@ -533,7 +533,7 @@ class PokeBattle_Battler
   # changed from: def pbIncreaseStat(stat,increment,showMessages,attacker=nil,upanim=true)
   def pbIncreaseStat(stat, increment, abilitymessage:true, statmessage:true)
     # Contrary handling
-    if (self.ability == :CONTRARY) && !(self.moldbroken) && !@statrepeat
+    if (self.hasAbility?(:CONTRARY)) && !(self.moldbroken) && !@statrepeat
       @statrepeat = true
       return pbReduceStat(stat,increment,abilitymessage:abilitymessage,statmessage:statmessage)
     end
@@ -551,7 +551,7 @@ class PokeBattle_Battler
       # Battle message
       arrStatTexts=[_INTL("{1}'s {2} rose!",pbThis,pbGetStatName(stat)), _INTL("{1}'s {2} rose sharply!",pbThis,pbGetStatName(stat)),
          _INTL("{1}'s {2} rose drastically!",pbThis,pbGetStatName(stat)), _INTL("{1}'s {2} went way up!",pbThis,pbGetStatName(stat))]
-      increment*=2 if (self.ability == :SIMPLE) && !(self.moldbroken)
+      increment*=2 if (self.hasAbility?(:SIMPLE)) && !(self.moldbroken)
       if increment>3
         @battle.pbDisplay(arrStatTexts[3]) if statmessage
       elsif increment==3
@@ -573,7 +573,7 @@ class PokeBattle_Battler
   # Decrease stat stages
   #===============================================================================
   def pbTooLow?(stat)
-    return @stages[stat]<=-1 if self.ability == :EXECUTION && (stat == PBStats::ATTACK || stat == PBStats::SPATK)
+    return @stages[stat]<=-1 if self.hasAbility?(:EXECUTION) && (stat == PBStats::ATTACK || stat == PBStats::SPATK)
     return @stages[stat]<=-6
   end
 
@@ -593,23 +593,23 @@ class PokeBattle_Battler
         @battle.pbDisplay(_INTL("{1} is protected by Mist!",pbThis)) if showMessages
         return false
       end
-      if (((self.ability == :CLEARBODY) || (self.ability == :WHITESMOKE)) && !(self.moldbroken)) || (self.ability == :FULLMETALBODY)
+      if (((self.hasAbility?(:CLEARBODY)) || (self.hasAbility?(:WHITESMOKE))) && !(self.moldbroken)) || (self.hasAbility?(:FULLMETALBODY))
         @battle.pbDisplay(_INTL("{1}'s {2} prevents stat loss!",pbThis,abilityname)) if showMessages
         return false
       end
-      if stat==PBStats::ATTACK && (self.ability == :HYPERCUTTER) && !(self.moldbroken)
+      if stat==PBStats::ATTACK && (self.hasAbility?(:HYPERCUTTER)) && !(self.moldbroken)
         @battle.pbDisplay(_INTL("{1}'s {2} prevents Attack loss!",pbThis,abilityname)) if showMessages
         return false
       end
-      if stat==PBStats::DEFENSE && (self.ability == :BIGPECKS) && !(self.moldbroken)
+      if stat==PBStats::DEFENSE && (self.hasAbility?(:BIGPECKS)) && !(self.moldbroken)
         @battle.pbDisplay(_INTL("{1}'s {2} prevents Defense loss!",pbThis,abilityname)) if showMessages
         return false
       end
-      if stat==PBStats::ACCURACY && !(self.moldbroken) && (self.ability == :KEENEYE)
+      if stat==PBStats::ACCURACY && !(self.moldbroken) && (self.hasAbility?(:KEENEYE))
         @battle.pbDisplay(_INTL("{1}'s {2} prevents Accuracy loss!",pbThis,abilityname)) if showMessages
         return false
       end
-      if (((ability == :FLOWERVEIL) || (pbPartner.ability == :FLOWERVEIL)) && (hasType?(:GRASS) || @battle.FE == :BEWITCHED)) && !(self.moldbroken)
+      if (((ability == :FLOWERVEIL) || (pbPartner.hasAbility?(:FLOWERVEIL))) && (hasType?(:GRASS) || @battle.FE == :BEWITCHED)) && !(self.moldbroken)
         @battle.pbDisplay(_INTL("{1} is protected by Flower Veil!",pbThis)) if showMessages
         return false
       end
@@ -622,7 +622,7 @@ class PokeBattle_Battler
   end
 
   def pbReduceStatBasic(stat,increment)
-    increment*=2 if (self.ability == :SIMPLE) && !(self.moldbroken)
+    increment*=2 if (self.hasAbility?(:SIMPLE)) && !(self.moldbroken)
     @stages[stat]-=increment
     @stages[stat]=-6 if @stages[stat]<-6
     @statLowered = true
@@ -631,7 +631,7 @@ class PokeBattle_Battler
 
   def pbReduceStat(stat,increment,abilitymessage:true,statmessage:true, statdropper: nil, defiant_proc: true, mirrordrop: false)
     # here we play uno reverse if we have Mirror Armor
-    if (self.ability == :MIRRORARMOR) && !mirrordrop && !(self.moldbroken)
+    if (self.hasAbility?(:MIRRORARMOR)) && !mirrordrop && !(self.moldbroken)
       if !statdropper.nil?
         if statdropper.hp!=0
           @battle.pbDisplay(_INTL("{1}'s Mirror Armor reflected the stat drop!", pbThis))
@@ -652,7 +652,7 @@ class PokeBattle_Battler
     end
 
     # here we call increase if we have contrary
-    if (self.ability == :CONTRARY) && !@statrepeat && !(self.moldbroken)
+    if (self.hasAbility?(:CONTRARY)) && !@statrepeat && !(self.moldbroken)
       @statrepeat = true
       return pbIncreaseStat(stat,increment,abilitymessage:abilitymessage,statmessage:statmessage)
     end
@@ -668,7 +668,7 @@ class PokeBattle_Battler
       end
 
       # Battle message
-      increment*=2 if (self.ability == :SIMPLE) && !(self.moldbroken)
+      increment*=2 if (self.hasAbility?(:SIMPLE)) && !(self.moldbroken)
       harsh = ""
       harsh = "harshly " if increment==2
       harsh = "dramatically " if increment>=3
@@ -677,7 +677,7 @@ class PokeBattle_Battler
 
       # Defiant/Competitive boost
       if defiant_proc
-        if (self.ability == :DEFIANT) && pbCanIncreaseStatStage?(PBStats::ATTACK) && (statdropper.nil? || self.pbIsOpposing?(statdropper.index))
+        if (self.hasAbility?(:DEFIANT)) && pbCanIncreaseStatStage?(PBStats::ATTACK) && (statdropper.nil? || self.pbIsOpposing?(statdropper.index))
           pbIncreaseStat(PBStats::ATTACK,2,statmessage:false)
           @battle.pbDisplay(_INTL("Defiant sharply raised {1}'s Attack!", pbThis))
           if @battle.FE == :COLOSSEUM
@@ -685,7 +685,7 @@ class PokeBattle_Battler
             @battle.pbDisplay(_INTL("Defiant sharply raised {1}'s Defense!", pbThis))  
           end
         end
-        if (self.ability == :COMPETITIVE && !(Rejuv && @battle.FE == :CHESS)) && pbCanIncreaseStatStage?(PBStats::SPATK) && (statdropper.nil? || self.pbIsOpposing?(statdropper.index))
+        if (self.hasAbility?(:COMPETITIVE) && !(Rejuv && @battle.FE == :CHESS)) && pbCanIncreaseStatStage?(PBStats::SPATK) && (statdropper.nil? || self.pbIsOpposing?(statdropper.index))
           pbIncreaseStat(PBStats::SPATK,2,statmessage:false)
           @battle.pbDisplay(_INTL("Competitive sharply raised {1}'s Special Attack!", pbThis))
           if @battle.FE == :COLOSSEUM
@@ -706,8 +706,8 @@ class PokeBattle_Battler
     # Ways intimidate doesn't work
     return false if isFainted?
     return false if @effects[:Substitute]>0
-    if (self.ability == :CLEARBODY) || (self.ability == :WHITESMOKE) || (self.ability == :HYPERCUTTER) || (self.ability == :FULLMETALBODY) || 
-      (self.ability == :INNERFOCUS) || (self.ability == :OBLIVIOUS) || (self.ability == :OWNTEMPO) || (self.ability == :SCRAPPY)
+    if (self.hasAbility?(:CLEARBODY)) || (self.hasAbility?(:WHITESMOKE)) || (self.hasAbility?(:HYPERCUTTER)) || (self.hasAbility?(:FULLMETALBODY)) || 
+      (self.hasAbility?(:INNERFOCUS)) || (self.hasAbility?(:OBLIVIOUS)) || (self.hasAbility?(:OWNTEMPO)) || (self.hasAbility?(:SCRAPPY))
       abilityname=getAbilityName(self.ability)
       oppabilityname=getAbilityName(opponent.ability)
       @battle.pbDisplay(_INTL("{1}'s {2} prevented {3}'s {4} from working!", pbThis,abilityname,opponent.pbThis(true),oppabilityname))
@@ -728,14 +728,14 @@ class PokeBattle_Battler
     if @battle.FE == :CROWD && pbCanReduceStatStage?(PBStats::DEFENSE,false)
       pbReduceStat(PBStats::DEFENSE,1,statmessage:false, statdropper: opponent, defiant_proc: false)
       oppabilityname=getAbilityName(opponent.ability)
-      @battle.pbDisplay(_INTL("{1}'s {2} cuts {3}'s Defense!",opponent.pbThis, oppabilityname,pbThis(true))) if !(self.ability == :CONTRARY)
-      @battle.pbDisplay(_INTL("{1}'s {2} boosts {3}'s Defense!",opponent.pbThis, oppabilityname,pbThis(true))) if (self.ability == :CONTRARY)
+      @battle.pbDisplay(_INTL("{1}'s {2} cuts {3}'s Defense!",opponent.pbThis, oppabilityname,pbThis(true))) if !(self.hasAbility?(:CONTRARY))
+      @battle.pbDisplay(_INTL("{1}'s {2} boosts {3}'s Defense!",opponent.pbThis, oppabilityname,pbThis(true))) if (self.hasAbility?(:CONTRARY))
       # Defiant/Competitive
-      if (self.ability == :DEFIANT)
+      if (self.hasAbility?(:DEFIANT))
         pbIncreaseStat(PBStats::ATTACK,2,statmessage:false)
         @battle.pbDisplay(_INTL("Defiant sharply raised {1}'s Attack!", pbThis))
       end
-      if (self.ability == :COMPETITIVE && !(Rejuv && @battle.FE == :CHESS))
+      if (self.hasAbility?(:COMPETITIVE) && !(Rejuv && @battle.FE == :CHESS))
         pbIncreaseStat(PBStats::SPATK,2,statmessage:false)
         @battle.pbDisplay(_INTL("Competitive sharply raised {1}'s Special Attack!", pbThis))
       end
@@ -744,20 +744,20 @@ class PokeBattle_Battler
       pbReduceStat(PBStats::ATTACK,1,statmessage:false, statdropper: opponent, defiant_proc: false)
       # Battle message
       oppabilityname=getAbilityName(opponent.ability)
-      @battle.pbDisplay(_INTL("{1}'s {2} cuts {3}'s Attack!",opponent.pbThis, oppabilityname,pbThis(true))) if !(self.ability == :CONTRARY)
-      @battle.pbDisplay(_INTL("{1}'s {2} boosts {3}'s Attack!",opponent.pbThis, oppabilityname,pbThis(true))) if (self.ability == :CONTRARY)
+      @battle.pbDisplay(_INTL("{1}'s {2} cuts {3}'s Attack!",opponent.pbThis, oppabilityname,pbThis(true))) if !(self.hasAbility?(:CONTRARY))
+      @battle.pbDisplay(_INTL("{1}'s {2} boosts {3}'s Attack!",opponent.pbThis, oppabilityname,pbThis(true))) if (self.hasAbility?(:CONTRARY))
 
-      if (self.ability == :RATTLED)
+      if (self.hasAbility?(:RATTLED))
         pbIncreaseStat(PBStats::SPEED,1,statmessage:false)
         @battle.pbDisplay(_INTL("{1}'s Rattled raised its Speed!", pbThis))
       end
 
       # Defiant/Competitive
-      if (self.ability == :DEFIANT)
+      if (self.hasAbility?(:DEFIANT))
         pbIncreaseStat(PBStats::ATTACK,2,statmessage:false)
         @battle.pbDisplay(_INTL("Defiant sharply raised {1}'s Attack!", pbThis))
       end
-      if (self.ability == :COMPETITIVE && !(Rejuv && @battle.FE == :CHESS))
+      if (self.hasAbility?(:COMPETITIVE) && !(Rejuv && @battle.FE == :CHESS))
         pbIncreaseStat(PBStats::SPATK,2,statmessage:false)
         @battle.pbDisplay(_INTL("Competitive sharply raised {1}'s Special Attack!", pbThis))
       end
@@ -795,8 +795,8 @@ class PokeBattle_Battler
     # Ways illuminate doesn't work
     return false if isFainted?
     return false if @effects[:Substitute]>0
-    if (self.ability == :CLEARBODY) || (self.ability == :WHITESMOKE) ||
-      (self.ability == :FULLMETALBODY) || (self.ability == :KEENEYE)
+    if (self.hasAbility?(:CLEARBODY)) || (self.hasAbility?(:WHITESMOKE)) ||
+      (self.hasAbility?(:FULLMETALBODY)) || (self.hasAbility?(:KEENEYE))
       abilityname=getAbilityName(self.ability)
       oppabilityname=getAbilityName(opponent.ability)
       @battle.pbDisplay(_INTL("{1}'s {2} prevented {3}'s {4} from working!",
diff --git a/Battle_Field.rb b/Battle_Field.rb
index be6c576..1e197db 100644
--- a/Battle_Field.rb
+++ b/Battle_Field.rb
@@ -348,7 +348,7 @@ class PokeBattle_Battle
     eval(fieldmove[:changeeffect]) if fieldmove[:changeeffect]
     newfield = fieldmove[:fieldchange]
     newfield = :INDOOR if Rejuv && @field.effect ==:ICY && [:WATERSURFACE,:MURKWATERSURFACE,:CAVE].include?(@battle.field.backup)
-    if ProgressiveFieldCheck(PBFields::FLOWERGARDEN,1,3) && user.ability == :RIPEN && 
+    if ProgressiveFieldCheck(PBFields::FLOWERGARDEN,1,3) && user.hasAbility?(:RIPEN) && 
       (PBFields::FLOWERGARDEN.index(@field.effect) < PBFields::FLOWERGARDEN.index(newfield))
       newfieldmove = ($cache.FEData[newfield]).moveData(basemove.move)
       newfield = newfieldmove[:fieldchange]
@@ -407,9 +407,9 @@ class PokeBattle_Battle
         next if combustdamage == 0
         next if PBStuff::TWOTURNMOVE.include?(i.effects[:TwoTurnAttack])
         next if i.pbOwnSide.effects[:WideGuard]
-        next if i.ability == :FLASHFIRE
+        next if i.hasAbility?(:FLASHFIRE)
         next if i.effects[:SkyDrop]
-        combustdamage -= 1 if (i.effects[:Endure] || i.ability == :STURDY) && @field.effect == :CORROSIVEMIST
+        combustdamage -= 1 if (i.effects[:Endure] || i.hasAbility?(:STURDY)) && @field.effect == :CORROSIVEMIST
         i.pbReduceHP(combustdamage) if combustdamage != 0
         i.pbFaint if i.isFainted?
       end
@@ -436,13 +436,13 @@ class PokeBattle_Battle
           quakedrop = 0 if i.effects[j] == true
         end
         next if quakedrop == 0
-        next if i.ability == :BULLETPROOF || i.ability == :ROCKHEAD || i.ability == :STALWART
+        next if i.hasAbility?(:BULLETPROOF) || i.hasAbility?(:ROCKHEAD) || i.hasAbility?(:STALWART)
         next if PBStuff::TWOTURNMOVE.include?(i.effects[:TwoTurnAttack])
         next if i.pbOwnSide.effects[:WideGuard]
         next if i.effects[:SkyDrop]
-        quakedrop -= 1 if i.effects[:Endure] || i.ability == :STURDY
-        quakedrop /= 2 if i.ability == :SHELLARMOR || i.ability == :BATTLEARMOR
-        quakedrop /= 3 if i.ability == :PRISMARMOR || i.ability == :SOLIDROCK
+        quakedrop -= 1 if i.effects[:Endure] || i.hasAbility?(:STURDY)
+        quakedrop /= 2 if i.hasAbility?(:SHELLARMOR) || i.hasAbility?(:BATTLEARMOR)
+        quakedrop /= 3 if i.hasAbility?(:PRISMARMOR) || i.hasAbility?(:SOLIDROCK)
         i.pbReduceHP(quakedrop) if quakedrop != 0
         i.pbFaint if i.isFainted?
       end
@@ -460,7 +460,7 @@ class PokeBattle_Battle
       end
       next if shatter == 0
       next if PBStuff::TWOTURNMOVE.include?(i.effects[:TwoTurnAttack])
-      next if i.ability == :SHELLARMOR || i.ability == :BATTLEARMOR
+      next if i.hasAbility?(:SHELLARMOR) || i.hasAbility?(:BATTLEARMOR)
       next if i.pbOwnSide.effects[:WideGuard]
       next if i.effects[:SkyDrop]
       i.pbReduceHP(shatter) if shatter != 0
@@ -505,9 +505,9 @@ class PokeBattle_Battle
   def concertNoise
     noisedamage = false
     for i in @battlers
-      if i.status == :SLEEP || i.ability == :COMATOSE
+      if i.status == :SLEEP || i.hasAbility?(:COMATOSE)
         i.status=nil if i.status == :SLEEP
-        i.ability=nil if i.ability == :COMATOSE
+        i.ability=nil if i.hasAbility?(:COMATOSE)
         i.pbReduceHP(i.totalhp/4)
         i.pbFaint if i.isFainted?
         noisedamage = true
@@ -542,7 +542,7 @@ class PokeBattle_Battle
     newfield = nil
     if @battle.ProgressiveFieldCheck(PBFields::FLOWERGARDEN,1,4)
       stagejump = 1
-      stagejump = 2 if user.ability == :RIPEN
+      stagejump = 2 if user.hasAbility?(:RIPEN)
       newindex = (PBFields::FLOWERGARDEN.index(@battle.FE))+stagejump
       newindex = 5 if newindex>5
       newfield = PBFields::FLOWERGARDEN[newindex]
@@ -759,9 +759,9 @@ class PokeBattle_Move
       defmult*=1.5 if pbHitsSpecialStat?(type) && target.hasType?(:FAIRY)
     when :DARKCRYSTALCAVERN
       defmult*=1.5 if target.hasType?(:DARK) || target.hasType?(:GHOST)
-      defmult*=1.33 if target.ability == :PRISMARMOR
+      defmult*=1.33 if target.hasAbility?(:PRISMARMOR)
     when :RAINBOW
-      defmult*=1.33 if target.ability == :PRISMARMOR
+      defmult*=1.33 if target.hasAbility?(:PRISMARMOR)
     when :DRAGONSDEN     
       defmult*=1.3 if target.hasType?(:DRAGON)
     when :NEWWORLD
@@ -773,7 +773,7 @@ class PokeBattle_Move
     when :DESERT      
       defmult*=1.5 if pbHitsSpecialStat?(type) && target.hasType?(:GROUND)
     when :CRYSTALCAVERN
-      defmult*=1.33 if target.ability == :PRISMARMOR
+      defmult*=1.33 if target.hasAbility?(:PRISMARMOR)
     when :DIMENSIONAL
       defmult*=1.5 if target.hasType?(:GHOST)
     when :FROZENDIMENSION
@@ -791,23 +791,23 @@ end
 class PokeBattle_Battler
   def burningFieldPassiveDamage?
     return false if hasType?(:FIRE) || @effects[:AquaRing]
-    return false if [:FLAREBOOST,:MAGMAARMOR,:FLAMEBODY,:FLASHFIRE].include?(@ability)
-    return false if [:WATERVEIL,:MAGICGUARD,:HEATPROOF,:WATERBUBBLE].include?(@ability)
+    return false if [:FLAREBOOST,:MAGMAARMOR,:FLAMEBODY,:FLASHFIRE].any? { |a| self.hasAbility?(a) }
+    return false if [:WATERVEIL,:MAGICGUARD,:HEATPROOF,:WATERBUBBLE].any? { |a| self.hasAbility?(a) }
     return false if $cache.moves[@effects[:TwoTurnAttack]] && [0xCA,0xCB].include?($cache.moves[@effects[:TwoTurnAttack]].function) # Dig, Dive
     return true
   end
 
   def underwaterFieldPassiveDamamge?
     return false if hasType?(:WATER) 
-    return false if @ability == :SWIFTSWIM || @ability == :MAGICGUARD
+    return false if self.hasAbility?(:SWIFTSWIM) || self.hasAbility?(:MAGICGUARD)
     return false if PBTypes.twoTypeEff(:WATER,@type1,@type2) <= 4
     return true
   end
 
   def murkyWaterSurfacePassiveDamage?
     return false if hasType?(:STEEL) || hasType?(:POISON) 
-    return false if [:POISONHEAL, :MAGICGUARD, :WONDERGUARD, :TOXICBOOST, :IMMUNITY, :PASTELVEIL].include?(@ability)
-    return false if Rejuv && @ability == :SURGESURFER
+    return false if [:POISONHEAL, :MAGICGUARD, :WONDERGUARD, :TOXICBOOST, :IMMUNITY, :PASTELVEIL].any? { |a| self.hasAbility?(a) }
+    return false if Rejuv && self.hasAbility?(:SURGESURFER)
     return false if self.species == :ZANGOOSE && self.crested
     return true
   end
diff --git a/Battle_Move.rb b/Battle_Move.rb
index bb5ad81..911f05e 100644
--- a/Battle_Move.rb
+++ b/Battle_Move.rb
@@ -257,42 +257,42 @@ class PokeBattle_Move
     typemod1 = self.fieldTypeChange(attacker,opp1,typemod)
     typemod2 = self.pbTypeModifier(darttype,attacker,opp2)
     typemod2 = self.fieldTypeChange(attacker,opp2,typemod)
-    if opp1.ability == :WONDERGUARD && typemod1 <= 4
+    if opp1.hasAbility?(:WONDERGUARD) && typemod1 <= 4
       return [opp2]
     end
-    if opp2.ability == :WONDERGUARD && typemod2 <= 4
+    if opp2.hasAbility?(:WONDERGUARD) && typemod2 <= 4
       return [opp1]
     end
     # immunity via immunity ability?
-    if (darttype = :WATER || fieldsecondtype == :WATER) && [:DRYSKIN,:WATERABSORB,:STROMDRAIN].include?(opp2.ability) and !opp2.moldbroken
+    if (darttype = :WATER || fieldsecondtype == :WATER) && [:DRYSKIN,:WATERABSORB,:STROMDRAIN].any? { |a| opp2.hasAbility?(a) } and !opp2.moldbroken
       return [opp1]
     end
-    if (darttype = :WATER || fieldsecondtype == :WATER) && [:DRYSKIN,:WATERABSORB,:STROMDRAIN].include?(opp1.ability) and !opp1.moldbroken
+    if (darttype = :WATER || fieldsecondtype == :WATER) && [:DRYSKIN,:WATERABSORB,:STROMDRAIN].any? { |a| opp1.hasAbility?(a) } and !opp1.moldbroken
       return [opp2]
     end
-    if (darttype = :ELECTRIC || fieldsecondtype == :ELECTRIC) && [:MOTORDRIVE,:VOLTABSORB,:LIGHTNINGROD].include?(opp2.ability) and !opp2.moldbroken
+    if (darttype = :ELECTRIC || fieldsecondtype == :ELECTRIC) && [:MOTORDRIVE,:VOLTABSORB,:LIGHTNINGROD].any? { |a| opp2.hasAbility?(a) } and !opp2.moldbroken
       return [opp1]
     end
-    if (darttype = :ELECTRIC || fieldsecondtype == :ELECTRIC) && [:MOTORDRIVE,:VOLTABSORB,:LIGHTNINGROD].include?(opp1.ability) and !opp1.moldbroken
+    if (darttype = :ELECTRIC || fieldsecondtype == :ELECTRIC) && [:MOTORDRIVE,:VOLTABSORB,:LIGHTNINGROD].any? { |a| opp1.hasAbility?(a) } and !opp1.moldbroken
       return [opp2]
     end
-    if (darttype = :FIRE || fieldsecondtype == :FIRE) && opp1.ability == :FLASHFIRE and !opp1.moldbroken
+    if (darttype = :FIRE || fieldsecondtype == :FIRE) && opp1.hasAbility?(:FLASHFIRE) and !opp1.moldbroken
       return [opp2]
     end
-    if (darttype = :FIRE || fieldsecondtype == :FIRE) && opp2.ability == :FLASHFIRE and !opp2.moldbroken
+    if (darttype = :FIRE || fieldsecondtype == :FIRE) && opp2.hasAbility?(:FLASHFIRE) and !opp2.moldbroken
       return [opp1]
     end
-    if (darttype = :GRASS || fieldsecondtype == :GRASS) && opp1.ability == :SAPSIPPER and !opp1.moldbroken
+    if (darttype = :GRASS || fieldsecondtype == :GRASS) && opp1.hasAbility?(:SAPSIPPER) and !opp1.moldbroken
       return [opp2]
     end
-    if (darttype = :GRASS || fieldsecondtype == :GRASS) && opp2.ability == :SAPSIPPER and !opp2.moldbroken
+    if (darttype = :GRASS || fieldsecondtype == :GRASS) && opp2.hasAbility?(:SAPSIPPER) and !opp2.moldbroken
       return [opp1]
     end
     # is dragon darts being called by a status move on a mon with prankster and is either target dark type?
-    if attacker.ability == :PRANKSTER && opp1.hasType?(:DARK) && (@battle.choices[attacker.index][2]!=self)
+    if attacker.hasAbility?(:PRANKSTER) && opp1.hasType?(:DARK) && (@battle.choices[attacker.index][2]!=self)
       return [opp2]
     end
-    if attacker.ability == :PRANKSTER && opp2.hasType?(:DARK) && (@battle.choices[attacker.index][2]!=self) 
+    if attacker.hasAbility?(:PRANKSTER) && opp2.hasType?(:DARK) && (@battle.choices[attacker.index][2]!=self) 
       return [opp1]
     end
 =begin
@@ -321,17 +321,17 @@ class PokeBattle_Move
     # if photon geyser gets to be more accurate in calculation than normal, then shell side arm also gets to aswell
     calcatkmult = 1.0
     calcatkmult *= 1.5 if attacker.hasWorkingItem(:CHOICEBAND)
-    calcatkmult *= 1.5 if attacker.ability == :HUSTLE
-    calcatkmult *= 1.5 if attacker.ability == :TOXICBOOST && (attacker.status== :POISON || @battle.FE == :CORROSIVE || @battle.FE == :CORROSIVEMIST || @battle.FE == :WASTELAND || @battle.FE == :MURKWATERSURFACE)
-    calcatkmult *= 1.5 if attacker.ability == :GUTS && !attacker.status.nil?
-    calcatkmult *= 0.5 if attacker.ability == :SLOWSTART && attacker.turncount<5 && !@battle.FE == :DEEPEARTH
-    calcatkmult *= 2 if (attacker.ability == :PUREPOWER && @battle.FE != :PSYTERRAIN) || attacker.ability == :HUGEPOWER
+    calcatkmult *= 1.5 if attacker.hasAbility?(:HUSTLE)
+    calcatkmult *= 1.5 if attacker.hasAbility?(:TOXICBOOST) && (attacker.status== :POISON || @battle.FE == :CORROSIVE || @battle.FE == :CORROSIVEMIST || @battle.FE == :WASTELAND || @battle.FE == :MURKWATERSURFACE)
+    calcatkmult *= 1.5 if attacker.hasAbility?(:GUTS) && !attacker.status.nil?
+    calcatkmult *= 0.5 if attacker.hasAbility?(:SLOWSTART) && attacker.turncount<5 && !@battle.FE == :DEEPEARTH
+    calcatkmult *= 2 if (attacker.hasAbility?(:PUREPOWER) && @battle.FE != :PSYTERRAIN) || attacker.hasAbility?(:HUGEPOWER)
     if ((@battle.pbWeather== :SUNNYDAY && !attacker.hasWorkingItem(:UTILITYUMBRELLA)) || @battle.ProgressiveFieldCheck(PBFields::FLOWERGARDEN) || @battle.FE == :BEWITCHED)
-      calcatkmult*=1.5 if attacker.ability == :FLOWERGIFT && attacker.species == :CHERRIM
-      calcatkmult*=1.5 if attacker.pbPartner.ability == :FLOWERGIFT && attacker.pbPartner.species == :CHERRIM
+      calcatkmult*=1.5 if attacker.hasAbility?(:FLOWERGIFT) && attacker.species == :CHERRIM
+      calcatkmult*=1.5 if attacker.pbPartner.hasAbility?(:FLOWERGIFT) && attacker.pbPartner.species == :CHERRIM
     end
     calcatkmult *= 2 if attacker.hasWorkingItem(:THICKCLUB) && ((attacker.pokemon.species == :CUBONE) || (attacker.pokemon.species == :MAROWAK))
-    calcatkmult *= 0.5 if attacker.status== :BURN && !(attacker.ability == :GUTS && !attacker.status.nil?)
+    calcatkmult *= 0.5 if attacker.status== :BURN && !(attacker.hasAbility?(:GUTS) && !attacker.status.nil?)
     # end attack boosts
     calcattack=(attacker.attack*1.0*(stagemul[calcattackstage]/stagediv[calcattackstage])*calcatkmult).floor
     calcspatkstage=attacker.stages[PBStats::SPATK]+6
@@ -340,12 +340,12 @@ class PokeBattle_Move
     calcspatkmult *= 1.5 if attacker.hasWorkingItem(:CHOICESPECS)
     calcspatkmult *= 2 if attacker.hasWorkingItem(:DEEPSEATOOTH) && (attacker.pokemon.species == :CLAMPERL)
     calcspatkmult *= 2 if attacker.hasWorkingItem(:LIGHTBALL) && (attacker.pokemon.species == :PIKACHU)
-    calcspatkmult *= 1.5 if attacker.ability == :FLAREBOOST && (attacker.status== :BURN || @battle.FE == :BURNING || @battle.FE == :VOLCANIC || @battle.FE == :INFERNAL) &&  @battle.FE != :FROZENDIMENSION
-    calcspatkmult *= 1.5 if attacker.ability == :MINUS && (attacker.pbPartner.ability == :PLUS || @battle.FE == :SHORTCIRCUIT || (Rejuv && @battle.FE == :ELECTERRAIN)) || @battle.state.effects[:ELECTERRAIN] > 0
-    calcspatkmult *= 1.5 if attacker.ability == :PLUS && (attacker.pbPartner.ability == :MINUS || @battle.FE == :SHORTCIRCUIT || (Rejuv && @battle.FE == :ELECTERRAIN)) || @battle.state.effects[:ELECTERRAIN] > 0
-    calcspatkmult *= 1.5 if attacker.ability == :SOLARPOWER && (@battle.pbWeather== :SUNNYDAY && !attacker.hasWorkingItem(:UTILITYUMBRELLA)) &&  @battle.FE != :FROZENDIMENSION
-    calcspatkmult *= 1.3 if attacker.pbPartner.ability == :BATTERY
-    calcspatkmult *= 2 if attacker.ability == :PUREPOWER && @battle.FE == :PSYTERRAIN
+    calcspatkmult *= 1.5 if attacker.hasAbility?(:FLAREBOOST) && (attacker.status== :BURN || @battle.FE == :BURNING || @battle.FE == :VOLCANIC || @battle.FE == :INFERNAL) &&  @battle.FE != :FROZENDIMENSION
+    calcspatkmult *= 1.5 if attacker.hasAbility?(:MINUS) && (attacker.pbPartner.hasAbility?(:PLUS) || @battle.FE == :SHORTCIRCUIT || (Rejuv && @battle.FE == :ELECTERRAIN)) || @battle.state.effects[:ELECTERRAIN] > 0
+    calcspatkmult *= 1.5 if attacker.hasAbility?(:PLUS) && (attacker.pbPartner.hasAbility?(:MINUS) || @battle.FE == :SHORTCIRCUIT || (Rejuv && @battle.FE == :ELECTERRAIN)) || @battle.state.effects[:ELECTERRAIN] > 0
+    calcspatkmult *= 1.5 if attacker.hasAbility?(:SOLARPOWER) && (@battle.pbWeather== :SUNNYDAY && !attacker.hasWorkingItem(:UTILITYUMBRELLA)) &&  @battle.FE != :FROZENDIMENSION
+    calcspatkmult *= 1.3 if attacker.pbPartner.hasAbility?(:BATTERY)
+    calcspatkmult *= 2 if attacker.hasAbility?(:PUREPOWER) && @battle.FE == :PSYTERRAIN
     # end spatk boosts
     calcspatk=(attacker.spatk*1.0*(stagemul[calcspatkstage]/stagediv[calcspatkstage])*calcspatkmult).floor
     # Calculates how much Defense and SpDef opponent has
@@ -354,13 +354,13 @@ class PokeBattle_Move
     calcdefmult = 1.0       
     calcdefmult*=1.5 if @battle.FE == :SNOWYMOUNTAIN && opponent.hasType?(:ICE) && @battle.pbWeather == :HAIL        
     calcdefmult*=1.5 if @battle.FE == :ICY && opponent.hasType?(:ICE) && @battle.pbWeather == :HAIL
-    calcdefmult*=1.5 if opponent.ability == :MARVELSCALE && (!opponent.status.nil? || ([:MISTY,:RAINBOW,:FAIRYTALE,:DRAGONSDEN,:STARLIGHT].include?(@battle.FE) || @battle.state.effects[:MISTY] > 0)) && !(opponent.moldbroken)
-    calcdefmult*=1.5 if opponent.ability == :GRASSPELT && (@battle.FE == :GRASSY || @battle.FE == :FOREST || @battle.state.effects[:GRASSY] > 0) # Grassy Field
-    calcdefmult*=2.0 if opponent.ability == :FURCOAT && !(opponent.moldbroken)
+    calcdefmult*=1.5 if opponent.hasAbility?(:MARVELSCALE) && (!opponent.status.nil? || ([:MISTY,:RAINBOW,:FAIRYTALE,:DRAGONSDEN,:STARLIGHT].include?(@battle.FE) || @battle.state.effects[:MISTY] > 0)) && !(opponent.moldbroken)
+    calcdefmult*=1.5 if opponent.hasAbility?(:GRASSPELT) && (@battle.FE == :GRASSY || @battle.FE == :FOREST || @battle.state.effects[:GRASSY] > 0) # Grassy Field
+    calcdefmult*=2.0 if opponent.hasAbility?(:FURCOAT) && !(opponent.moldbroken)
     if @battle.FE == :CLOUDS
-      calcdefmult*=4.0 if opponent.ability == :FLUFFY && attacker.ability != :LONGREACH && !(opponent.moldbroken)
+      calcdefmult*=4.0 if opponent.hasAbility?(:FLUFFY) && attacker.ability != :LONGREACH && !(opponent.moldbroken)
     else
-      calcdefmult*=2.0 if opponent.ability == :FLUFFY && attacker.ability != :LONGREACH && !(opponent.moldbroken)
+      calcdefmult*=2.0 if opponent.hasAbility?(:FLUFFY) && attacker.ability != :LONGREACH && !(opponent.moldbroken)
     end
     calcdefmult*=2.0 if opponent.hasWorkingItem(:METALPOWDER) && (opponent.pokemon.species == :DITTO) && !opponent.effects[:Transform]
     # end defense boosts
@@ -371,10 +371,10 @@ class PokeBattle_Move
     calcspdefmult*=1.5 if @battle.FE == :DESERT && opponent.hasType?(:GROUND)       
     calcspdefmult*=1.5 if @battle.FE == :MISTY && opponent.hasType?(:FAIRY)
     if ((@battle.pbWeather== :SUNNYDAY && !opponent.hasWorkingItem(:UTILITYUMBRELLA)) || @battle.ProgressiveFieldCheck(PBFields::FLOWERGARDEN) || @battle.FE == :BEWITCHED) && !(opponent.moldbroken)
-      calcspdefmult*=1.5 if opponent.ability == :FLOWERGIFT && opponent.species == :CHERRIM
-      calcspdefmult*=1.5 if opponent.pbPartner.ability == :FLOWERGIFT && opponent.pbPartner.species == :CHERRIM
+      calcspdefmult*=1.5 if opponent.hasAbility?(:FLOWERGIFT) && opponent.species == :CHERRIM
+      calcspdefmult*=1.5 if opponent.pbPartner.hasAbility?(:FLOWERGIFT) && opponent.pbPartner.species == :CHERRIM
     end
-    calcspdefmult*=2.0 if opponent.ability == :ICESCALES && !(opponent.moldbroken)
+    calcspdefmult*=2.0 if opponent.hasAbility?(:ICESCALES) && !(opponent.moldbroken)
     calcspdefmult*=1.5 if opponent.hasWorkingItem(:ASSAULTVEST)
     calcspdefmult*=2.0 if opponent.hasWorkingItem(:DEEPSEASCALE) && (opponent.pokemon.species == :CLAMPERL)
     # end spdef boosts
@@ -436,7 +436,7 @@ class PokeBattle_Move
     mod1=PBTypes.oneTypeEff(atype,otype1)
     mod2=((otype1==otype2)||otype2.nil?) ? 2 : PBTypes.oneTypeEff(atype,otype2)
     
-    if attacker.ability == :SCRAPPY || opponent.effects[:Foresight]
+    if attacker.hasAbility?(:SCRAPPY) || opponent.effects[:Foresight]
       mod1=2 if otype1 == :GHOST && (atype == :NORMAL || atype == :FIGHTING)
       mod2=2 if otype2 == :GHOST && (atype == :NORMAL || atype == :FIGHTING)
     end
@@ -454,11 +454,11 @@ class PokeBattle_Move
       mod1=2 if (otype1 == :DARK || otype1 == :GHOST) && mod1>2
       mod2=2 if (otype2 == :DARK || otype2 == :GHOST) && mod2>2
     end
-    if attacker.ability == :PIXILATE || attacker.ability == :AERILATE || attacker.ability == :DUSKILATE || attacker.ability == :REFRIGERATE || attacker.ability == :GALVANIZE || (attacker.ability == :LIQUIDVOICE && isSoundBased?)
+    if attacker.hasAbility?(:PIXILATE) || attacker.hasAbility?(:AERILATE) || attacker.hasAbility?(:DUSKILATE) || attacker.hasAbility?(:REFRIGERATE) || attacker.hasAbility?(:GALVANIZE) || (attacker.hasAbility?(:LIQUIDVOICE) && isSoundBased?)
       mod1=2 if (otype1 == :GHOST) && (atype == :NORMAL)
       mod2=2 if (otype2 == :GHOST) && (atype == :NORMAL)
     end
-    if attacker.ability == :NORMALIZE
+    if attacker.hasAbility?(:NORMALIZE)
       mod1=2 if [:GROUND,:FAIRY,:FLYING,:NORMAL,:DARK].include?(otype1)
       mod1=1 if (otype1 == :STEEL)
       mod1=0 if (otype1 == :GHOST) && !opponent.effects[:Foresight]
@@ -495,8 +495,8 @@ class PokeBattle_Move
     if @battle.FE == :SKY
       mod1=4 if (otype1 == :FLYING) && @move == :BONEMERANG
       mod2=4 if (otype2 == :FLYING) && @move == :BONEMERANG
-      mod1=4 if (otype1 == :FLYING) && attacker.ability == :LONGREACH
-      mod2=4 if (otype2 == :FLYING) && attacker.ability == :LONGREACH
+      mod1=4 if (otype1 == :FLYING) && attacker.hasAbility?(:LONGREACH)
+      mod2=4 if (otype2 == :FLYING) && attacker.hasAbility?(:LONGREACH)
     end
     if @battle.FE == :INFERNAL
       mod1=4 if (otype1 == :GHOST) && (atype == :FIRE)
@@ -515,11 +515,11 @@ class PokeBattle_Move
       mod2=2 if mod2==0
     end
     if !opponent.moldbroken
-      if (atype == :FIRE && opponent.ability == :FLASHFIRE && @battle.FE != :FROZENDIMENSION) || 
-        (atype == :GRASS && opponent.ability == :SAPSIPPER) ||
-        (atype == :WATER && (opponent.ability == :WATERABSORB || opponent.ability == :STORMDRAIN || opponent.ability == :DRYSKIN)) ||
-        (atype == :ELECTRIC && (opponent.ability == :VOLTABSORB || opponent.ability == :LIGHTNINGROD || opponent.ability == :MOTORDRIVE)) ||
-        (atype == :GROUND && opponent.ability == :LEVITATE && @battle.FE != :CAVE && @move != :THOUSANDARROWS && opponent.isAirborne?) 
+      if (atype == :FIRE && opponent.hasAbility?(:FLASHFIRE) && @battle.FE != :FROZENDIMENSION) || 
+        (atype == :GRASS && opponent.hasAbility?(:SAPSIPPER)) ||
+        (atype == :WATER && (opponent.hasAbility?(:WATERABSORB) || opponent.hasAbility?(:STORMDRAIN) || opponent.hasAbility?(:DRYSKIN))) ||
+        (atype == :ELECTRIC && (opponent.hasAbility?(:VOLTABSORB) || opponent.hasAbility?(:LIGHTNINGROD) || opponent.hasAbility?(:MOTORDRIVE))) ||
+        (atype == :GROUND && opponent.hasAbility?(:LEVITATE) && @battle.FE != :CAVE && @move != :THOUSANDARROWS && opponent.isAirborne?) 
         mod1=0
       end
     end
@@ -561,13 +561,13 @@ class PokeBattle_Move
       mod1=2 if mod1==0
       mod2=2 if mod2==0
     end
-    if (attacker.ability == :SCRAPPY)
+    if (attacker.hasAbility?(:SCRAPPY))
       mod1=2 if (otype1 == :GHOST) && ((atype == :NORMAL) || (atype == :FIGHTING))
       mod2=2 if (otype2 == :GHOST) && ((atype == :NORMAL) || (atype == :FIGHTING))
     end
     if Rejuv && @battle.FE == :ELECTERRAIN
-      mod1=2 if (otype1 == :GROUND) && (atype == :ELECTRIC) && attacker.ability == :TERAVOLT
-      mod2=2 if (otype2 == :GROUND) && (atype == :ELECTRIC) && attacker.ability == :TERAVOLT
+      mod1=2 if (otype1 == :GROUND) && (atype == :ELECTRIC) && attacker.hasAbility?(:TERAVOLT)
+      mod2=2 if (otype2 == :GROUND) && (atype == :ELECTRIC) && attacker.hasAbility?(:TERAVOLT)
     end
     if @battle.FE == :HOLY
       mod1=4 if (otype1 == :GHOST || otype1 == :DARK) && atype == :NORMAL
@@ -575,11 +575,11 @@ class PokeBattle_Move
       mod1=4 if  otype1 == :GHOST && @move == :SPIRITBREAK
       mod2=4 if  otype2 == :GHOST && @move == :SPIRITBREAK
     end
-    if (attacker.ability == :PIXILATE) || (attacker.ability == :AERILATE) || (attacker.ability == :DUSKILATE) || (attacker.ability == :REFRIGERATE) || (attacker.ability == :GALVANIZE) || ((attacker.ability == :LIQUIDVOICE) && isSoundBased?)
+    if (attacker.hasAbility?(:PIXILATE)) || (attacker.hasAbility?(:AERILATE)) || (attacker.hasAbility?(:DUSKILATE)) || (attacker.hasAbility?(:REFRIGERATE)) || (attacker.hasAbility?(:GALVANIZE)) || ((attacker.hasAbility?(:LIQUIDVOICE)) && isSoundBased?)
       mod1=2 if (otype1 == :GHOST) && (atype == :NORMAL)
       mod2=2 if (otype2 == :GHOST) && (atype == :NORMAL)
     end
-    if attacker.ability == :NORMALIZE
+    if attacker.hasAbility?(:NORMALIZE)
       mod1=2 if [:GROUND,:FAIRY,:FLYING,:NORMAL,:DARK].include?(otype1)
       mod1=1 if (otype1 == :STEEL)
       mod1=0 if (otype1 == :GHOST)
@@ -608,8 +608,8 @@ class PokeBattle_Move
     if @battle.FE == :SKY
       mod1=4 if (otype1 == :FLYING) && @move == :BONEMERANG
       mod2=4 if (otype2 == :FLYING) && @move == :BONEMERANG
-      mod1=4 if (otype1 == :FLYING) && attacker.ability == :LONGREACH
-      mod2=4 if (otype2 == :FLYING) && attacker.ability == :LONGREACH
+      mod1=4 if (otype1 == :FLYING) && attacker.hasAbility?(:LONGREACH)
+      mod2=4 if (otype2 == :FLYING) && attacker.hasAbility?(:LONGREACH)
     end
     if @battle.FE == :INFERNAL
       mod1=4 if (otype1 == :GHOST) && (atype == :FIRE)
@@ -623,7 +623,7 @@ class PokeBattle_Move
   end
 
   def pbStatusMoveAbsorption(type,attacker,opponent)
-    if opponent.ability == :SAPSIPPER && !(opponent.moldbroken) && type == :GRASS
+    if opponent.hasAbility?(:SAPSIPPER) && !(opponent.moldbroken) && type == :GRASS
       if opponent.pbCanIncreaseStatStage?(PBStats::ATTACK)
         opponent.pbIncreaseStatBasic(PBStats::ATTACK,1)
         @battle.pbCommonAnimation("StatUp",opponent,nil)
@@ -633,9 +633,9 @@ class PokeBattle_Move
       end
       return 0
     end
-    if (opponent.ability == :STORMDRAIN && type == :WATER) || (opponent.ability == :LIGHTNINGROD && type == :ELECTRIC) && !(opponent.moldbroken)
+    if (opponent.hasAbility?(:STORMDRAIN) && type == :WATER) || (opponent.hasAbility?(:LIGHTNINGROD) && type == :ELECTRIC) && !(opponent.moldbroken)
       if opponent.pbCanIncreaseStatStage?(PBStats::SPATK)
-        if (Rejuv && @battle.FE == :SHORTCIRCUIT) && opponent.ability == :LIGHTNINGROD
+        if (Rejuv && @battle.FE == :SHORTCIRCUIT) && opponent.hasAbility?(:LIGHTNINGROD)
           damageroll = @battle.field.getRoll(maximize_roll: (@battle.state.effects[:ELECTERRAIN] > 0))
           statboosts = [1,2,0,1,3]
           arrStatTexts=[_INTL("{1}'s {2} raised its Special Attack!",opponent.pbThis,getAbilityName(opponent.ability)), _INTL("{1}'s {2} sharply raised its Special Attack!",opponent.pbThis,getAbilityName(opponent.ability)),
@@ -661,7 +661,7 @@ class PokeBattle_Move
       end
       return 0
     end
-    if ((opponent.ability == :MOTORDRIVE && !(opponent.moldbroken)) || 
+    if ((opponent.hasAbility?(:MOTORDRIVE) && !(opponent.moldbroken)) || 
       (Rejuv && @battle.FE == :GLITCH && opponent.species == :GENESECT && opponent.hasWorkingItem(:SHOCKDRIVE))) &&
       type == :ELECTRIC
       negator = getAbilityName(opponent.ability)
@@ -698,17 +698,17 @@ class PokeBattle_Move
       end
       return 0
     end
-    if (!(opponent.moldbroken) && (((opponent.ability == :DRYSKIN || opponent.ability == :WATERABSORB) &&  type == :WATER) || (opponent.ability == :VOLTABSORB && type == :ELECTRIC))) ||
+    if (!(opponent.moldbroken) && (((opponent.hasAbility?(:DRYSKIN) || opponent.hasAbility?(:WATERABSORB)) &&  type == :WATER) || (opponent.hasAbility?(:VOLTABSORB) && type == :ELECTRIC))) ||
       ((Rejuv && @battle.FE == :GLITCH && opponent.species == :GENESECT && opponent.hasWorkingItem(:DOUSEDRIVE)) && type == :WATER) ||
       ((Rejuv && @battle.FE == :GLITCH && opponent.species == :GENESECT && opponent.hasWorkingItem(:CHILLDRIVE)) && type == :ICE) ||
       ((Rejuv && @battle.FE == :DESERT) && (opponent.hasType?(:GRASS) || opponent.hasType?(:WATER)) && @battle.pbWeather == :SUNNYDAY && type == :WATER)
       if opponent.effects[:HealBlock]==0
         negator = getAbilityName(opponent.ability)
-        if ![:WATERABSORB,:VOLTABSORB,:DRYSKIN].include?(opponent.ability)
+        if ![:WATERABSORB,:VOLTABSORB,:DRYSKIN].any? { |a| opponent.hasAbility?(a) }
           negator = getItemName(opponent.item) if (Rejuv && @battle.FE == :GLITCH && opponent.species == :GENESECT && (opponent.item == :DOUSEDRIVE || opponent.item == :CHILLDRIVE))
           negator = "unquenchable thirst" if (Rejuv && @battle.FE == :DESERT) && (opponent.hasType?(:GRASS) || opponent.hasType?(:WATER)) && @battle.pbWeather == :SUNNYDAY
         end
-        if (Rejuv && @battle.FE == :SHORTCIRCUIT) && opponent.ability == :VOLTABSORB
+        if (Rejuv && @battle.FE == :SHORTCIRCUIT) && opponent.hasAbility?(:VOLTABSORB)
           damageroll = @battle.field.getRoll(maximize_roll: (@battle.state.effects[:ELECTERRAIN] > 0))
           if opponent.pbRecoverHP(((opponent.totalhp/4.0)*damageroll).floor,true)>0
             @battle.pbDisplay(_INTL("{1}'s {2} restored its HP!",
@@ -727,7 +727,7 @@ class PokeBattle_Move
         return 0
       end
     end
-    if ((opponent.ability == :FLASHFIRE && !opponent.moldbroken) || 
+    if ((opponent.hasAbility?(:FLASHFIRE) && !opponent.moldbroken) || 
       (Rejuv && @battle.FE == :GLITCH && opponent.species == :GENESECT && opponent.hasWorkingItem(:BURNDRIVE))) && 
       type == :FIRE && @battle.FE != :FROZENDIMENSION
       negator = getAbilityName(opponent.ability)
@@ -742,7 +742,7 @@ class PokeBattle_Move
       end
       return 0
     end
-    if opponent.ability == :MAGMAARMOR && type == :FIRE && (@battle.FE == :DRAGONSDEN || @battle.FE == :VOLCANICTOP || @battle.FE == :INFERNAL) && !(opponent.moldbroken)
+    if opponent.hasAbility?(:MAGMAARMOR) && type == :FIRE && (@battle.FE == :DRAGONSDEN || @battle.FE == :VOLCANICTOP || @battle.FE == :INFERNAL) && !(opponent.moldbroken)
       @battle.pbDisplay(_INTL("{1}'s {2} made {3} ineffective!",
        opponent.pbThis,getAbilityName(opponent.ability),self.name))
       return 0
@@ -752,7 +752,7 @@ class PokeBattle_Move
   
   def pbTypeModMessages(type,attacker,opponent)
     secondtype = fieldTypeChange(attacker,opponent,1,true)
-    if opponent.ability == :SAPSIPPER && !(opponent.moldbroken) && (type == :GRASS || secondtype==:GRASS)
+    if opponent.hasAbility?(:SAPSIPPER) && !(opponent.moldbroken) && (type == :GRASS || secondtype==:GRASS)
       if opponent.pbCanIncreaseStatStage?(PBStats::ATTACK)
         opponent.pbIncreaseStatBasic(PBStats::ATTACK,1)
         @battle.pbCommonAnimation("StatUp",opponent,nil)
@@ -764,10 +764,10 @@ class PokeBattle_Move
       end
       return 0
     end
-    if ((opponent.ability == :STORMDRAIN && (type == :WATER || secondtype==:WATER)) ||
-       (opponent.ability == :LIGHTNINGROD && (type == :ELECTRIC || secondtype==:ELECTRIC))) && !(opponent.moldbroken)
+    if ((opponent.hasAbility?(:STORMDRAIN) && (type == :WATER || secondtype==:WATER)) ||
+       (opponent.hasAbility?(:LIGHTNINGROD) && (type == :ELECTRIC || secondtype==:ELECTRIC))) && !(opponent.moldbroken)
       if opponent.pbCanIncreaseStatStage?(PBStats::SPATK)
-        if (Rejuv && @battle.FE == :SHORTCIRCUIT) && opponent.ability == :LIGHTNINGROD
+        if (Rejuv && @battle.FE == :SHORTCIRCUIT) && opponent.hasAbility?(:LIGHTNINGROD)
           damageroll = @battle.field.getRoll(maximize_roll: (@battle.state.effects[:ELECTERRAIN] > 0))
           statboosts = [1,2,0,1,3]
           arrStatTexts=[_INTL("{1}'s {2} raised its Special Attack!",opponent.pbThis,getAbilityName(opponent.ability)), _INTL("{1}'s {2} sharply raised its Special Attack!",opponent.pbThis,getAbilityName(opponent.ability)),
@@ -796,7 +796,7 @@ class PokeBattle_Move
       end
       return 0
     end
-    if ((opponent.ability == :MOTORDRIVE && !opponent.moldbroken) ||
+    if ((opponent.hasAbility?(:MOTORDRIVE) && !opponent.moldbroken) ||
       (Rejuv && @battle.FE == :GLITCH && opponent.species == :GENESECT && opponent.hasWorkingItem(:SHOCKDRIVE))) &&
       (type == :ELECTRIC || secondtype==:ELECTRIC)
       negator = getAbilityName(opponent.ability)
@@ -833,19 +833,19 @@ class PokeBattle_Move
       end
       return 0
     end
-    if ((opponent.ability == :DRYSKIN && !(opponent.moldbroken)) && (type == :WATER || secondtype==:WATER)) ||
-      (opponent.ability == :VOLTABSORB && !(opponent.moldbroken) && (type == :ELECTRIC || secondtype==:ELECTRIC)) ||
-      (opponent.ability == :WATERABSORB && !(opponent.moldbroken) && (type == :WATER || secondtype==:WATER)) ||
+    if ((opponent.hasAbility?(:DRYSKIN) && !(opponent.moldbroken)) && (type == :WATER || secondtype==:WATER)) ||
+      (opponent.hasAbility?(:VOLTABSORB) && !(opponent.moldbroken) && (type == :ELECTRIC || secondtype==:ELECTRIC)) ||
+      (opponent.hasAbility?(:WATERABSORB) && !(opponent.moldbroken) && (type == :WATER || secondtype==:WATER)) ||
       ((Rejuv && @battle.FE == :GLITCH && opponent.species == :GENESECT && opponent.hasWorkingItem(:DOUSEDRIVE)) && (type == :WATER || secondtype==:WATER)) ||
       ((Rejuv && @battle.FE == :GLITCH && opponent.species == :GENESECT && opponent.hasWorkingItem(:CHILLDRIVE)) && (type == :ICE || secondtype==:ICE)) ||
       ((Rejuv && @battle.FE == :DESERT) && (opponent.hasType?(:GRASS) || opponent.hasType?(:WATER)) && @battle.pbWeather == :SUNNYDAY && (type == :WATER || secondtype==:WATER))
       if opponent.effects[:HealBlock]==0
         negator = getAbilityName(opponent.ability)
-        if ![:WATERABSORB,:VOLTABSORB,:DRYSKIN].include?(opponent.ability)
+        if ![:WATERABSORB,:VOLTABSORB,:DRYSKIN].any? { |a| opponent.hasAbility?(a) }
           negator = getItemName(opponent.item) if (Rejuv && @battle.FE == :GLITCH && opponent.species == :GENESECT && (opponent.item == :DOUSEDRIVE || opponent.item == :CHILLDRIVE))
           negator = "unquenchable thirst" if (Rejuv && @battle.FE == :DESERT) && (opponent.hasType?(:GRASS) || opponent.hasType?(:WATER)) && @battle.pbWeather == :SUNNYDAY
         end
-        if (Rejuv && @battle.FE == :SHORTCIRCUIT) && opponent.ability == :VOLTABSORB
+        if (Rejuv && @battle.FE == :SHORTCIRCUIT) && opponent.hasAbility?(:VOLTABSORB)
           damageroll = @battle.field.getRoll(maximize_roll: (@battle.state.effects[:ELECTERRAIN] > 0))
           if opponent.pbRecoverHP(((opponent.totalhp/4.0)*damageroll).floor,true)>0
             @battle.pbDisplay(_INTL("{1}'s {2} restored its HP!",
@@ -911,7 +911,7 @@ class PokeBattle_Move
         end
       end
     end
-    if (opponent.ability == :BULLETPROOF) && !(opponent.moldbroken)
+    if (opponent.hasAbility?(:BULLETPROOF)) && !(opponent.moldbroken)
       if (PBStuff::BULLETMOVE).include?(@move)
         @battle.pbDisplay(_INTL("{1}'s {2} blocked the attack!",
         opponent.pbThis,getAbilityName(opponent.ability),self.name))
@@ -925,7 +925,7 @@ class PokeBattle_Move
         return 0
       end
     end
-    if ((opponent.ability == :FLASHFIRE && !opponent.moldbroken) || 
+    if ((opponent.hasAbility?(:FLASHFIRE) && !opponent.moldbroken) || 
       (Rejuv && @battle.FE == :GLITCH && opponent.species == :GENESECT && opponent.hasWorkingItem(:BURNDRIVE))) && 
       (type == :FIRE || secondtype == :FIRE) && @battle.FE != :FROZENDIMENSION
       negator = getAbilityName(opponent.ability)
@@ -940,14 +940,14 @@ class PokeBattle_Move
       end
       return 0
     end
-    if opponent.ability == :MAGMAARMOR && (type == :FIRE || secondtype==:FIRE) &&
+    if opponent.hasAbility?(:MAGMAARMOR) && (type == :FIRE || secondtype==:FIRE) &&
       (@battle.FE == :DRAGONSDEN || @battle.FE == :VOLCANICTOP || @battle.FE == :INFERNAL) && !(opponent.moldbroken)
       @battle.pbDisplay(_INTL("{1}'s {2} made {3} ineffective!",
        opponent.pbThis,getAbilityName(opponent.ability),self.name))
       return 0
     end
     #Telepathy
-    if ((opponent.ability == :TELEPATHY  && !opponent.moldbroken) || @battle.FE == :HOLY) && @basedamage>0
+    if ((opponent.hasAbility?(:TELEPATHY)  && !opponent.moldbroken) || @battle.FE == :HOLY) && @basedamage>0
       if opponent.index == attacker.pbPartner.index
         @battle.pbDisplay(_INTL("{1} avoids attacks by its ally Pokémon!",opponent.pbThis))
         return 0
@@ -1016,11 +1016,11 @@ class PokeBattle_Move
       ((PBTypes.oneTypeEff(type, :FLYING) > 2) || (PBTypes.oneTypeEff(type, :FLYING) < 2 && ($game_switches[:Inversemode] || (@battle.FE == :INVERSE))))
        typemod /= 2
     end
-    if @battle.FE == :SNOWYMOUNTAIN && opponent.ability == :ICESCALES && opponent.hasType?(:ICE) && !(opponent.moldbroken) &&
+    if @battle.FE == :SNOWYMOUNTAIN && opponent.hasAbility?(:ICESCALES) && opponent.hasType?(:ICE) && !(opponent.moldbroken) &&
       ((PBTypes.oneTypeEff(type, :ICE) > 2) || (PBTypes.oneTypeEff(type, :ICE) < 2 && ($game_switches[:Inversemode] || (@battle.FE == :INVERSE))))
       typemod /= 2
     end
-    if @battle.FE == :DRAGONSDEN && opponent.ability == :MULTISCALE && opponent.hasType?(:DRAGON) && !(opponent.moldbroken) &&
+    if @battle.FE == :DRAGONSDEN && opponent.hasAbility?(:MULTISCALE) && opponent.hasType?(:DRAGON) && !(opponent.moldbroken) &&
       ((PBTypes.oneTypeEff(type, :DRAGON) > 2) || (PBTypes.oneTypeEff(type, :DRAGON) < 2 && ($game_switches[:Inversemode] || (@battle.FE == :INVERSE))))
        typemod /= 2
     end
@@ -1028,7 +1028,7 @@ class PokeBattle_Move
       ((PBTypes.oneTypeEff(type, :GRASS) > 2) || (PBTypes.oneTypeEff(type, :GRASS) < 2 && ($game_switches[:Inversemode] || (@battle.FE == :INVERSE))))
        typemod /= 2
     end
-    if @battle.FE == :BEWITCHED && opponent.hasType?(:FAIRY) && (opponent.abilty == :PASTELVEIL || opponent.pbPartner.ability == :PASTELVEIL) && !(opponent.moldbroken) &&
+    if @battle.FE == :BEWITCHED && opponent.hasType?(:FAIRY) && (opponent.abilty == :PASTELVEIL || opponent.pbPartner.hasAbility?(:PASTELVEIL)) && !(opponent.moldbroken) &&
       ((PBTypes.oneTypeEff(type, :FAIRY) > 2) || (PBTypes.oneTypeEff(type, :FAIRY) < 2 && ($game_switches[:Inversemode] || (@battle.FE == :INVERSE))))
       typemod /= 2
     end
@@ -1056,7 +1056,7 @@ class PokeBattle_Move
           moddedtype = :POISON
         end
       when :SHORTCIRCUIT # Shortcircuit Field
-        if (pbType(attacker) == :STEEL) && attacker.ability == :STEELWORKER
+        if (pbType(attacker) == :STEEL) && attacker.hasAbility?(:STEELWORKER)
           moddedtype = :ELECTRIC
         end
       when :CRYSTALCAVERN # Crystal Cavern
@@ -1113,7 +1113,7 @@ class PokeBattle_Move
     fieldmove = @battle.field.moveData(@move)
 		baseaccuracy = fieldmove[:accmod] if fieldmove && fieldmove[:accmod]
     return true if baseaccuracy==0
-    return true if attacker.ability == :NOGUARD || opponent.ability == :NOGUARD || (attacker.ability == (:FAIRYAURA) && @battle.FE == :FAIRYTALE)
+    return true if attacker.hasAbility?(:NOGUARD) || opponent.hasAbility?(:NOGUARD) || (attacker.ability == (:FAIRYAURA) && @battle.FE == :FAIRYTALE)
     return true if opponent.effects[:Telekinesis]>0
     return true if @function==0x0D && @battle.pbWeather== :HAIL # Blizzard
     return true if (@function==0x08 || @function==0x15) && @battle.pbWeather== :RAINDANCE # Thunder, Hurricane
@@ -1128,29 +1128,29 @@ class PokeBattle_Move
       baseaccuracy=50 if (@battle.pbWeather== :SUNNYDAY && !attacker.hasWorkingItem(:UTILITYUMBRELLA))
     end
     accstage=attacker.stages[PBStats::ACCURACY]
-    accstage=0 if opponent.ability == :UNAWARE && !(opponent.moldbroken)
+    accstage=0 if opponent.hasAbility?(:UNAWARE) && !(opponent.moldbroken)
     accuracy=(accstage>=0) ? (accstage+3)*100.0/3 : 300.0/(3-accstage)
     evastage=opponent.stages[PBStats::EVASION]
     evastage-=2 if @battle.state.effects[:Gravity]!=0
     evastage=-6 if evastage<-6
     evastage=0 if opponent.effects[:Foresight] || opponent.effects[:MiracleEye] || @function==0xA9 || # Chip Away
-                  attacker.ability == :UNAWARE && !(opponent.moldbroken)
+                  attacker.hasAbility?(:UNAWARE) && !(opponent.moldbroken)
     evasion=(evastage>=0) ? (evastage+3)*100.0/3 : 300.0/(3-evastage)
-    if attacker.ability == :COMPOUNDEYES
+    if attacker.hasAbility?(:COMPOUNDEYES)
       accuracy*=1.3
     end
     if attacker.hasWorkingItem(:MICLEBERRY)
-      if (attacker.ability == :GLUTTONY && attacker.hp<=(attacker.totalhp/2.0).floor) ||
+      if (attacker.hasAbility?(:GLUTTONY) && attacker.hp<=(attacker.totalhp/2.0).floor) ||
         attacker.hp<=(attacker.totalhp/4.0).floor
         accuracy*=1.2
         attacker.pbDisposeItem(true)
       end
     end
-    if attacker.ability == :VICTORYSTAR
+    if attacker.hasAbility?(:VICTORYSTAR)
       accuracy*=1.1
     end
     partner=attacker.pbPartner
-    if partner && partner.ability == :VICTORYSTAR
+    if partner && partner.hasAbility?(:VICTORYSTAR)
       accuracy*=1.1
     end
     if attacker.hasWorkingItem(:WIDELENS)
@@ -1166,13 +1166,13 @@ class PokeBattle_Move
     if attacker.hasWorkingItem(:ZOOMLENS) && attacker.speed < opponent.speed
       accuracy*=1.2
     end
-    if attacker.ability == :HUSTLE && @basedamage>0 && pbIsPhysical?(pbType(attacker))
+    if attacker.hasAbility?(:HUSTLE) && @basedamage>0 && pbIsPhysical?(pbType(attacker))
       accuracy*=0.8
     end
-    if attacker.ability == :LONGREACH && (@battle.FE == :ROCKY || (!Rejuv && @battle.FE == :FOREST)) # Rocky/ Forest Field
+    if attacker.hasAbility?(:LONGREACH) && (@battle.FE == :ROCKY || (!Rejuv && @battle.FE == :FOREST)) # Rocky/ Forest Field
       accuracy*=0.9
     end
-    if (opponent.ability == :WONDERSKIN || (Rejuv && @battle.FE == :PSYTERRAIN && opponent.ability == :MAGICIAN)) && 
+    if (opponent.hasAbility?(:WONDERSKIN) || (Rejuv && @battle.FE == :PSYTERRAIN && opponent.hasAbility?(:MAGICIAN))) && 
       @basedamage==0 && attacker.pbIsOpposing?(opponent.index) && !(opponent.moldbroken)
       if @battle.FE == :RAINBOW
         accuracy*=0
@@ -1180,13 +1180,13 @@ class PokeBattle_Move
         accuracy*=0.5
       end
     end
-    if opponent.ability == :TANGLEDFEET && opponent.effects[:Confusion]>0 && !(opponent.moldbroken)
+    if opponent.hasAbility?(:TANGLEDFEET) && opponent.effects[:Confusion]>0 && !(opponent.moldbroken)
       evasion*=1.2
     end
-    if opponent.ability == :SANDVEIL && (@battle.pbWeather== :SANDSTORM || @battle.FE == :DESERT || @battle.FE == :ASHENBEACH) && !(opponent.moldbroken)
+    if opponent.hasAbility?(:SANDVEIL) && (@battle.pbWeather== :SANDSTORM || @battle.FE == :DESERT || @battle.FE == :ASHENBEACH) && !(opponent.moldbroken)
       evasion*=1.2
     end
-    if opponent.ability == :SNOWCLOAK && (@battle.pbWeather== :HAIL || @battle.FE == :ICY || @battle.FE == :SNOWYMOUNTAIN || @battle.FE == :FROZENDIMENSION) && !(opponent.moldbroken)
+    if opponent.hasAbility?(:SNOWCLOAK) && (@battle.pbWeather== :HAIL || @battle.FE == :ICY || @battle.FE == :SNOWYMOUNTAIN || @battle.FE == :FROZENDIMENSION) && !(opponent.moldbroken)
       evasion*=1.2
     end
     if opponent.hasWorkingItem(:BRIGHTPOWDER)
@@ -1195,8 +1195,8 @@ class PokeBattle_Move
     if opponent.hasWorkingItem(:LAXINCENSE)
       evasion*=1.1
     end
-    evasion = 100 if attacker.ability == :KEENEYE
-    evasion = 100 if @battle.FE == :ASHENBEACH && (attacker.ability == :OWNTEMPO || attacker.ability == :INNERFOCUS || attacker.ability == :PUREPOWER || attacker.ability == :SANDVEIL || attacker.ability == :STEADFAST) && (opponent.ability != :UNNERVE || opponent.ability != :ASONE)
+    evasion = 100 if attacker.hasAbility?(:KEENEYE)
+    evasion = 100 if @battle.FE == :ASHENBEACH && (attacker.hasAbility?(:OWNTEMPO) || attacker.hasAbility?(:INNERFOCUS) || attacker.hasAbility?(:PUREPOWER) || attacker.hasAbility?(:SANDVEIL) || attacker.hasAbility?(:STEADFAST)) && (opponent.ability != :UNNERVE || opponent.ability != :ASONE)
     return @battle.pbRandom(100)<(baseaccuracy*accuracy/evasion)
   end
 
@@ -1205,18 +1205,18 @@ class PokeBattle_Move
 ################################################################################
   def pbCritRate?(attacker,opponent)
     return -1 if self.is_a?(PokeBattle_Confusion)
-    return -1 if (opponent.ability == :BATTLEARMOR || opponent.ability == :SHELLARMOR) && !(opponent.moldbroken)
+    return -1 if (opponent.hasAbility?(:BATTLEARMOR) || opponent.hasAbility?(:SHELLARMOR)) && !(opponent.moldbroken)
     return -1 if opponent.pbOwnSide.effects[:LuckyChant]>0
     return 3 if attacker.effects[:LaserFocus]>0 || @function==0xA0 || @function==0x319 # Frost Breath, Surging Strikes
     return 3 if @function==0x201 && attacker.hp<=((attacker.totalhp)*0.5).floor # Gale Strike
-    return 3 if attacker.ability == :MERCILESS && (opponent.status == :POISON || [:CORROSIVE,:CORRPSIVEMIST,:WASTELAND,:MURKWATERSURFACE].include?(@battle.FE))
-    return 3 if (opponent.ability == :RATTLED || opponent.ability == :WIMPOUT) && @battle.FE == :COLOSSEUM
-    return 3 if (attacker.ability == :QUICKDRAW && attacker.effects[:Quickdrawsnipe])
+    return 3 if attacker.hasAbility?(:MERCILESS) && (opponent.status == :POISON || [:CORROSIVE,:CORRPSIVEMIST,:WASTELAND,:MURKWATERSURFACE].include?(@battle.FE))
+    return 3 if (opponent.hasAbility?(:RATTLED) || opponent.hasAbility?(:WIMPOUT)) && @battle.FE == :COLOSSEUM
+    return 3 if (attacker.hasAbility?(:QUICKDRAW) && attacker.effects[:Quickdrawsnipe])
     c=0    
     c+=attacker.effects[:FocusEnergy]
     c+=1 if !@data.nil? && highCritRate?
     c+=1 if attacker.inHyperMode? && @move.type == :SHADOW
-    c+=1 if attacker.ability == :SUPERLUCK
+    c+=1 if attacker.hasAbility?(:SUPERLUCK)
     c+=2 if attacker.hasWorkingItem(:STICK) && (attacker.pokemon.species == :FARFETCHD || attacker.pokemon.species == :SIRFETCHD)
     c+=2 if attacker.hasWorkingItem(:LUCKYPUNCH) && (attacker.pokemon.species == :CHANSEY)
     if @battle.FE == :MIRROR
@@ -1232,9 +1232,9 @@ class PokeBattle_Move
     c+=1 if attacker.hasWorkingItem(:SCOPELENS)
     c+=1 if attacker.speed > opponent.speed && @battle.FE == :GLITCH
     if Rejuv && @battle.FE == :CHESS
-      c+=1 if (opponent.ability == :RECKLESS || opponent.ability == :GORILLATACTICS)
+      c+=1 if (opponent.hasAbility?(:RECKLESS) || opponent.hasAbility?(:GORILLATACTICS))
       c+=1 if [:STOMPINGTANTRUM,:THRASH,:OUTRAGE].include?(opponent.lastMoveUsed) 
-      if attacker.ability == :MERCILESS
+      if attacker.hasAbility?(:MERCILESS)
         frac = (1.0*opponent.hp) / (1.0*opponent.totalhp)  
         if frac < 0.8  
           c+=1  
@@ -1451,13 +1451,13 @@ class PokeBattle_Move
     case @battle.FE
       when :CHESS
         if (CHESSMOVES).include?(@move)
-          basemult*=0.5 if [:ADAPTABILITY,:ANTICIPATION,:SYNCHRONIZE,:TELEPATHY].include?(opponent.ability)
-          basemult*=2.0 if [:OBLIVIOUS,:KLUTZ,:UNAWARE,:SIMPLE].include?(opponent.ability) || opponent.effects[:Confusion]>0 || (Rejuv && opponent.ability == :DEFEATIST)
+          basemult*=0.5 if [:ADAPTABILITY,:ANTICIPATION,:SYNCHRONIZE,:TELEPATHY].any? { |a| opponent.hasAbility?(a) }
+          basemult*=2.0 if [:OBLIVIOUS,:KLUTZ,:UNAWARE,:SIMPLE].any? { |a| opponent.hasAbility?(a) } || opponent.effects[:Confusion]>0 || (Rejuv && opponent.hasAbility?(:DEFEATIST))
           @battle.pbDisplay("The chess piece slammed forward!") if !@fieldmessageshown
           @fieldmessageshown = true
         end
         # Queen piece boost
-        if attacker.pokemon.piece==:QUEEN || attacker.ability == :QUEENLYMAJESTY
+        if attacker.pokemon.piece==:QUEEN || attacker.hasAbility?(:QUEENLYMAJESTY)
           basemult*=1.5
           if attacker.pokemon.piece==:QUEEN
             @battle.pbDisplay("The Queen is dominating the board!")  && !@fieldmessageshown
@@ -1476,7 +1476,7 @@ class PokeBattle_Move
           striker = 1+@battle.pbRandom(14)
           @battle.pbDisplay("WHAMMO!") if !@fieldmessageshown
           @fieldmessageshown = true
-          if attacker.ability == :HUGEPOWER || attacker.ability == :GUTS || attacker.ability == :PUREPOWER || attacker.ability == :SHEERFORCE
+          if attacker.hasAbility?(:HUGEPOWER) || attacker.hasAbility?(:GUTS) || attacker.hasAbility?(:PUREPOWER) || attacker.hasAbility?(:SHEERFORCE)
             if striker >=9
               striker = 15
             else
@@ -1628,7 +1628,7 @@ class PokeBattle_Move
         atkstage=opponent.stages[PBStats::SPATK]+6
       end
       if @battle.FE == :GLITCH
-				atk = attacker.getSpecialStat(opponent.ability == :UNAWARE)
+				atk = attacker.getSpecialStat(opponent.hasAbility?(:UNAWARE))
 				atkstage = 6 #getspecialstat handles unaware
 			end
     end
@@ -1636,7 +1636,7 @@ class PokeBattle_Move
       atkstage=6 if opponent.damagestate.critical && atkstage<6
       atk=(atk*1.0*stagemul[atkstage]/stagediv[atkstage]).floor
     end
-    if attacker.ability == :UNAWARE 
+    if attacker.hasAbility?(:UNAWARE) 
        atkstage=attacker.stages[PBStats::ATTACK]+6
        atk=(atk*1.0*stagemul[atkstage]/stagediv[atkstage]).floor
     end
@@ -1647,31 +1647,31 @@ class PokeBattle_Move
       when :DEDENNE then atkstage=attacker.stages[PBStats::SPEED]+6 if !pbIsSpecial?(type)
       end
     end
-    if attacker.ability == :HUSTLE && pbIsPhysical?(type)
+    if attacker.hasAbility?(:HUSTLE) && pbIsPhysical?(type)
       atk=(atk*1.5).round
     end
     atkmult=1.0
     if @battle.FE == :HAUNTED || @battle.FE == :BEWITCHED || @battle.FE == :HOLY || @battle.FE == :PSYTERRAIN || @battle.FE == :DEEPEARTH
-      atkmult*=1.5 if attacker.pbPartner.ability == :POWERSPOT
+      atkmult*=1.5 if attacker.pbPartner.hasAbility?(:POWERSPOT)
     else
-      atkmult*=1.3 if attacker.pbPartner.ability == :POWERSPOT
+      atkmult*=1.3 if attacker.pbPartner.hasAbility?(:POWERSPOT)
     end
     #pinch abilities
-    if (@battle.FE == :BURNING || @battle.FE == :VOLCANIC || @battle.FE == :INFERNAL) && (attacker.ability == :BLAZE && type == :FIRE)
+    if (@battle.FE == :BURNING || @battle.FE == :VOLCANIC || @battle.FE == :INFERNAL) && (attacker.hasAbility?(:BLAZE) && type == :FIRE)
       atkmult*=1.5
-    elsif @battle.FE == :VOLCANICTOP && (attacker.ability == :BLAZE && type == :FIRE) && attacker.effects[:Blazed]
+    elsif @battle.FE == :VOLCANICTOP && (attacker.hasAbility?(:BLAZE) && type == :FIRE) && attacker.effects[:Blazed]
       atkmult*=1.5
-    elsif (@battle.FE == :FOREST || (Rejuv && @battle.FE == :GRASSY)) && (attacker.ability == :OVERGROW && type == :GRASS)
+    elsif (@battle.FE == :FOREST || (Rejuv && @battle.FE == :GRASSY)) && (attacker.hasAbility?(:OVERGROW) && type == :GRASS)
       atkmult*=1.5
-    elsif @battle.FE == :FOREST && (attacker.ability == :SWARM && type == :BUG)
+    elsif @battle.FE == :FOREST && (attacker.hasAbility?(:SWARM) && type == :BUG)
       atkmult*=1.5
-    elsif (@battle.FE == :WATERSURFACE || @battle.FE == :UNDERWATER) && (attacker.ability == :TORRENT && type == :WATER)
+    elsif (@battle.FE == :WATERSURFACE || @battle.FE == :UNDERWATER) && (attacker.hasAbility?(:TORRENT) && type == :WATER)
       atkmult*=1.5
-    elsif @battle.ProgressiveFieldCheck(PBFields::FLOWERGARDEN) && (attacker.ability == :SWARM && type == :BUG)
+    elsif @battle.ProgressiveFieldCheck(PBFields::FLOWERGARDEN) && (attacker.hasAbility?(:SWARM) && type == :BUG)
       atkmult*=1.5 if @battle.ProgressiveFieldCheck(PBFields::FLOWERGARDEN,1,2)
       atkmult*=1.8 if @battle.ProgressiveFieldCheck(PBFields::FLOWERGARDEN,3,4)
       atkmult*=2.0 if @battle.FE == :FLOWERGARDEN5
-    elsif @battle.ProgressiveFieldCheck(PBFields::FLOWERGARDEN,2,5) && (attacker.ability == :OVERGROW && type == :GRASS)
+    elsif @battle.ProgressiveFieldCheck(PBFields::FLOWERGARDEN,2,5) && (attacker.hasAbility?(:OVERGROW) && type == :GRASS)
       case @battle.FE
         when :FLOWERGARDEN2 then atkmult*=1.5 if attacker.hp<=(attacker.totalhp*0.67).floor
         when :FLOWERGARDEN3 then atkmult*=1.6
@@ -1679,8 +1679,8 @@ class PokeBattle_Move
         when :FLOWERGARDEN5 then atkmult*=2.0
       end
     elsif attacker.hp<=(attacker.totalhp/3.0).floor
-      if (attacker.ability == :OVERGROW && type == :GRASS) || (attacker.ability == :BLAZE && type == :FIRE && @battle.FE != :FROZENDIMENSION) ||
-        (attacker.ability == :TORRENT && type == :WATER) || (attacker.ability == :SWARM && type == :BUG)
+      if (attacker.hasAbility?(:OVERGROW) && type == :GRASS) || (attacker.hasAbility?(:BLAZE) && type == :FIRE && @battle.FE != :FROZENDIMENSION) ||
+        (attacker.hasAbility?(:TORRENT) && type == :WATER) || (attacker.hasAbility?(:SWARM) && type == :BUG)
         atkmult*=1.5
       end
     end
@@ -1689,7 +1689,7 @@ class PokeBattle_Move
       when :PLUS, :MINUS
         if pbIsSpecial?(type) && @battle.FE != :GLITCH
           partner=attacker.pbPartner
-          if partner.ability == :PLUS || partner.ability == :MINUS
+          if partner.hasAbility?(:PLUS) || partner.hasAbility?(:MINUS)
             atkmult*=1.5
           elsif @battle.FE == :SHORTCIRCUIT || (Rejuv && @battle.FE == :ELECTERRAIN) || @battle.state.effects[:ELECTERRAIN] > 0
             atkmult*=1.5
@@ -1718,13 +1718,13 @@ class PokeBattle_Move
       end
     end
     if ((@battle.pbWeather== :SUNNYDAY && !(attitemworks && attacker.item == :UTILITYUMBRELLA)) || @battle.ProgressiveFieldCheck(PBFields::FLOWERGARDEN) || @battle.FE == :BEWITCHED) && pbIsPhysical?(type)
-      atkmult*=1.5 if attacker.ability == :FLOWERGIFT || attacker.pbPartner.ability == :FLOWERGIFT
+      atkmult*=1.5 if attacker.hasAbility?(:FLOWERGIFT) || attacker.pbPartner.hasAbility?(:FLOWERGIFT)
     end
     if (@battle.pbWeather== :SUNNYDAY) && pbIsPhysical?(type)
-      atkmult*=1.5 if attacker.ability == :SOLARIDOL 
+      atkmult*=1.5 if attacker.hasAbility?(:SOLARIDOL) 
     end
     if (@battle.pbWeather== :HAIL) && pbIsSpecial?(type)
-      atkmult*=1.5 if attacker.ability == :LUNARIDOL
+      atkmult*=1.5 if attacker.hasAbility?(:LUNARIDOL)
     end
     if attacker.pbPartner.ability == (:BATTERY) && pbIsSpecial?(type) && @battle.FE != :GLITCH
       if Rejuv && @battle.FE == :ELECTERRAIN
@@ -1734,9 +1734,9 @@ class PokeBattle_Move
       end
     end
     if @battle.FE == :FAIRYTALE
-      atkmult*=2.0 if (attacker.pbPartner.ability == :STEELYSPIRIT || attacker.ability == :STEELYSPIRIT) && type == :STEEL
+      atkmult*=2.0 if (attacker.pbPartner.hasAbility?(:STEELYSPIRIT) || attacker.hasAbility?(:STEELYSPIRIT)) && type == :STEEL
     else
-      atkmult*=1.5 if (attacker.pbPartner.ability == :STEELYSPIRIT || attacker.ability == :STEELYSPIRIT) && type == :STEEL
+      atkmult*=1.5 if (attacker.pbPartner.hasAbility?(:STEELYSPIRIT) || attacker.hasAbility?(:STEELYSPIRIT)) && type == :STEEL
     end
     atkmult*=1.5 if attacker.effects[:FlashFire] && type == :FIRE && @battle.FE != :FROZENDIMENSION
 
@@ -1751,25 +1751,25 @@ class PokeBattle_Move
     end
     if @battle.FE != :INDOOR
       if @battle.FE == :STARLIGHT || @battle.FE == :NEWWORLD
-        if attacker.ability == :VICTORYSTAR
+        if attacker.hasAbility?(:VICTORYSTAR)
           atkmult*=1.5
         end
         partner=attacker.pbPartner
-        if partner && partner.ability == :VICTORYSTAR
+        if partner && partner.hasAbility?(:VICTORYSTAR)
           atkmult*=1.5
         end
       end
       if @battle.FE == :WATERSURFACE
-        atkmult*=1.5 if attacker.ability == :PROPELLERTAIL && @priority >= 1 && @basedamage > 0
+        atkmult*=1.5 if attacker.hasAbility?(:PROPELLERTAIL) && @priority >= 1 && @basedamage > 0
       end
       if @battle.FE == :UNDERWATER 
         atkmult*=0.5 if pbIsPhysical?(type) && type != :WATER && attacker.ability != :STEELWORKER && attacker.ability != :SWIFTSWIM
-        atkmult*=1.5 if attacker.ability == :PROPELLERTAIL && @priority >= 1 && @basedamage > 0
+        atkmult*=1.5 if attacker.hasAbility?(:PROPELLERTAIL) && @priority >= 1 && @basedamage > 0
       end
       if Rejuv && @battle.FE == :CHESS
-        atkmult*=1.2 if attacker.ability == :GORILLATACTICS || attacker.ability == :RECKLESS
-        atkmult*=1.2 if attacker.ability == :ILLUSION && attacker.effect[:Illusion]!=nil
-        if attacker.ability == :COMPETITIVE
+        atkmult*=1.2 if attacker.hasAbility?(:GORILLATACTICS) || attacker.hasAbility?(:RECKLESS)
+        atkmult*=1.2 if attacker.hasAbility?(:ILLUSION) && attacker.effect[:Illusion]!=nil
+        if attacker.hasAbility?(:COMPETITIVE)
           frac = (1.0*attacker.hp)/(1.0*attacker.totalhp)
           multiplier = 1.0  
           multiplier += ((1.0-frac)/0.8)  
@@ -1786,7 +1786,7 @@ class PokeBattle_Move
         when :SKILLLINK then atkmult*=1.2 if (@battle.FE == :COLOSSEUM && (@function == 0xC0 || @function == 0x307 || (attacker.species == :CINCCINO && attacker.crested && !pbIsMultiHit))) #0xC0: 2-5 hits; 0x307: Scale Shot
       end
     end
-    atkmult*=0.5 if opponent.ability == :THICKFAT && (type == :ICE || type == :FIRE) && !(opponent.moldbroken)
+    atkmult*=0.5 if opponent.hasAbility?(:THICKFAT) && (type == :ICE || type == :FIRE) && !(opponent.moldbroken)
 
     ##### Calculate opponent's defense stat #####
     defense=opponent.defense
@@ -1799,7 +1799,7 @@ class PokeBattle_Move
       defstage=opponent.stages[PBStats::SPDEF]+6
       applysandstorm=true
       if @battle.FE == :GLITCH
-        defense = opponent.getSpecialStat(attacker.ability == :UNAWARE)
+        defense = opponent.getSpecialStat(attacker.hasAbility?(:UNAWARE))
         defstage = 6 # getspecialstat handles unaware
         applysandstorm=false # getSpecialStat handles sandstorm
       end
@@ -1830,10 +1830,10 @@ class PokeBattle_Move
         defmult*=0.5 if type == :FIRE && !(opponent.moldbroken)
     end
     if ((@battle.pbWeather== :SUNNYDAY && !opponent.hasWorkingItem(:UTILITYUMBRELLA)) || @battle.ProgressiveFieldCheck(PBFields::FLOWERGARDEN) || @battle.FE == :BEWITCHED) && !(opponent.moldbroken) && pbIsSpecial?(type)
-      if opponent.ability == :FLOWERGIFT && opponent.species == :CHERRIM
+      if opponent.hasAbility?(:FLOWERGIFT) && opponent.species == :CHERRIM
         defmult*=1.5
       end
-      if opponent.pbPartner.ability == :FLOWERGIFT  && opponent.pbPartner.species == :CHERRIM
+      if opponent.pbPartner.hasAbility?(:FLOWERGIFT)  && opponent.pbPartner.species == :CHERRIM
         defmult*=1.5
       end
     end
@@ -1960,11 +1960,11 @@ class PokeBattle_Move
       when :FIRE
         damage*=1.5 if @battle.weather == :SUNNYDAY
         damage*=0.5 if @battle.weather == :RAINDANCE
-        damage*=0.5 if opponent.ability == :WATERBUBBLE
+        damage*=0.5 if opponent.hasAbility?(:WATERBUBBLE)
       when :WATER
         damage*=1.5 if @battle.weather == :RAINDANCE
         damage*=0.5 if @battle.weather == :SUNNYDAY
-        damage*=2 if attacker.ability == :WATERBUBBLE
+        damage*=2 if attacker.hasAbility?(:WATERBUBBLE)
     end
     if attacker.species == :FEAROW && attacker.crested # fearow crest
       if attacker.ability == (:SNIPER)
@@ -1974,7 +1974,7 @@ class PokeBattle_Move
     # Critical hits
     if opponent.damagestate.critical
       damage*=1.5
-      damage*=1.5 if attacker.ability == :SNIPER && !(attacker.species == :FEAROW && attacker.crested)
+      damage*=1.5 if attacker.hasAbility?(:SNIPER) && !(attacker.species == :FEAROW && attacker.crested)
     end
     # STAB-addition from Crests 
     typecrest = false
@@ -1987,10 +1987,10 @@ class PokeBattle_Move
       end
     end
     # STAB
-    if (attacker.hasType?(type) || (attacker.ability == :STEELWORKER && type == :STEEL)  || (attacker.ability == :SOLARIDOL && type == :FIRE) || (attacker.ability == :LUNARIDOL && type == :ICE) || typecrest==true)
-      if attacker.ability == :ADAPTABILITY
+    if (attacker.hasType?(type) || (attacker.hasAbility?(:STEELWORKER) && type == :STEEL)  || (attacker.hasAbility?(:SOLARIDOL) && type == :FIRE) || (attacker.hasAbility?(:LUNARIDOL) && type == :ICE) || typecrest==true)
+      if attacker.hasAbility?(:ADAPTABILITY)
         damage*=2.0
-      elsif (attacker.ability == :STEELWORKER && type == :STEEL) && @battle.FE == :FACTORY # Factory Field
+      elsif (attacker.hasAbility?(:STEELWORKER) && type == :STEEL) && @battle.FE == :FACTORY # Factory Field
         damage*=2.0
       else
         damage*=1.5
@@ -2027,15 +2027,15 @@ class PokeBattle_Move
         finalmult*= 0.5
       end
     end
-    finalmult*=0.5 if ((opponent.ability == :MULTISCALE && !(opponent.moldbroken)) && opponent.hp==opponent.totalhp)
-    finalmult*=0.5 if opponent.ability == :SHADOWSHIELD && (opponent.hp==opponent.totalhp || @battle.FE == :DIMENSIONAL)
-    finalmult*=0.33 if opponent.ability == :SHADOWSHIELD && (opponent.hp==opponent.totalhp && (@battle.FE == :DARKNESS2 || @battle.FE == :DARKNESS3 ))
-    finalmult*=2.0 if attacker.ability == :TINTEDLENS && opponent.damagestate.typemod<4
-    finalmult*=2.0 if attacker.ability == :EXECUTION && (opponent.hp <= (opponent.totalhp/2).floor)
-    finalmult*=0.75 if opponent.pbPartner.ability == :FRIENDGUARD && !(opponent.moldbroken)
-    finalmult*=0.5 if (opponent.ability == :PASTELVEIL || opponent.pbPartner.ability == :PASTELVEIL) && @type == :POISON && (@battle.FE == :MISTY || @battle.FE == :RAINBOW || (@battle.state.effects[:MISTY] > 0))
+    finalmult*=0.5 if ((opponent.hasAbility?(:MULTISCALE) && !(opponent.moldbroken)) && opponent.hp==opponent.totalhp)
+    finalmult*=0.5 if opponent.hasAbility?(:SHADOWSHIELD) && (opponent.hp==opponent.totalhp || @battle.FE == :DIMENSIONAL)
+    finalmult*=0.33 if opponent.hasAbility?(:SHADOWSHIELD) && (opponent.hp==opponent.totalhp && (@battle.FE == :DARKNESS2 || @battle.FE == :DARKNESS3 ))
+    finalmult*=2.0 if attacker.hasAbility?(:TINTEDLENS) && opponent.damagestate.typemod<4
+    finalmult*=2.0 if attacker.hasAbility?(:EXECUTION) && (opponent.hp <= (opponent.totalhp/2).floor)
+    finalmult*=0.75 if opponent.pbPartner.hasAbility?(:FRIENDGUARD) && !(opponent.moldbroken)
+    finalmult*=0.5 if (opponent.hasAbility?(:PASTELVEIL) || opponent.pbPartner.hasAbility?(:PASTELVEIL)) && @type == :POISON && (@battle.FE == :MISTY || @battle.FE == :RAINBOW || (@battle.state.effects[:MISTY] > 0))
     if @battle.ProgressiveFieldCheck(PBFields::FLOWERGARDEN,3,5)
-      if (opponent.pbPartner.ability == :FLOWERVEIL && opponent.hasType?(:GRASS)) || (opponent.ability == :FLOWERVEIL && !(opponent.moldbroken))
+      if (opponent.pbPartner.hasAbility?(:FLOWERVEIL) && opponent.hasType?(:GRASS)) || (opponent.hasAbility?(:FLOWERVEIL) && !(opponent.moldbroken))
         finalmult*=0.5
         @battle.pbDisplay(_INTL("The Flower Veil softened the attack!"))
       end
@@ -2047,13 +2047,13 @@ class PokeBattle_Move
         end
       end
     end
-    finalmult*=0.75 if (((opponent.ability == :SOLIDROCK || opponent.ability == :FILTER) && !opponent.moldbroken) || opponent.ability == :PRISMARMOR) && opponent.damagestate.typemod>4
-    finalmult*=0.75 if opponent.ability == :SHADOWSHIELD && [:STARLIGHT, :NEWWORLD, :DARKCRYSTALCAVERN].include?(@battle.FE)
-    finalmult*=2.0 if attacker.ability == :STAKEOUT && @battle.switchedOut[opponent.index]
+    finalmult*=0.75 if (((opponent.hasAbility?(:SOLIDROCK) || opponent.hasAbility?(:FILTER)) && !opponent.moldbroken) || opponent.hasAbility?(:PRISMARMOR)) && opponent.damagestate.typemod>4
+    finalmult*=0.75 if opponent.hasAbility?(:SHADOWSHIELD) && [:STARLIGHT, :NEWWORLD, :DARKCRYSTALCAVERN].include?(@battle.FE)
+    finalmult*=2.0 if attacker.hasAbility?(:STAKEOUT) && @battle.switchedOut[opponent.index]
     finalmult*=[1.0+attacker.effects[:Metronome]*0.2,2.0].min if (attitemworks && attacker.item == :METRONOME) && attacker.movesUsed[-2] == attacker.movesUsed[-1]
     finalmult*=[1.0+attacker.effects[:ConcertMetronome]*0.2,2.0].min if @battle.FE == :CONCERT4 && attacker.movesUsed[-2] == attacker.movesUsed[-1]
     finalmult*=1.2 if (attitemworks && attacker.item == :EXPERTBELT) && opponent.damagestate.typemod > 4
-    finalmult*=1.25 if (attacker.ability == :NEUROFORCE) && opponent.damagestate.typemod > 4
+    finalmult*=1.25 if (attacker.hasAbility?(:NEUROFORCE)) && opponent.damagestate.typemod > 4
     finalmult*=1.3 if (attitemworks && attacker.item == :LIFEORB)
     if opponent.damagestate.typemod>4 && opponent.itemWorks?
       hasberry = false
@@ -2078,9 +2078,9 @@ class PokeBattle_Move
       end
     end
     hasberry = true if opponent.hasWorkingItem(:CHILANBERRY) && type == :NORMAL
-    if hasberry && !([:UNNERVE,:ASONE].include?(attacker.ability) || [:UNNERVE,:ASONE].include?(attacker.pbPartner.ability))
+    if hasberry && !([:UNNERVE,:ASONE].any? { |a| attacker.hasAbility?(a) } || [:UNNERVE,:ASONE].any? { |a| attacker.pbPartner.hasAbility?(a) })
       finalmult*=0.5
-      finalmult*=0.5 if opponent.ability == :RIPEN
+      finalmult*=0.5 if opponent.hasAbility?(:RIPEN)
       opponent.pbDisposeItem(true)
       if !@battle.pbIsOpposing?(attacker.index)
         @battle.pbDisplay(_INTL("{2}'s {1} weakened the damage from the attack!",getItemName(opponent.pokemon.itemRecycle),opponent.pbThis))
@@ -2154,7 +2154,7 @@ class PokeBattle_Move
           opponent.damagestate.pawnsturdyused = true
           opponent.damagestate.pawnsturdy = true
           damage=damage-1
-        elsif damage==opponent.totalhp && opponent.ability == :STURDY && !opponent.moldbroken
+        elsif damage==opponent.totalhp && opponent.hasAbility?(:STURDY) && !opponent.moldbroken
           opponent.damagestate.sturdy=true
           damage=damage-1
         elsif opponent.damagestate.focussash && damage==opponent.totalhp && opponent.item
@@ -2168,7 +2168,7 @@ class PokeBattle_Move
           opponent.damagestate.rampcrestused=true
           opponent.effects[:RampCrestUsage]=true
           damage=damage-1
-        elsif damage==opponent.totalhp && opponent.ability == :STALWART && @battle.FE == :COLOSSEUM && !opponent.moldbroken
+        elsif damage==opponent.totalhp && opponent.hasAbility?(:STALWART) && @battle.FE == :COLOSSEUM && !opponent.moldbroken
           opponent.damagestate.stalwart=true
           damage=damage-1
         end
@@ -2303,9 +2303,9 @@ class PokeBattle_Move
     pri += 1 if @move == :GRASSYGLIDE && (@battle.FE == :GRASSY || @battle.state.effects[:GRASSY] > 0)
     pri += 1 if @battle.FE == :CHESS && attacker.pokemon && attacker.pokemon.piece == :KING
     pri += 1 if attacker.species == :FERALIGATR && attacker.crested && @move.basedamage != 0 && attacker.turncount == 0 # Feraligatr Crest
-    pri += 1 if attacker.ability == :PRANKSTER && @basedamage==0 && attacker.effects[:TwoTurnAttack] == 0 # Is status move
-    pri += 1 if attacker.ability == :GALEWINGS && @type==:FLYING && ((attacker.hp == attacker.totalhp) || @battle.FE == :SKY || ((@battle.FE == :MOUNTAIN || @battle.FE == :SNOWYMOUNTAIN || @battle.FE == :VOLCANICTOP) && @battle.weather == :STRONGWINDS))
-    pri += 3 if attacker.ability == :TRIAGE && (PBStuff::HEALFUNCTIONS).include?(@function)
+    pri += 1 if attacker.hasAbility?(:PRANKSTER) && @basedamage==0 && attacker.effects[:TwoTurnAttack] == 0 # Is status move
+    pri += 1 if attacker.hasAbility?(:GALEWINGS) && @type==:FLYING && ((attacker.hp == attacker.totalhp) || @battle.FE == :SKY || ((@battle.FE == :MOUNTAIN || @battle.FE == :SNOWYMOUNTAIN || @battle.FE == :VOLCANICTOP) && @battle.weather == :STRONGWINDS))
+    pri += 3 if attacker.hasAbility?(:TRIAGE) && (PBStuff::HEALFUNCTIONS).include?(@function)
     pri -= 1 if @battle.FE == :DEEPEARTH && @move == :COREENFORCER
     return pri
   end
diff --git a/Battle_MoveEffects.rb b/Battle_MoveEffects.rb
index e629a82..b0e9520 100644
--- a/Battle_MoveEffects.rb
+++ b/Battle_MoveEffects.rb
@@ -181,7 +181,7 @@ class PokeBattle_Move_003 < PokeBattle_Move
         if opponent.hasType?(:GRASS)
           @battle.pbDisplay(_INTL("It doesn't affect {1}...",opponent.pbThis(true)))
           return -1
-        elsif opponent.ability == :OVERCOAT && !(opponent.moldbroken)
+        elsif opponent.hasAbility?(:OVERCOAT) && !(opponent.moldbroken)
           @battle.pbDisplay(_INTL("{1}'s {2} made the attack ineffective!",
           opponent.pbThis,getAbilityName(opponent.ability),self.name))
           return -1
@@ -237,7 +237,7 @@ class PokeBattle_Move_005 < PokeBattle_Move
       if opponent.hasType?(:GRASS)
         @battle.pbDisplay(_INTL("It doesn't affect {1}...",opponent.pbThis(true)))
         return -1
-      elsif (opponent.ability == :OVERCOAT) && !(opponent.moldbroken)
+      elsif (opponent.hasAbility?(:OVERCOAT)) && !(opponent.moldbroken)
         @battle.pbDisplay(_INTL("{1}'s {2} made the attack ineffective!",
         opponent.pbThis,getAbilityName(opponent.ability),self.name))
         return -1
@@ -263,9 +263,9 @@ class PokeBattle_Move_005 < PokeBattle_Move
     if @battle.FE == :WASTELAND && ((@move == :GUNKSHOT) || (@move == :SLUDGEBOMB) || 
       (@move == :SLUDGEWAVE) || (@move == :SLUDGE)) &&
      ((!opponent.hasType?(:POISON) && !opponent.hasType?(:STEEL)) || opponent.corroded) &&
-     !(opponent.ability == :TOXICBOOST) &&
-     !(opponent.ability == :POISONHEAL) &&
-     (!(opponent.ability == :IMMUNITY) && !(opponent.moldbroken))
+     !(opponent.hasAbility?(:TOXICBOOST)) &&
+     !(opponent.hasAbility?(:POISONHEAL)) &&
+     (!(opponent.hasAbility?(:IMMUNITY)) && !(opponent.moldbroken))
       rnd=@battle.pbRandom(4)
       case rnd
         when 0
@@ -329,7 +329,7 @@ class PokeBattle_Move_007 < PokeBattle_Move
       if opponent.hasType?(:GRASS)
         @battle.pbDisplay(_INTL("It doesn't affect {1}...",opponent.pbThis(true)))
         return -1
-      elsif (opponent.ability == :OVERCOAT) && !(opponent.moldbroken)
+      elsif (opponent.hasAbility?(:OVERCOAT)) && !(opponent.moldbroken)
         @battle.pbDisplay(_INTL("{1}'s {2} made the attack ineffective!",
         opponent.pbThis,getAbilityName(opponent.ability),self.name))
         return -1
@@ -2091,8 +2091,8 @@ class PokeBattle_Move_04A < PokeBattle_Move
       @battle.pbDisplay(_INTL("{1} is protected by Mist!",opponent.pbThis))
       return -1
     end
-    if ((opponent.ability == :CLEARBODY ||
-       opponent.ability == :WHITESMOKE) && !(opponent.moldbroken)) || opponent.ability == :FULLMETALBODY
+    if ((opponent.hasAbility?(:CLEARBODY) ||
+       opponent.hasAbility?(:WHITESMOKE)) && !(opponent.moldbroken)) || opponent.hasAbility?(:FULLMETALBODY)
       @battle.pbDisplay(_INTL("{1}'s {2} prevents stat loss!",opponent.pbThis,
          getAbilityName(opponent.ability)))
       return -1
@@ -2169,7 +2169,7 @@ class PokeBattle_Move_04D < PokeBattle_Move
       if opponent.hasType?(:GRASS)
         @battle.pbDisplay(_INTL("It doesn't affect {1}...",opponent.pbThis(true)))
         return -1
-      elsif (opponent.ability == :OVERCOAT) && !(opponent.moldbroken)
+      elsif (opponent.hasAbility?(:OVERCOAT)) && !(opponent.moldbroken)
         @battle.pbDisplay(_INTL("{1}'s {2} made the attack ineffective!",
         opponent.pbThis,getAbilityName(opponent.ability),self.name))
         return -1
@@ -2207,7 +2207,7 @@ class PokeBattle_Move_04E < PokeBattle_Move
       @battle.pbDisplay(_INTL("But it failed!"))
       return -1
     end
-    if opponent.ability == :OBLIVIOUS && !(opponent.moldbroken)
+    if opponent.hasAbility?(:OBLIVIOUS) && !(opponent.moldbroken)
       @battle.pbDisplay(_INTL("{1}'s {2} prevents romance!",opponent.pbThis,
          getAbilityName(opponent.ability)))
       return -1
@@ -2220,7 +2220,7 @@ class PokeBattle_Move_04E < PokeBattle_Move
   def pbAdditionalEffect(attacker,opponent)
     return false if attacker.gender==2 || opponent.gender==2 ||
                     attacker.gender==opponent.gender
-    return false if opponent.ability == :OBLIVIOUS && !(opponent.moldbroken)
+    return false if opponent.hasAbility?(:OBLIVIOUS) && !(opponent.moldbroken)
     if opponent.pbCanReduceStatStage?(PBStats::SPATK,false)
       opponent.pbReduceStat(PBStats::SPATK,2,abilitymessage:false, statdropper: attacker)
     end
@@ -2606,7 +2606,7 @@ end
 ################################################################################
 class PokeBattle_Move_05E < PokeBattle_Move
   def pbEffect(attacker,opponent,hitnum=0,alltargets=nil,showanimation=true)
-    if (attacker.ability == :MULTITYPE) || (attacker.ability == :RKSSYSTEM) || (attacker.species == :SILVALLY && attacker.crested)
+    if (attacker.hasAbility?(:MULTITYPE)) || (attacker.hasAbility?(:RKSSYSTEM)) || (attacker.species == :SILVALLY && attacker.crested)
       @battle.pbDisplay(_INTL("But it failed!"))
       return -1
     end
@@ -2649,7 +2649,7 @@ end
 ################################################################################
 class PokeBattle_Move_05F < PokeBattle_Move
   def pbEffect(attacker,opponent,hitnum=0,alltargets=nil,showanimation=true)
-   if attacker.ability == :MULTITYPE || attacker.ability == :RKSSYSTEM || (attacker.species == :SILVALLY && attacker.crested)
+   if attacker.hasAbility?(:MULTITYPE) || attacker.hasAbility?(:RKSSYSTEM) || (attacker.species == :SILVALLY && attacker.crested)
       @battle.pbDisplay(_INTL("But it failed!"))
       return -1
     end
@@ -2701,8 +2701,8 @@ end
 ################################################################################
 class PokeBattle_Move_060 < PokeBattle_Move
   def pbEffect(attacker,opponent,hitnum=0,alltargets=nil,showanimation=true)
-   if attacker.ability == :MULTITYPE ||
-     attacker.ability == :RKSSYSTEM || (attacker.species == :SILVALLY && attacker.crested)
+   if attacker.hasAbility?(:MULTITYPE) ||
+     attacker.hasAbility?(:RKSSYSTEM) || (attacker.species == :SILVALLY && attacker.crested)
       @battle.pbDisplay(_INTL("But it failed!"))
       return -1
     end
@@ -2742,8 +2742,8 @@ class PokeBattle_Move_061 < PokeBattle_Move
       @battle.pbDisplay(_INTL("But it failed!"))
       return -1
     end
-    if (opponent.ability == :MULTITYPE) ||
-      (opponent.ability == :RKSSYSTEM) || (attacker.species == :SILVALLY && attacker.crested)
+    if (opponent.hasAbility?(:MULTITYPE)) ||
+      (opponent.hasAbility?(:RKSSYSTEM)) || (attacker.species == :SILVALLY && attacker.crested)
       @battle.pbDisplay(_INTL("But it failed!"))
       return -1
     end
@@ -2761,8 +2761,8 @@ end
 ################################################################################
 class PokeBattle_Move_062 < PokeBattle_Move
   def pbEffect(attacker,opponent,hitnum=0,alltargets=nil,showanimation=true)
-    if (attacker.ability == :MULTITYPE) ||
-      (attacker.ability == :RKSSYSTEM) || (attacker.species == :SILVALLY && attacker.crested)
+    if (attacker.hasAbility?(:MULTITYPE)) ||
+      (attacker.hasAbility?(:RKSSYSTEM)) || (attacker.species == :SILVALLY && attacker.crested)
       @battle.pbDisplay(_INTL("But it failed!"))
       return -1
     end
@@ -2790,12 +2790,12 @@ class PokeBattle_Move_063 < PokeBattle_Move
       @battle.pbDisplay(_INTL("But it failed!"))
       return -1
     end
-    if (PBStuff::FIXEDABILITIES).include?(opponent.ability)
+    if (PBStuff::FIXEDABILITIES).any? { |a| opponent.hasAbility?(a) }
       @battle.pbDisplay(_INTL("But it failed!"))
       return -1
     end
     pbShowAnimation(@move,attacker,opponent,hitnum,alltargets,showanimation)
-    neutralgas = true if opponent.ability = :NEUTRALIZINGGAS
+    neutralgas = true if opponent.hasAbility?(:NEUTRALIZINGGAS)
     opponent.ability=:SIMPLE || 0
     abilityname=getAbilityName(:SIMPLE)
     @battle.pbDisplay(_INTL("{1} acquired {2}!",opponent.pbThis,abilityname))
@@ -2821,12 +2821,12 @@ class PokeBattle_Move_064 < PokeBattle_Move
       @battle.pbDisplay(_INTL("But it failed!"))
       return -1
     end
-    if (PBStuff::FIXEDABILITIES).include?(opponent.ability)
+    if (PBStuff::FIXEDABILITIES).any? { |a| opponent.hasAbility?(a) }
       @battle.pbDisplay(_INTL("But it failed!"))
       return -1
     end
     pbShowAnimation(@move,attacker,opponent,hitnum,alltargets,showanimation)
-    neutralgas = true if opponent.ability = :NEUTRALIZINGGAS
+    neutralgas = true if opponent.hasAbility?(:NEUTRALIZINGGAS)
     opponent.ability=:INSOMNIA || 0
     abilityname=getAbilityName(:INSOMNIA)
     @battle.pbDisplay(_INTL("{1} acquired {2}!",opponent.pbThis,abilityname))
@@ -2856,8 +2856,8 @@ end
 class PokeBattle_Move_065 < PokeBattle_Move
   def pbEffect(attacker,opponent,hitnum=0,alltargets=nil,showanimation=true)
     if opponent.ability==0 || attacker.ability==opponent.ability ||
-       (PBStuff::ABILITYBLACKLIST).include?(opponent.ability) ||
-       (PBStuff::FIXEDABILITIES).include?(attacker.ability)
+       (PBStuff::ABILITYBLACKLIST).any? { |a| opponent.hasAbility?(a) } ||
+       (PBStuff::FIXEDABILITIES).any? { |a| attacker.hasAbility?(a) }
       @battle.pbDisplay(_INTL("But it failed!"))
       return -1
     end
@@ -2879,9 +2879,9 @@ class PokeBattle_Move_066 < PokeBattle_Move
       return -1
     end
     if attacker.ability==0 || attacker.ability==opponent.ability ||
-        (PBStuff::FIXEDABILITIES).include?(opponent.ability) ||
-        opponent.ability == :TRUANT ||
-        ((PBStuff::ABILITYBLACKLIST).include?(attacker.ability) && attacker.ability != :WONDERGUARD)
+        (PBStuff::FIXEDABILITIES).any? { |a| opponent.hasAbility?(a) } ||
+        opponent.hasAbility?(:TRUANT) ||
+        ((PBStuff::ABILITYBLACKLIST).any? { |a| attacker.hasAbility?(a) } && attacker.ability != :WONDERGUARD)
       @battle.pbDisplay(_INTL("But it failed!"))
       return -1
     end
@@ -2899,8 +2899,8 @@ end
 class PokeBattle_Move_067 < PokeBattle_Move
   def pbEffect(attacker,opponent,hitnum=0,alltargets=nil,showanimation=true)
     if (attacker.ability.nil? && opponent.ability.nil?) ||
-       (PBStuff::FIXEDABILITIES - [:ZENMODE] + [:ILLUSION]).include?(attacker.ability) ||
-       (PBStuff::FIXEDABILITIES - [:ZENMODE] + [:ILLUSION]).include?(opponent.ability)
+       (PBStuff::FIXEDABILITIES - [:ZENMODE] + [:ILLUSION]).any? { |a| attacker.hasAbility?(a) } ||
+       (PBStuff::FIXEDABILITIES - [:ZENMODE] + [:ILLUSION]).any? { |a| opponent.hasAbility?(a) }
       @battle.pbDisplay(_INTL("But it failed!"))
       return -1
     end
@@ -2923,12 +2923,12 @@ end
 ################################################################################
 class PokeBattle_Move_068 < PokeBattle_Move
   def pbEffect(attacker,opponent,hitnum=0,alltargets=nil,showanimation=true)
-    if (PBStuff::FIXEDABILITIES).include?(opponent.ability) || opponent.effects[:Substitute]>0
+    if (PBStuff::FIXEDABILITIES).any? { |a| opponent.hasAbility?(a) } || opponent.effects[:Substitute]>0
       @battle.pbDisplay(_INTL("But it failed!"))
       return -1
     end
     pbShowAnimation(@move,attacker,opponent,hitnum,alltargets,showanimation)
-    neutralgas = true if opponent.ability = :NEUTRALIZINGGAS
+    neutralgas = true if opponent.hasAbility?(:NEUTRALIZINGGAS)
     opponent.ability = nil  #Cancel out ability
     opponent.effects[:GastroAcid]=true
     opponent.effects[:Truant]=false
@@ -3087,10 +3087,10 @@ end
 ################################################################################
 class PokeBattle_Move_070 < PokeBattle_Move
   def pbAccuracyCheck(attacker,opponent)
-    return false if opponent.ability == :STURDY && !opponent.moldbroken
+    return false if opponent.hasAbility?(:STURDY) && !opponent.moldbroken
     return false if opponent.pokemon.piece==:PAWN && @battle.FE == :CHESS
     return false if opponent.level > attacker.level || (@move == :SHEERCOLD && opponent.hasType?(:ICE))
-    return true if opponent.level <= attacker.level && (attacker.ability == :NOGUARD || opponent.ability == :NOGUARD) # no guard OHKO move situation.
+    return true if opponent.level <= attacker.level && (attacker.hasAbility?(:NOGUARD) || opponent.hasAbility?(:NOGUARD)) # no guard OHKO move situation.
     acc = @accuracy + attacker.level - opponent.level
     return @battle.pbRandom(100) < acc
   end
@@ -3368,7 +3368,7 @@ class PokeBattle_Move_07C < PokeBattle_Move
   def pbEffect(attacker,opponent,hitnum=0,alltargets=nil,showanimation=true)
     ret=super(attacker,opponent,hitnum,alltargets,showanimation)
     if opponent.damagestate.calcdamage>0 && !opponent.damagestate.substitute &&
-       opponent.status== :PARALYSIS && !(attacker.ability == :PARENTALBOND && hitnum==0)
+       opponent.status== :PARALYSIS && !(attacker.hasAbility?(:PARENTALBOND) && hitnum==0)
       opponent.status=nil
       @battle.pbDisplay(_INTL("{1} was cured of paralysis.",opponent.pbThis))
     end
@@ -3381,7 +3381,7 @@ end
 ################################################################################
 class PokeBattle_Move_07D < PokeBattle_Move
   def pbBaseDamage(basedmg,attacker,opponent)
-    if (opponent.status== :SLEEP || (opponent.ability == :COMATOSE && @battle.FE != :ELECTERRAIN)) &&
+    if (opponent.status== :SLEEP || (opponent.hasAbility?(:COMATOSE) && @battle.FE != :ELECTERRAIN)) &&
        opponent.effects[:Substitute]==0
       return basedmg*2
     end
@@ -3391,7 +3391,7 @@ class PokeBattle_Move_07D < PokeBattle_Move
   def pbEffect(attacker,opponent,hitnum=0,alltargets=nil,showanimation=true)
     ret=super(attacker,opponent,hitnum,alltargets,showanimation)
     if opponent.damagestate.calcdamage>0 && !opponent.damagestate.substitute &&
-       opponent.status== :SLEEP && !(attacker.ability == :PARENTALBOND && hitnum==0)
+       opponent.status== :SLEEP && !(attacker.hasAbility?(:PARENTALBOND) && hitnum==0)
       opponent.pbCureStatus
     end
     return ret
@@ -3413,7 +3413,7 @@ end
 ################################################################################
 class PokeBattle_Move_07F < PokeBattle_Move
   def pbBaseDamage(basedmg,attacker,opponent)
-    if (!opponent.status.nil? || (opponent.ability == :COMATOSE && @battle.FE != :ELECTERRAIN) || @battle.FE == :INFERNAL) &&
+    if (!opponent.status.nil? || (opponent.hasAbility?(:COMATOSE) && @battle.FE != :ELECTERRAIN) || @battle.FE == :INFERNAL) &&
        opponent.effects[:Substitute]==0
       return basedmg*2
     end
@@ -4330,7 +4330,7 @@ class PokeBattle_Move_0A4 < PokeBattle_Move
       opponent.pbFreeze
       @battle.pbDisplay(_INTL("{1} was frozen!",opponent.pbThis))
     when :ROCKY,:CAVE,:MOUNTAIN,:DIMENSIONAL,:DEEPEARTH
-      return false if opponent.ability == :INNERFOCUS || opponent.damagestate.substitute
+      return false if opponent.hasAbility?(:INNERFOCUS) || opponent.damagestate.substitute
       opponent.effects[:Flinch]=true
     when :FACTORY,:UNDERWATER
       return false if !opponent.pbCanReduceStatStage?(PBStats::ATTACK,1,false)
@@ -4390,7 +4390,7 @@ class PokeBattle_Move_0A5 < PokeBattle_Move
     if @battle.FE == :CHESS && @move == :FALSESURRENDER
       if !@battle.pbCheckSideAbility(:AROMAVEIL,opponent).nil? && !(opponent.moldbroken)
         @battle.pbDisplay(_INTL("The Aroma Veil protects #{opponent.pbThis} from being taunted!"))
-      elsif (opponent.ability == :OBLIVIOUS) && !(opponent.moldbroken)
+      elsif (opponent.hasAbility?(:OBLIVIOUS)) && !(opponent.moldbroken)
         @battle.pbDisplay(_INTL("It doesn't affect {1}...",opponent.pbThis(true)))
       elsif !(opponent.effects[:Taunt]>0)
         pbShowAnimation(@move,attacker,opponent,hitnum,alltargets,showanimation)
@@ -4880,7 +4880,7 @@ class PokeBattle_Move_0BA < PokeBattle_Move
     end
     # UPDATE 11/16/2013
     # Oblivious now protects from taunt
-    if (opponent.ability == :OBLIVIOUS) && !(opponent.moldbroken)
+    if (opponent.hasAbility?(:OBLIVIOUS)) && !(opponent.moldbroken)
       @battle.pbDisplay(_INTL("It doesn't affect {1}...",opponent.pbThis(true)))
       return -1
     end
@@ -5036,7 +5036,7 @@ class PokeBattle_Move_0C0 < PokeBattle_Move
   def pbNumHits(attacker)
     hitchances=[2,2,3,3,4,5]
     ret=hitchances[@battle.pbRandom(hitchances.length)]
-    ret=5 if attacker.ability == :SKILLLINK
+    ret=5 if attacker.hasAbility?(:SKILLLINK)
     return ret
   end
 end
@@ -5722,7 +5722,7 @@ class PokeBattle_Move_0D2 < PokeBattle_Move
   def pbEffect(attacker,opponent,hitnum=0,alltargets=nil,showanimation=true)
     ret=super(attacker,opponent,hitnum,alltargets,showanimation)
     if opponent.damagestate.calcdamage>0 && attacker.effects[:Outrage]==0 && attacker.status!=:SLEEP  #TODO: Not likely what actually happens, but good enough
-      if attacker.ability == :PARENTALBOND
+      if attacker.hasAbility?(:PARENTALBOND)
         attacker.effects[:Outrage]=4+(@battle.pbRandom(2)*2)
       else
         attacker.effects[:Outrage]=2+@battle.pbRandom(2)
@@ -6015,7 +6015,7 @@ class PokeBattle_Move_0DD < PokeBattle_Move
       hpgain=((opponent.damagestate.hplost+1)/2).floor
       hpgain=((opponent.damagestate.hplost+1)*3/4).floor if Rejuv && @battle.FE == :ELECTERRAIN && @move == :PARABOLICCHARGE
       hpgain=((opponent.damagestate.hplost+1)*3/4).floor if Rejuv && @battle.FE == :GRASSY && [:ABSORB,:MEGADRAIN,:GIGADRAIN,:HORNLEECH].include?(@move)
-      if opponent.ability == :LIQUIDOOZE
+      if opponent.hasAbility?(:LIQUIDOOZE)
         hpgain*=2 if @battle.FE == :WASTELAND || @battle.FE == :MURKWATERSURFACE || @battle.FE == :CORRUPTED
         attacker.pbReduceHP(hpgain,true)
         @battle.pbDisplay(_INTL("{1} sucked up the liquid ooze!",attacker.pbThis))
@@ -6069,7 +6069,7 @@ class PokeBattle_Move_0DF < PokeBattle_Move
     end
     pbShowAnimation(@move,attacker,opponent,hitnum,alltargets,showanimation)
     hpgain=((opponent.totalhp+1)/2).floor
-    if (attacker.ability == :MEGALAUNCHER)
+    if (attacker.hasAbility?(:MEGALAUNCHER))
       hpgain=((opponent.totalhp+1)/1.33).floor
     end
     opponent.pbRecoverHP(hpgain,true)
@@ -6143,8 +6143,8 @@ class PokeBattle_Move_0E2 < PokeBattle_Move
       @battle.pbDisplay(_INTL("{1} is protected by Mist!",opponent.pbThis))
       prevented=true
     end
-    if !prevented && (((opponent.ability == :CLEARBODY ||
-       opponent.ability == :WHITESMOKE) && !(opponent.moldbroken)) || opponent.ability == :FULLMETALBODY)
+    if !prevented && (((opponent.hasAbility?(:CLEARBODY) ||
+       opponent.hasAbility?(:WHITESMOKE)) && !(opponent.moldbroken)) || opponent.hasAbility?(:FULLMETALBODY))
       @battle.pbDisplay(_INTL("{1}'s {2} prevents stat loss!",opponent.pbThis,
          getAbilityName(opponent.ability)))
       prevented=true
@@ -6225,7 +6225,7 @@ class PokeBattle_Move_0E5 < PokeBattle_Move
     @battle.pbDisplay(_INTL("All Pokémon hearing the song will faint in three turns!"))
     for i in 0...4
       if @battle.battlers[i].effects[:PerishSong]==0
-        if @battle.battlers[i].ability == :SOUNDPROOF && !(@battle.battlers[i].moldbroken)
+        if @battle.battlers[i].hasAbility?(:SOUNDPROOF) && !(@battle.battlers[i].moldbroken)
           @battle.pbDisplay(_INTL("{1}'s {2} blocks {3}!",@battle.battlers[i].pbThis,
              getAbilityName(@battle.battlers[i].ability),@name))
         else
@@ -6347,7 +6347,7 @@ class PokeBattle_Move_0EB < PokeBattle_Move
         return -1
       end      
     end
-    if (opponent.ability == :SUCTIONCUPS) && !(opponent.moldbroken)
+    if (opponent.hasAbility?(:SUCTIONCUPS)) && !(opponent.moldbroken)
       @battle.pbDisplay(_INTL("{1} anchored itself with {2}!",opponent.pbThis,getAbilityName(opponent.ability)))
       return -1
     end
@@ -6391,7 +6391,7 @@ class PokeBattle_Move_0EC < PokeBattle_Move
     if !attacker.isFainted? && !opponent.isFainted? &&
      opponent.damagestate.calcdamage>0 && !opponent.damagestate.substitute &&
      (opponent.ability != :SUCTIONCUPS || opponent.moldbroken) &&
-     !opponent.effects[:Ingrain] && !(attacker.ability == :PARENTALBOND && hitnum==0) && @battle.FE != :COLOSSEUM
+     !opponent.effects[:Ingrain] && !(attacker.hasAbility?(:PARENTALBOND) && hitnum==0) && @battle.FE != :COLOSSEUM
       if !@battle.opponent
         if !(opponent.level>attacker.level)
           @battle.decision=3 # Set decision to escaped
@@ -6453,7 +6453,7 @@ class PokeBattle_Move_0EE < PokeBattle_Move
     attacker.vanished=true
     ret=super(attacker,opponent,hitnum,alltargets,showanimation)
     if !attacker.isFainted? && @battle.pbCanChooseNonActive?(attacker.index) &&
-       !@battle.pbAllFainted?(@battle.pbParty(opponent.index)) && !(attacker.ability == :PARENTALBOND && hitnum==0)
+       !@battle.pbAllFainted?(@battle.pbParty(opponent.index)) && !(attacker.hasAbility?(:PARENTALBOND) && hitnum==0)
 
       if !opponent.hasWorkingItem(:EJECTBUTTON)
         attacker.userSwitch = true if pbTypeModifier(@type,attacker,opponent)!=0 && !(@battle.FE == :INVERSE)
@@ -6469,9 +6469,9 @@ class PokeBattle_Move_0EE < PokeBattle_Move
         attacker.userSwitch = false
         attacker.vanished=false
       end
-      if @move == :VOLTSWITCH && (opponent.ability == :MOTORDRIVE ||
-        opponent.ability == :VOLTABSORB || 
-        opponent.ability == :LIGHTNINGROD)
+      if @move == :VOLTSWITCH && (opponent.hasAbility?(:MOTORDRIVE) ||
+        opponent.hasAbility?(:VOLTABSORB) || 
+        opponent.hasAbility?(:LIGHTNINGROD))
         attacker.userSwitch = false
         attacker.vanished=false
       end
@@ -6527,8 +6527,8 @@ class PokeBattle_Move_0F0 < PokeBattle_Move
   def pbEffect(attacker,opponent,hitnum=0,alltargets=nil,showanimation=true)
     ret=super(attacker,opponent,hitnum,alltargets,showanimation)
     if opponent.damagestate.calcdamage>0 && !opponent.damagestate.substitute && opponent.item
-      if opponent.hasWorkingItem(:ROCKYHELMET,true) && attacker.ability != :MAGICGUARD && !(attacker.ability == :WONDERGUARD && @battle.FE == :COLOSSEUM) &&
-        !(opponent.ability == :STICKYHOLD && !(opponent.moldbroken))
+      if opponent.hasWorkingItem(:ROCKYHELMET,true) && attacker.ability != :MAGICGUARD && !(attacker.hasAbility?(:WONDERGUARD) && @battle.FE == :COLOSSEUM) &&
+        !(opponent.hasAbility?(:STICKYHOLD) && !(opponent.moldbroken))
         @battle.scene.pbDamageAnimation(attacker,0)
         attacker.pbReduceHP((attacker.totalhp/6.0).floor)
         @battle.pbDisplay(_INTL("{1} was hurt by the {2}!",attacker.pbThis,
@@ -6537,10 +6537,10 @@ class PokeBattle_Move_0F0 < PokeBattle_Move
           return ret
         end
       end      
-      if opponent.ability == :STICKYHOLD && !(opponent.moldbroken)
+      if opponent.hasAbility?(:STICKYHOLD) && !(opponent.moldbroken)
         abilityname=getAbilityName(opponent.ability)
         @battle.pbDisplay(_INTL("{1}'s {2} made {3} ineffective!",opponent.pbThis,abilityname,@name))
-      elsif !@battle.pbIsUnlosableItem(opponent,opponent.item) && !(attacker.ability == :PARENTALBOND && hitnum==0)
+      elsif !@battle.pbIsUnlosableItem(opponent,opponent.item) && !(attacker.hasAbility?(:PARENTALBOND) && hitnum==0)
         # Items that still work before being knocked of
         if opponent.item==:WEAKNESSPOLICY && opponent.damagestate.typemod>4 && opponent.hp > 0
           if opponent.pbCanIncreaseStatStage?(PBStats::ATTACK)
@@ -6579,7 +6579,7 @@ class PokeBattle_Move_0F1 < PokeBattle_Move
     ret=super(attacker,opponent,hitnum,alltargets,showanimation)
     if opponent.damagestate.calcdamage>0 &&
        !opponent.damagestate.substitute && opponent.item
-      if opponent.ability == :STICKYHOLD && !(opponent.moldbroken)
+      if opponent.hasAbility?(:STICKYHOLD) && !(opponent.moldbroken)
         abilityname=getAbilityName(opponent.ability)
         @battle.pbDisplay(_INTL("{1}'s {2} made {3} ineffective!",opponent.pbThis,abilityname,@name))
       elsif !@battle.pbIsUnlosableItem(opponent,opponent.item) &&
@@ -6633,7 +6633,7 @@ class PokeBattle_Move_0F2 < PokeBattle_Move
       @battle.pbDisplay(_INTL("But it failed!"))
       return -1
     end
-    if opponent.ability == :STICKYHOLD && !(opponent.moldbroken)
+    if opponent.hasAbility?(:STICKYHOLD) && !(opponent.moldbroken)
       abilityname=getAbilityName(opponent.ability)
       @battle.pbDisplay(_INTL("{1}'s {2} made {3} ineffective!",opponent.pbThis,abilityname,name))
       return -1
@@ -6706,9 +6706,9 @@ class PokeBattle_Move_0F4 < PokeBattle_Move
   def pbEffect(attacker,opponent,hitnum=0,alltargets=nil,showanimation=true)
     ret=super(attacker,opponent,hitnum,alltargets,showanimation)
     if !attacker.isFainted? && opponent.damagestate.calcdamage>0 &&
-       !opponent.damagestate.substitute && (!opponent.item.nil? && pbIsBerry?(opponent.item)) && !(attacker.ability == :PARENTALBOND && hitnum==0) && 
+       !opponent.damagestate.substitute && (!opponent.item.nil? && pbIsBerry?(opponent.item)) && !(attacker.hasAbility?(:PARENTALBOND) && hitnum==0) && 
        !opponent.pokemon.corrosiveGas
-      if opponent.ability == :STICKYHOLD && !(opponent.moldbroken)
+      if opponent.hasAbility?(:STICKYHOLD) && !(opponent.moldbroken)
         abilityname=getAbilityName(opponent.ability)
         @battle.pbDisplay(_INTL("{1}'s {2} made {3} ineffective!",opponent.pbThis,abilityname,@name))
       else
@@ -6774,7 +6774,7 @@ class PokeBattle_Move_0F7 < PokeBattle_Move
     return true if attacker.item.nil? ||
                    @battle.pbIsUnlosableItem(attacker,attacker.item) ||
                    pbIsPokeBall?(attacker.item) ||
-                   attacker.ability == :KLUTZ ||
+                   attacker.hasAbility?(:KLUTZ) ||
                    attacker.effects[:Embargo]>0
     return false if PBStuff::FLINGDAMAGE[attacker.item]
     return false if !attacker.item.nil? && pbIsBerry?(attacker.item)
@@ -6906,7 +6906,7 @@ class PokeBattle_Move_0FA < PokeBattle_Move
     ret=super(attacker,opponent,hitnum,alltargets,showanimation)
     if opponent.damagestate.calcdamage>0 && !opponent.damagestate.substitute &&
        attacker.ability != :ROCKHEAD && !(attacker.species == :RAMPARDOS && attacker.crested) && attacker.ability != :MAGICGUARD &&
-       !(@move == :WILDCHARGE && @battle.FE == :ELECTERRAIN) && !(attacker.ability == :WONDERGUARD && @battle.FE == :COLOSSEUM)
+       !(@move == :WILDCHARGE && @battle.FE == :ELECTERRAIN) && !(attacker.hasAbility?(:WONDERGUARD) && @battle.FE == :COLOSSEUM)
       attacker.pbReduceHP([1,(opponent.damagestate.hplost*hasFlag?(:recoil)).floor].max)
       @battle.pbDisplay(_INTL("{1} is damaged by the recoil!",attacker.pbThis))
     end
@@ -6923,7 +6923,7 @@ class PokeBattle_Move_0FD < PokeBattle_Move
     ret=super(attacker,opponent,hitnum,alltargets,showanimation)
     if opponent.damagestate.calcdamage>0 && !opponent.damagestate.substitute &&
        attacker.ability != :ROCKHEAD && !(attacker.species == :RAMPARDOS && attacker.crested) &&
-       attacker.ability != :MAGICGUARD && !(attacker.ability == :WONDERGUARD && @battle.FE == :COLOSSEUM)
+       attacker.ability != :MAGICGUARD && !(attacker.hasAbility?(:WONDERGUARD) && @battle.FE == :COLOSSEUM)
        attacker.pbReduceHP([1,(opponent.damagestate.hplost*hasFlag?(:recoil)).floor].max)
       @battle.pbDisplay(_INTL("{1} is damaged by the recoil!",attacker.pbThis))
     end
@@ -6947,7 +6947,7 @@ class PokeBattle_Move_0FE < PokeBattle_Move
     ret=super(attacker,opponent,hitnum,alltargets,showanimation)
     if opponent.damagestate.calcdamage>0 && !opponent.damagestate.substitute &&
        attacker.ability != :ROCKHEAD && !(attacker.species == :RAMPARDOS && attacker.crested) &&
-       attacker.ability != :MAGICGUARD && !(attacker.ability == :WONDERGUARD && @battle.FE == :COLOSSEUM)
+       attacker.ability != :MAGICGUARD && !(attacker.hasAbility?(:WONDERGUARD) && @battle.FE == :COLOSSEUM)
       attacker.pbReduceHP([1,(opponent.damagestate.hplost*hasFlag?(:recoil)).floor].max)
       @battle.pbDisplay(_INTL("{1} is damaged by the recoil!",attacker.pbThis))
     end
@@ -7153,7 +7153,7 @@ class PokeBattle_Move_103 < PokeBattle_Move
     pbShowAnimation(@move,attacker,opponent,hitnum,alltargets,showanimation)
     for i in 0...4
       next if !(attacker.pbIsOpposing?(i))
-      if (@battle.battlers[i].ability == :MAGICBOUNCE && !PBStuff::TWOTURNMOVE.include?(@battle.battlers[i].effects[:TwoTurnAttack])) || 
+      if (@battle.battlers[i].hasAbility?(:MAGICBOUNCE) && !PBStuff::TWOTURNMOVE.include?(@battle.battlers[i].effects[:TwoTurnAttack])) || 
         (@battle.battlers[i]).effects[:MagicCoat]
          attacker.pbOwnSide.effects[:Spikes]+=1 if attacker.pbOwnSide.effects[:Spikes]<3
          @battle.pbDisplay(_INTL("{1} bounced the Spikes back!",(@battle.battlers[i]).pbThis))
@@ -7200,7 +7200,7 @@ class PokeBattle_Move_104 < PokeBattle_Move
     pbShowAnimation(@move,attacker,opponent,hitnum,alltargets,showanimation)
     for i in 0...4
       next if !(attacker.pbIsOpposing?(i))
-      if (@battle.battlers[i].ability == :MAGICBOUNCE && !PBStuff::TWOTURNMOVE.include?(@battle.battlers[i].effects[:TwoTurnAttack])) || 
+      if (@battle.battlers[i].hasAbility?(:MAGICBOUNCE) && !PBStuff::TWOTURNMOVE.include?(@battle.battlers[i].effects[:TwoTurnAttack])) || 
         (@battle.battlers[i]).effects[:MagicCoat]
          attacker.pbOwnSide.effects[:ToxicSpikes]+=1 if attacker.pbOwnSide.effects[:ToxicSpikes]<2
          @battle.pbDisplay(_INTL("{1} bounced the Toxic Spikes back!",(@battle.battlers[i]).pbThis))
@@ -7246,7 +7246,7 @@ class PokeBattle_Move_105 < PokeBattle_Move
     end
     for i in 0...4
       next if !(attacker.pbIsOpposing?(i))
-      if (@battle.battlers[i].ability == :MAGICBOUNCE && !PBStuff::TWOTURNMOVE.include?(@battle.battlers[i].effects[:TwoTurnAttack])) || 
+      if (@battle.battlers[i].hasAbility?(:MAGICBOUNCE) && !PBStuff::TWOTURNMOVE.include?(@battle.battlers[i].effects[:TwoTurnAttack])) || 
         (@battle.battlers[i]).effects[:MagicCoat]
          attacker.pbOwnSide.effects[:StealthRock]=true
          @battle.pbDisplay(_INTL("{1} bounced the Stealth Rocks back!",(@battle.battlers[i]).pbThis))
@@ -7586,7 +7586,7 @@ class PokeBattle_Move_10F < PokeBattle_Move
     end
     pbShowAnimation(@move,attacker,opponent,hitnum,alltargets,showanimation)
     opponent.effects[:Nightmare]=true
-    opponent.effects[:MeanLook]=attacker.index if attacker.ability == :WORLDOFNIGHTMARES
+    opponent.effects[:MeanLook]=attacker.index if attacker.hasAbility?(:WORLDOFNIGHTMARES)
     @battle.pbDisplay(_INTL("{1} began having a nightmare!",opponent.pbThis))
     return 0
   end
@@ -8017,7 +8017,7 @@ class PokeBattle_Move_11C < PokeBattle_Move
       opponent.effects[:SmackDown]=true
       showmsg=false
       showmsg=true if opponent.hasType?(:FLYING) ||
-                      opponent.ability == :LEVITATE
+                      opponent.hasAbility?(:LEVITATE)
       if !$cache.moves[opponent.effects[:TwoTurnAttack]].nil? && 
         ($cache.moves[opponent.effects[:TwoTurnAttack]].function==0xC9 || # Fly
          $cache.moves[opponent.effects[:TwoTurnAttack]].function==0xCC)    # Bounce
@@ -8337,8 +8337,8 @@ class PokeBattle_Move_138 < PokeBattle_Move
       @battle.pbDisplay(_INTL("{1} is protected by Mist!",opponent.pbThis))
       prevented=true
     end
-    if !prevented && ((((opponent.ability == :CLEARBODY) ||
-       (opponent.ability == :WHITESMOKE)) && !(opponent.moldbroken)) || opponent.ability == :FULLMETALBODY)
+    if !prevented && ((((opponent.hasAbility?(:CLEARBODY)) ||
+       (opponent.hasAbility?(:WHITESMOKE))) && !(opponent.moldbroken)) || opponent.hasAbility?(:FULLMETALBODY))
       @battle.pbDisplay(_INTL("{1}'s {2} prevents stat loss!",opponent.pbThis,
          getAbilityName(opponent.ability)))
       prevented=true
@@ -8379,7 +8379,7 @@ class PokeBattle_Move_139 < PokeBattle_Move
     ret=super(attacker,opponent,hitnum,alltargets,showanimation)
     if opponent.damagestate.calcdamage>0
       hpgain=((opponent.damagestate.hplost+1)*0.75).floor
-      if (opponent.ability == :LIQUIDOOZE)
+      if (opponent.hasAbility?(:LIQUIDOOZE))
         hpgain*=2 if @battle.FE == :WASTELAND || @battle.FE == :MURKWATERSURFACE || @battle.FE == :CORRUPTED
         attacker.pbReduceHP(hpgain,true)
         @battle.pbDisplay(_INTL("{1} sucked up the liquid ooze!",attacker.pbThis))
@@ -8525,8 +8525,8 @@ class PokeBattle_Move_13D < PokeBattle_Move
       @battle.pbDisplay(_INTL("{1} is protected by Mist!",opponent.pbThis))
       return -1
     end
-    if (((opponent.ability == :CLEARBODY) ||
-       (opponent.ability == :WHITESMOKE)) && !(opponent.moldbroken)) || opponent.ability == :FULLMETALBODY
+    if (((opponent.hasAbility?(:CLEARBODY)) ||
+       (opponent.hasAbility?(:WHITESMOKE))) && !(opponent.moldbroken)) || opponent.hasAbility?(:FULLMETALBODY)
       @battle.pbDisplay(_INTL("{1}'s {2} prevents stat loss!",opponent.pbThis,getAbilityName(opponent.ability)))
       return -1
     end
@@ -8635,8 +8635,8 @@ class PokeBattle_Move_13F < PokeBattle_Move
       @battle.pbDisplay(_INTL("{1} is protected by Mist!",opponent.pbThis))
       return -1
     end
-    if (((opponent.ability == :CLEARBODY) ||
-       (opponent.ability == :WHITESMOKE)) && !(opponent.moldbroken)) || opponent.ability == :FULLMETALBODY
+    if (((opponent.hasAbility?(:CLEARBODY)) ||
+       (opponent.hasAbility?(:WHITESMOKE))) && !(opponent.moldbroken)) || opponent.hasAbility?(:FULLMETALBODY)
       @battle.pbDisplay(_INTL("{1}'s {2} prevents stat loss!",opponent.pbThis,
          getAbilityName(opponent.ability)))
       return -1
@@ -8672,7 +8672,7 @@ class PokeBattle_Move_141 < PokeBattle_Move
     pbShowAnimation(@move,attacker,opponent,hitnum,alltargets,showanimation)
     for i in 0...4
       next if !(attacker.pbIsOpposing?(i))
-      if (@battle.battlers[i].ability == :MAGICBOUNCE && !PBStuff::TWOTURNMOVE.include?(@battle.battlers[i].effects[:TwoTurnAttack])) || 
+      if (@battle.battlers[i].hasAbility?(:MAGICBOUNCE) && !PBStuff::TWOTURNMOVE.include?(@battle.battlers[i].effects[:TwoTurnAttack])) || 
         (@battle.battlers[i]).effects[:MagicCoat]
          attacker.pbOwnSide.effects[:StickyWeb]=true
          @battle.pbDisplay(_INTL("{1} bounced the Sticky Web back!",(@battle.battlers[i]).pbThis))
@@ -8724,8 +8724,8 @@ class PokeBattle_Move_143 < PokeBattle_Move
       @battle.pbDisplay(_INTL("But it failed!"))
       return -1
     end
-    if (opponent.ability == :MULTITYPE) ||
-      (opponent.ability == :RKSSYSTEM) || (opponent.species == :SILVALLY && opponent.crested)
+    if (opponent.hasAbility?(:MULTITYPE)) ||
+      (opponent.hasAbility?(:RKSSYSTEM)) || (opponent.species == :SILVALLY && opponent.crested)
       @battle.pbDisplay(_INTL("But it failed!"))
       return -1
     end
@@ -8753,8 +8753,8 @@ class PokeBattle_Move_144 < PokeBattle_Move
       @battle.pbDisplay(_INTL("But it failed!"))
       return -1
     end
-    if (opponent.ability == :MULTITYPE) ||
-      (opponent.ability == :RKSSYSTEM) || (attacker.species == :SILVALLY && attacker.crested)
+    if (opponent.hasAbility?(:MULTITYPE)) ||
+      (opponent.hasAbility?(:RKSSYSTEM)) || (attacker.species == :SILVALLY && attacker.crested)
       @battle.pbDisplay(_INTL("But it failed!"))
       return -1
     end
@@ -8791,7 +8791,7 @@ end
 ################################################################################
 class PokeBattle_Move_146 < PokeBattle_Move
   def pbEffect(attacker,opponent,hitnum=0,alltargets=nil,showanimation=true)
-    if attacker.pbPartner.ability == :PLUS || attacker.pbPartner.ability == :MINUS ||
+    if attacker.pbPartner.hasAbility?(:PLUS) || attacker.pbPartner.hasAbility?(:MINUS) ||
       (Rejuv && @battle.FE == :ELECTERRAIN)
        partnerfail=false
       if attacker.pbPartner.pbCanIncreaseStatStage?(PBStats::DEFENSE,false) &&
@@ -8799,7 +8799,7 @@ class PokeBattle_Move_146 < PokeBattle_Move
         pbShowAnimation(@move,attacker,nil,hitnum,alltargets,showanimation)
         showanim=true
         statboost = 1
-        statboost = 2 if @battle.FE == :DEEPEARTH || (Rejuv && @battle.FE == :ELECTERRAIN && (attacker.pbPartner.ability == :PLUS || attacker.pbPartner.ability == :MINUS))
+        statboost = 2 if @battle.FE == :DEEPEARTH || (Rejuv && @battle.FE == :ELECTERRAIN && (attacker.pbPartner.hasAbility?(:PLUS) || attacker.pbPartner.hasAbility?(:MINUS)))
         if attacker.pbPartner.pbCanIncreaseStatStage?(PBStats::DEFENSE,false)
           attacker.pbPartner.pbIncreaseStat(PBStats::DEFENSE,statboost,abilitymessage:false)
           showanim=false
@@ -8815,14 +8815,14 @@ class PokeBattle_Move_146 < PokeBattle_Move
       # partner does not have Plus/Minus
       partnerfail = true if !(Rejuv && @battle.FE == :ELECTERRAIN)
     end
-    if attacker.ability == :PLUS || attacker.ability == :MINUS ||
+    if attacker.hasAbility?(:PLUS) || attacker.hasAbility?(:MINUS) ||
       (Rejuv && @battle.FE == :ELECTERRAIN)
       if attacker.pbCanIncreaseStatStage?(PBStats::DEFENSE,false) &&
          attacker.pbCanIncreaseStatStage?(PBStats::SPDEF,false)
         pbShowAnimation(@move,attacker,nil,hitnum,alltargets,partnerfail)
         showanim=true
         statboost = 1
-        statboost = 2 if @battle.FE == :DEEPEARTH || (Rejuv && @battle.FE == :ELECTERRAIN && (attacker.ability == :PLUS || attacker.ability == :MINUS))
+        statboost = 2 if @battle.FE == :DEEPEARTH || (Rejuv && @battle.FE == :ELECTERRAIN && (attacker.hasAbility?(:PLUS) || attacker.hasAbility?(:MINUS)))
         if attacker.pbCanIncreaseStatStage?(PBStats::DEFENSE,false)
           attacker.pbIncreaseStat(PBStats::DEFENSE,statboost,abilitymessage:false)
           showanim=false
@@ -9044,7 +9044,7 @@ end
 class PokeBattle_Move_152 < PokeBattle_Move
   def pbEffect(attacker,opponent,hitnum=0,alltargets=nil,showanimation=true)
     return super(attacker,opponent) if @basedamage>0
-    if !opponent.effects[:Powder] && (!(opponent.ability == :OVERCOAT) || opponent.moldbroken) && !opponent.hasType?(:GRASS) && !opponent.hasWorkingItem(:SAFETYGOGGLES)
+    if !opponent.effects[:Powder] && (!(opponent.hasAbility?(:OVERCOAT)) || opponent.moldbroken) && !opponent.hasType?(:GRASS) && !opponent.hasWorkingItem(:SAFETYGOGGLES)
       @battle.pbAnimation(@move,attacker,opponent)
       @battle.pbDisplay(_INTL("{1} was covered in a thin powder!",attacker.pbThis))
       opponent.effects[:Powder]=true
@@ -9069,8 +9069,8 @@ class PokeBattle_Move_153 < PokeBattle_Move
     opponent.effects[:Electrify]=true
     @battle.pbDisplay(_INTL("{1} became electrified!",opponent.pbThis))
     if Rejuv && @battle.FE == :ELECTERRAIN &&
-      !opponent.effects[:Substitute]>0 && !((opponent.ability == :MULTITYPE) ||
-      (opponent.ability == :RKSSYSTEM) || (attacker.species == :SILVALLY && attacker.crested))
+      !opponent.effects[:Substitute]>0 && !((opponent.hasAbility?(:MULTITYPE)) ||
+      (opponent.hasAbility?(:RKSSYSTEM)) || (attacker.species == :SILVALLY && attacker.crested))
       opponent.type1=(:ELECTRIC)
       opponent.type2=(:ELECTRIC)
       typename=getTypeName((:ELECTRIC))
@@ -9311,8 +9311,8 @@ class PokeBattle_Move_160 < PokeBattle_Move
   def pbEffect(attacker,opponent,hitnum=0,alltargets=nil,showanimation=true)
     ret=super(attacker,opponent,hitnum,alltargets,showanimation)
     if opponent.hasMovedThisRound? && !@battle.switchedOut[opponent.index]
-      if !(PBStuff::FIXEDABILITIES).include?(opponent.ability)
-        neutralgas = true if opponent.ability = :NEUTRALIZINGGAS
+      if !(PBStuff::FIXEDABILITIES).any? { |a| opponent.hasAbility?(a) }
+        neutralgas = true if opponent.hasAbility?(:NEUTRALIZINGGAS)
         opponent.ability = nil  #Cancel out ability
         opponent.effects[:GastroAcid]=true
         opponent.effects[:Truant]=false
@@ -9378,8 +9378,8 @@ class PokeBattle_Move_163 < PokeBattle_Move
       @battle.pbDisplay(_INTL("But it failed!"))
       return -1
     end
-    if attacker.pbPartner.ability == :PLUS ||
-       attacker.pbPartner.ability == :MINUS
+    if attacker.pbPartner.hasAbility?(:PLUS) ||
+       attacker.pbPartner.hasAbility?(:MINUS)
       if @battle.FE!= :FACTORY
         if attacker.pbPartner.pbCanIncreaseStatStage?(PBStats::ATTACK,false) &&
            attacker.pbPartner.pbCanIncreaseStatStage?(PBStats::SPATK,false)
@@ -9501,7 +9501,7 @@ class PokeBattle_Move_167 < PokeBattle_Move
       end
       hpgain=((opponent.totalhp)/2).floor
       pbShowAnimation(@move,attacker,opponent,hitnum,alltargets,showanimation)
-      if !(opponent.ability == :BULLETPROOF || opponent.effects[:HealBlock]>0)
+      if !(opponent.hasAbility?(:BULLETPROOF) || opponent.effects[:HealBlock]>0)
         opponent.pbRecoverHP(hpgain,true)
         @battle.pbDisplay(_INTL("{1}'s HP was restored.",opponent.pbThis))
         return 0
@@ -9623,7 +9623,7 @@ class PokeBattle_Move_16C < PokeBattle_Move
     pbShowAnimation(@move,attacker,nil,hitnum,alltargets,showanimation)
     attacker.pbRecoverHP(hpgain,true)
     @battle.pbDisplay(_INTL("{1}'s HP was restored.",attacker.pbThis))
-    if (@battle.FE == :WATERSURFACE || @battle.FE == :MURKWATERSURFACE) && (attacker.ability == :WATERCOMPACTION)
+    if (@battle.FE == :WATERSURFACE || @battle.FE == :MURKWATERSURFACE) && (attacker.hasAbility?(:WATERCOMPACTION))
       if attacker.pbCanIncreaseStatStage?(PBStats::DEFENSE)
         attacker.pbIncreaseStatBasic(PBStats::DEFENSE,2)
         @battle.pbCommonAnimation("StatUp",attacker,nil)
@@ -9659,8 +9659,8 @@ class PokeBattle_Move_16E < PokeBattle_Move
                 PBStats::SPATK,PBStats::SPDEF,PBStats::ACCURACY,PBStats::EVASION]
         if opponent.stages[i]>0
           oppboost = opponent.stages[i]
-          oppboost *= -1 if attacker.ability == :CONTRARY
-          oppboost *= 2 if attacker.ability == :SIMPLE
+          oppboost *= -1 if attacker.hasAbility?(:CONTRARY)
+          oppboost *= 2 if attacker.hasAbility?(:SIMPLE)
           attacker.stages[i]+=oppboost
           attacker.stages[i] = attacker.stages[i].clamp(-6, 6)
           totalboost += oppboost
@@ -9827,7 +9827,7 @@ class PokeBattle_Move_175 < PokeBattle_Move
     end
     ret=super(attacker,opponent,hitnum,alltargets,showanimation)
     if opponent.damagestate.calcdamage>0 &&
-       attacker.ability != :MAGICGUARD && !(attacker.ability == :WONDERGUARD && @battle.FE == :COLOSSEUM)
+       attacker.ability != :MAGICGUARD && !(attacker.hasAbility?(:WONDERGUARD) && @battle.FE == :COLOSSEUM)
       if @battle.FE == :FACTORY && @move == :STEELBEAM 
         attacker.pbReduceHP((attacker.totalhp)/4).floor
       elsif @battle.FE == :SHORTCIRCUIT && @move == :STEELBEAM 
@@ -9856,13 +9856,13 @@ class PokeBattle_Move_176 < PokeBattle_Move
     if attacker.class == PokeBattle_Battler
       atkstage=attacker.stages[PBStats::ATTACK]+6
       atkmult *= 1.5 if attacker.hasWorkingItem(:CHOICEBAND)
-      atkmult *= 1.5 if attacker.ability == :HUSTLE
-      atkmult *= 1.5 if attacker.ability == :TOXICBOOST && (attacker.status== :POISON || @battle.FE == :CORROSIVE || @battle.FE == :CORROSIVEMIST || @battle.FE == :WASTELAND || @battle.FE == :MURKWATERSURFACE)
-      atkmult *= 1.5 if attacker.ability == :GUTS && !attacker.status.nil?
-      atkmult *= 0.5 if attacker.ability == :SLOWSTART && attacker.turncount<5 && !@battle.FE == :DEEPEARTH
-      atkmult *= 2 if (attacker.ability == :PUREPOWER && @battle.FE != :PSYTERRAIN) || attacker.ability == :HUGEPOWER
+      atkmult *= 1.5 if attacker.hasAbility?(:HUSTLE)
+      atkmult *= 1.5 if attacker.hasAbility?(:TOXICBOOST) && (attacker.status== :POISON || @battle.FE == :CORROSIVE || @battle.FE == :CORROSIVEMIST || @battle.FE == :WASTELAND || @battle.FE == :MURKWATERSURFACE)
+      atkmult *= 1.5 if attacker.hasAbility?(:GUTS) && !attacker.status.nil?
+      atkmult *= 0.5 if attacker.hasAbility?(:SLOWSTART) && attacker.turncount<5 && !@battle.FE == :DEEPEARTH
+      atkmult *= 2 if (attacker.hasAbility?(:PUREPOWER) && @battle.FE != :PSYTERRAIN) || attacker.hasAbility?(:HUGEPOWER)
       atkmult *= 2 if attacker.hasWorkingItem(:THICKCLUB) && ((attacker.pokemon.species == :CUBONE) || (attacker.pokemon.species == :MAROWAK))
-      atkmult *= 0.5 if attacker.status== :BURN && !(attacker.ability == :GUTS && !attacker.status.nil?)
+      atkmult *= 0.5 if attacker.status== :BURN && !(attacker.hasAbility?(:GUTS) && !attacker.status.nil?)
     end
     storedatk*=((stagemul[atkstage]/stagediv[atkstage])*atkmult)
     # Special Stuff
@@ -9874,12 +9874,12 @@ class PokeBattle_Move_176 < PokeBattle_Move
       spatkmult *= 1.5 if attacker.hasWorkingItem(:CHOICESPECS)
       spatkmult *= 2 if attacker.hasWorkingItem(:DEEPSEATOOTH) && (attacker.pokemon.species == :CLAMPERL)
       spatkmult *= 2 if attacker.hasWorkingItem(:LIGHTBALL) && (attacker.pokemon.species == :PIKACHU)
-      spatkmult *= 1.5 if attacker.ability == :FLAREBOOST && (attacker.status== :BURN || @battle.FE == :BURNING || @battle.FE == :VOLCANIC || @battle.FE == :INFERNAL) &&  @battle.FE != :FROZENDIMENSION
-      spatkmult *= 1.5 if attacker.ability == :MINUS && (attacker.pbPartner.ability == :PLUS || @battle.FE == :SHORTCIRCUIT || (Rejuv && @battle.FE == :ELECTERRAIN)) || @battle.state.effects[:ELECTERRAIN] > 0
-      spatkmult *= 1.5 if attacker.ability == :PLUS && (attacker.pbPartner.ability == :MINUS || @battle.FE == :SHORTCIRCUIT || (Rejuv && @battle.FE == :ELECTERRAIN)) || @battle.state.effects[:ELECTERRAIN] > 0
-      spatkmult *= 1.5 if attacker.ability == :SOLARPOWER && (@battle.pbWeather== :SUNNYDAY && !attacker.hasWorkingItem(:UTILITYUMBRELLA)) &&  @battle.FE != :FROZENDIMENSION
-      spatkmult *= 1.3 if attacker.pbPartner.ability == :BATTERY
-      spatkmult *= 2 if attacker.ability == :PUREPOWER && @battle.FE == :PSYTERRAIN
+      spatkmult *= 1.5 if attacker.hasAbility?(:FLAREBOOST) && (attacker.status== :BURN || @battle.FE == :BURNING || @battle.FE == :VOLCANIC || @battle.FE == :INFERNAL) &&  @battle.FE != :FROZENDIMENSION
+      spatkmult *= 1.5 if attacker.hasAbility?(:MINUS) && (attacker.pbPartner.hasAbility?(:PLUS) || @battle.FE == :SHORTCIRCUIT || (Rejuv && @battle.FE == :ELECTERRAIN)) || @battle.state.effects[:ELECTERRAIN] > 0
+      spatkmult *= 1.5 if attacker.hasAbility?(:PLUS) && (attacker.pbPartner.hasAbility?(:MINUS) || @battle.FE == :SHORTCIRCUIT || (Rejuv && @battle.FE == :ELECTERRAIN)) || @battle.state.effects[:ELECTERRAIN] > 0
+      spatkmult *= 1.5 if attacker.hasAbility?(:SOLARPOWER) && (@battle.pbWeather== :SUNNYDAY && !attacker.hasWorkingItem(:UTILITYUMBRELLA)) &&  @battle.FE != :FROZENDIMENSION
+      spatkmult *= 1.3 if attacker.pbPartner.hasAbility?(:BATTERY)
+      spatkmult *= 2 if attacker.hasAbility?(:PUREPOWER) && @battle.FE == :PSYTERRAIN
     end
     storedspatk*=((stagemul[spatkstage]/stagediv[spatkstage])*spatkmult)
     storedspatk= attacker.getSpecialStat if @battle.FE == :GLITCH && attacker.class == PokeBattle_Battler
@@ -10045,8 +10045,8 @@ class PokeBattle_Move_17D < PokeBattle_Move
       @battle.pbDisplay(_INTL("But it failed!"))
       return -1
     end
-    if (opponent.ability == :MULTITYPE) ||
-      (opponent.ability == :RKSSYSTEM) || (opponent.species == :SILVALLY && opponent.crested)
+    if (opponent.hasAbility?(:MULTITYPE)) ||
+      (opponent.hasAbility?(:RKSSYSTEM)) || (opponent.species == :SILVALLY && opponent.crested)
       @battle.pbDisplay(_INTL("But it failed!"))
       return -1
     end
diff --git a/Battle_Online.rb b/Battle_Online.rb
index 177b2dd..c8abe46 100644
--- a/Battle_Online.rb
+++ b/Battle_Online.rb
@@ -69,13 +69,13 @@ class PokeBattle_OnlineBattle < PokeBattle_Battle
       if @choices[i][0]==1 # Is a move
         pri = @choices[i][2].priority if !@choices[i][2].zmove  #Base move priority
         pri += 1 if @battle.FE == :CHESS && @battlers[i].pokemon && @battlers[i].pokemon.piece == :KING
-        pri += 1 if @battlers[i].ability == :PRANKSTER && @choices[i][2].basedamage==0 # Is status move
-        pri += 1 if @battlers[i].ability == :GALEWINGS && @choices[i][2].type==2 && ((@battlers[i].hp == @battlers[i].totalhp) || ((@battle.FE == :MOUNTAIN || @battle.FE == :SNOWYMOUNTAIN) && @weather == :STRONGWINDS))
-        pri += 3 if @battlers[i].ability == :TRIAGE && (PBStuff::HEALFUNCTIONS).include?(@choices[i][2].function) 
+        pri += 1 if @battlers[i].hasAbility?(:PRANKSTER) && @choices[i][2].basedamage==0 # Is status move
+        pri += 1 if @battlers[i].hasAbility?(:GALEWINGS) && @choices[i][2].type==2 && ((@battlers[i].hp == @battlers[i].totalhp) || ((@battle.FE == :MOUNTAIN || @battle.FE == :SNOWYMOUNTAIN) && @weather == :STRONGWINDS))
+        pri += 3 if @battlers[i].hasAbility?(:TRIAGE) && (PBStuff::HEALFUNCTIONS).include?(@choices[i][2].function) 
       end
       priorityarray[i][0]=pri
       #Item/stall priority (all items overwrite stall priority)
-      priorityarray[i][1] = -1 if @battlers[i].ability == :STALL
+      priorityarray[i][1] = -1 if @battlers[i].hasAbility?(:STALL)
       if !ignorequickclaw
         priorityarray[i][1] = 1 if @battlers[i].custap || (@battlers[i].itemWorks? && @battlers[i].item == :QUICKCLAW && (pbRandom(100)<20))
       end
diff --git a/Battle_ZMoves.rb b/Battle_ZMoves.rb
index 03954e0..0f03b63 100644
--- a/Battle_ZMoves.rb
+++ b/Battle_ZMoves.rb
@@ -153,7 +153,7 @@ class PokeBattle_ZMoves < PokeBattle_Move
       end
     end
     protype=@type
-    if battler.ability == :PROTEAN || battler.ability == :LIBERO
+    if battler.hasAbility?(:PROTEAN) || battler.hasAbility?(:LIBERO)
       prot1 = battler.type1
       prot2 = battler.type2
       if !battler.hasType?(protype) || (defined?(prot2) && prot1 != prot2)
@@ -162,7 +162,7 @@ class PokeBattle_ZMoves < PokeBattle_Move
         @battle.pbDisplay(_INTL("{1} had its type changed to {3}!",battler.pbThis,getAbilityName(battler.ability),protype.capitalize))
       end
     end
-    if battler.ability == :STANCECHANGE
+    if battler.hasAbility?(:STANCECHANGE)
       battler.pbCheckForm(self)
     end
     ###
@@ -470,9 +470,9 @@ class PokeBattle_ZMoves < PokeBattle_Move
     elsif @move == :ACIDDOWNPOUR
       if @battle.FE == :WASTELAND # Wasteland
         if ((!opponent.hasType?(:POISON) && !opponent.hasType?(:STEEL)) || opponent.corroded) &&
-         !(opponent.ability == :TOXICBOOST) &&
-         !(opponent.ability == :POISONHEAL) && !(opponent.species == :ZANGOOSE && opponent.crested)
-         (!(opponent.ability == :IMMUNITY) && !(opponent.moldbroken))
+         !(opponent.hasAbility?(:TOXICBOOST)) &&
+         !(opponent.hasAbility?(:POISONHEAL)) && !(opponent.species == :ZANGOOSE && opponent.crested)
+         (!(opponent.hasAbility?(:IMMUNITY)) && !(opponent.moldbroken))
           rnd=@battle.pbRandom(4)
           case rnd
           when 0
diff --git a/Battler.rb b/Battler.rb
index 7c23fbc..c0541bc 100644
--- a/Battler.rb
+++ b/Battler.rb
@@ -20,6 +20,7 @@ class PokeBattle_Battler
   attr_accessor :type1
   attr_accessor :type2
   attr_accessor :ability
+  attr_accessor :abilities
   attr_accessor :gender
   attr_accessor :attack
   attr_accessor :defense
@@ -128,6 +129,10 @@ class PokeBattle_Battler
     return PBStuff::POKEMONTOCREST[@species]==@item
   end
 
+  def hasAbility?(ability)
+    return @ability == ability || (@abilities || []).include?(ability)
+  end
+
   def crestWorks?(crestmon)
     return false if @species != crestmon
     return hasCrest?
@@ -315,7 +320,7 @@ class PokeBattle_Battler
   end
 
   def item=(value)
-    @unburdened = true if @ability == :UNBURDEN && @item && value.nil?
+    @unburdened = true if self.hasAbility?(:UNBURDEN) && @item && value.nil?
     @item=value
     @pokemon.item=value if @pokemon
   end
@@ -323,8 +328,8 @@ class PokeBattle_Battler
   def weight
     w=(@pokemon) ? @pokemon.weight : 500
     w+=@effects[:WeightModifier]
-    w*=2 if self.ability == :HEAVYMETAL && !(self.moldbroken)
-    w/=2 if self.ability == :LIGHTMETAL && !(self.moldbroken)
+    w*=2 if self.hasAbility?(:HEAVYMETAL) && !(self.moldbroken)
+    w/=2 if self.hasAbility?(:LIGHTMETAL) && !(self.moldbroken)
     w/=2 if self.hasWorkingItem(:FLOATSTONE)
     w=1 if w<1
     return w
@@ -643,7 +648,7 @@ class PokeBattle_Battler
         @battle.battlers[i].effects[:Octolock]=-1
       end
     end
-    if (self.ability == :ILLUSION) 
+    if (self.hasAbility?(:ILLUSION)) 
       party=@battle.pbPartySingleOwner(@index) #new method for splitting teams
       party=party.find_all {|item| item && !item.egg? && item.hp>0 }
       if party[party.length-1] != @pokemon
@@ -680,11 +685,11 @@ class PokeBattle_Battler
 
   def pbInitialize(pkmn,index,batonpass)
     # Cure status of previous Pokemon with Natural Cure
-    if self.ability == :NATURALCURE || (self.ability == :TRACE &&
+    if self.hasAbility?(:NATURALCURE) || (self.hasAbility?(:TRACE) &&
       self.effects[:TracedAbility]==:NATURALCURE) && @pokemon
       self.status=nil
     end
-    if (self.ability == :REGENERATOR || (self.ability == :TRACE &&
+    if (self.hasAbility?(:REGENERATOR) || (self.hasAbility?(:TRACE) &&
       self.effects[:TracedAbility]==:REGENERATOR)) && @pokemon && @hp>0
         self.pbRecoverHP((totalhp/3.0).floor)
     end
@@ -850,7 +855,7 @@ class PokeBattle_Battler
     return false if @item.nil?
     return false if @effects[:Embargo]>0
     return false if @battle.state.effects[:MagicRoom]>0
-    return false if self.ability == :KLUTZ
+    return false if self.hasAbility?(:KLUTZ)
     return false if @pokemon.corrosiveGas
     return true
   end
@@ -860,7 +865,7 @@ class PokeBattle_Battler
     return false if @item.nil?
     return false if @effects[:Embargo]>0
     return false if @battle.state.effects[:MagicRoom]>0
-    return false if self.ability == :KLUTZ
+    return false if self.hasAbility?(:KLUTZ)
     return false if @pokemon.corrosiveGas
     return (@item == item)
   end
@@ -869,10 +874,10 @@ class PokeBattle_Battler
     return false if self.item == :IRONBALL if @battle.FE != :DEEPEARTH
     return false if @effects[:Ingrain]
     return false if @effects[:SmackDown]
-    return true if [:MAGNETPULL,:CONTRARY,:UNAWARE,:OBLIVIOUS].include?(self.ability) && @battle.FE == :DEEPEARTH
+    return true if [:MAGNETPULL,:CONTRARY,:UNAWARE,:OBLIVIOUS].any? { |a| self.hasAbility?(a) } && @battle.FE == :DEEPEARTH
     return false if @battle.state.effects[:Gravity]!=0
     return true if self.hasType?(:FLYING) && @effects[:Roost]==false
-    return true if self.ability == :LEVITATE || self.ability == :SOLARIDOL || self.ability == :LUNARIDOL
+    return true if self.hasAbility?(:LEVITATE) || self.hasAbility?(:SOLARIDOL) || self.hasAbility?(:LUNARIDOL)
     return true if self.hasWorkingItem(:AIRBALLOON)
     return true if @effects[:MagnetRise]>0
     return true if @effects[:Telekinesis]>0
@@ -880,19 +885,19 @@ class PokeBattle_Battler
   end
 
   def nullsElec?
-    return [:VOLTABSORB,:LIGHTNINGROD,:MOTORDRIVE].include?(@ability) || pbPartner.ability == :LIGHTNINGROD
+    return [:VOLTABSORB,:LIGHTNINGROD,:MOTORDRIVE].any? { |a| self.hasAbility?(a) } || pbPartner.hasAbility?(:LIGHTNINGROD)
   end
 
   def nullsWater?
-    return [:WATERABSORB,:STORMDRAIN,:DRYSKIN].include?(@ability) || pbPartner.ability == :STORMDRAIN
+    return [:WATERABSORB,:STORMDRAIN,:DRYSKIN].any? { |a| self.hasAbility?(a) } || pbPartner.hasAbility?(:STORMDRAIN)
   end
 
   def nullsFire?
-    return @ability == :FLASHFIRE
+    return self.hasAbility?(:FLASHFIRE)
   end
 
   def nullsGrass?
-    return @ability == :SAPSIPPER
+    return self.hasAbility?(:SAPSIPPER)
   end
 
   def pbSpeed()
@@ -996,8 +1001,8 @@ class PokeBattle_Battler
       return true
     end
     @battle.scene.pbFainted(self)
-    @battle.neutralizingGasDisable(self.index) if self.ability == :NEUTRALIZINGGAS
-    if (pbPartner.ability == :POWEROFALCHEMY || pbPartner.ability == :RECEIVER) && pbPartner.hp > 0
+    @battle.neutralizingGasDisable(self.index) if self.hasAbility?(:NEUTRALIZINGGAS)
+    if (pbPartner.hasAbility?(:POWEROFALCHEMY) || pbPartner.hasAbility?(:RECEIVER)) && pbPartner.hp > 0
       if PBStuff::ABILITYBLACKLIST.none? {|forbidden_ability| forbidden_ability==@ability}
         oldability = pbPartner.ability
         partnerability=@ability
@@ -1008,7 +1013,7 @@ class PokeBattle_Battler
         else
           @battle.pbDisplay(_INTL("{1} received {2}'s {3}!",pbPartner.pbThis,pbThis,abilityname))
         end
-        if pbPartner.ability == :INTIMIDATE
+        if pbPartner.hasAbility?(:INTIMIDATE)
           for i in @battle.battlers
             next if i.isFainted? || !pbIsOpposing?(i.index)
             i.pbReduceAttackStatStageIntimidate(pbPartner)
@@ -1018,7 +1023,7 @@ class PokeBattle_Battler
     end
     for i in @battle.battlers
       next if i.isFainted?
-      if i.ability == :SOULHEART && !i.pbTooHigh?(PBStats::SPATK)
+      if i.hasAbility?(:SOULHEART) && !i.pbTooHigh?(PBStats::SPATK)
         @battle.pbDisplay(_INTL("{1}'s Soul-heart activated!",i.pbThis))
         i.pbIncreaseStat(PBStats::SPATK,1)
         if (@battle.FE==:MISTY || @battle.FE==:RAINBOW || @battle.FE==:FAIRYTALE) && !i.pbTooHigh?(PBStats::SPDEF)
@@ -1177,7 +1182,7 @@ class PokeBattle_Battler
     transformed=false
     # Forecast
     if (self.pokemon && self.pokemon.species == :CASTFORM)
-      if self.ability == :FORECAST
+      if self.hasAbility?(:FORECAST)
         case @battle.pbWeather
           when :SUNNYDAY
             if !self.hasWorkingItem(:UTILITYUMBRELLA)
@@ -1217,7 +1222,7 @@ class PokeBattle_Battler
     end
     # Cherrim
     if (self.pokemon && self.pokemon.species == :CHERRIM) && !self.isFainted?
-      if (self.ability == :FLOWERGIFT)
+      if (self.hasAbility?(:FLOWERGIFT))
         # Cherrim Crest
         if self.crested || (@battle.pbWeather == :SUNNYDAY && !self.hasWorkingItem(:UTILITYUMBRELLA)) || 
           @battle.ProgressiveFieldCheck(PBFields::FLOWERGARDEN) || @battle.FE == :BEWITCHED
@@ -1256,7 +1261,7 @@ class PokeBattle_Battler
     end
     # Zen Mode
     if (self.pokemon && self.pokemon.species == :DARMANITAN) && !self.isFainted?
-      if (self.ability == :ZENMODE || self.crested)
+      if (self.hasAbility?(:ZENMODE) || self.crested)
         # Darmanitan Crest
         if self.crested && self.form==0
           self.form=1
@@ -1297,7 +1302,7 @@ class PokeBattle_Battler
     # UPDATE 1/18/2014
     # Aegislash
     if (self.pokemon && self.pokemon.species == :AEGISLASH) && !self.isFainted?
-      if (self.ability == :STANCECHANGE && !@effects[:Transform])
+      if (self.hasAbility?(:STANCECHANGE) && !@effects[:Transform])
         # in Shield Forme and used a damaging move
         if self.form == 0 && !basemove.nil? && basemove.basedamage > 0
           self.form = 1 ; transformed = true
@@ -1342,7 +1347,7 @@ class PokeBattle_Battler
       @battle.scene.pbChangePokemon(self,@pokemon)
       @battle.pbDisplay(_INTL("{1} transformed!",pbThis))
 
-      if (self.ability == :STANCECHANGE) && (@battle.FE == :FAIRYTALE || (Rejuv && @battle.FE == :CHESS)) 
+      if (self.hasAbility?(:STANCECHANGE)) && (@battle.FE == :FAIRYTALE || (Rejuv && @battle.FE == :CHESS)) 
         if self.form == 0
           self.pbReduceStat(PBStats::ATTACK,1,abilitymessage:false)
           self.pbIncreaseStat(PBStats::DEFENSE,1,abilitymessage:false)
@@ -1357,7 +1362,7 @@ class PokeBattle_Battler
   def pbCheckFormRoundEnd
     # Wishiwashi
     if (self.species == :WISHIWASHI) && !self.isFainted?
-      if self.ability == :SCHOOLING && !@effects[:Transform]
+      if self.hasAbility?(:SCHOOLING) && !@effects[:Transform]
         schoolHP = (self.totalhp/4.0).floor
         if (self.hp>schoolHP && self.level>19) || [:WATERSURFACE,:UNDERWATER,:MURKWATERSURFACE].include?(@battle.FE)
           if self.form!=1
@@ -1379,7 +1384,7 @@ class PokeBattle_Battler
     end
     # Minior
     if (self.species == :MINIOR) && !self.isFainted?
-      if self.ability == :SHIELDSDOWN && !@effects[:Transform]
+      if self.hasAbility?(:SHIELDSDOWN) && !@effects[:Transform]
         coreHP = (self.totalhp/2.0).floor
         if self.hp>coreHP
           if self.form!=7
@@ -1408,7 +1413,7 @@ class PokeBattle_Battler
       self.effects[:IceFace]=false
     end  
     # Download mons on Dimensional
-    if @battle.field.effect == :DIMENSIONAL && self.ability == :DOWNLOAD
+    if @battle.field.effect == :DIMENSIONAL && self.hasAbility?(:DOWNLOAD)
       type = @battle.getRandomType 
       self.type1=type
       self.type2=nil
@@ -1416,7 +1421,7 @@ class PokeBattle_Battler
     end
     # Zygarde
     if (self.pokemon && self.pokemon.species == :ZYGARDE) && !self.isFainted? && !self.effects[:Transform]
-      if self.ability == :POWERCONSTRUCT
+      if self.hasAbility?(:POWERCONSTRUCT)
         completeHP = (self.totalhp/2.0).floor
         if self.hp<=completeHP
           if self.form!=2
@@ -1445,8 +1450,8 @@ class PokeBattle_Battler
       end
     end
     # Silvally / Arceus
-    if (((self.ability == :RKSSYSTEM || self.crested) && self.species == :SILVALLY) ||
-      (self.ability == :MULTITYPE && self.species == :ARCEUS)) && !self.isFainted?
+    if (((self.hasAbility?(:RKSSYSTEM) || self.crested) && self.species == :SILVALLY) ||
+      (self.hasAbility?(:MULTITYPE) && self.species == :ARCEUS)) && !self.isFainted?
       oldform = self.form
       if @battle.field.effect == :NEWWORLD
         @battle.NWTypeRoll(self) 
@@ -1603,7 +1608,7 @@ class PokeBattle_Battler
       end
     end
     #### NEUTRALIZING GAS
-    if self.ability == :NEUTRALIZINGGAS && onactive
+    if self.hasAbility?(:NEUTRALIZINGGAS) && onactive
       for i in 0...4
         @battle.battlers[i].ability = nil if !(PBStuff::FIXEDABILITIES).include?(@battle.battlers[i].ability) && @battle.battlers[i].ability != :NEUTRALIZINGGAS
       end
@@ -1611,7 +1616,7 @@ class PokeBattle_Battler
     #### START OF WEATHER ABILITIES
     rainbowhold=0
     if onactive
-      if (self.ability == :PRIMORDIALSEA) && !@battle.state.effects[:HeavyRain] && @battle.canSetWeather?
+      if (self.hasAbility?(:PRIMORDIALSEA)) && !@battle.state.effects[:HeavyRain] && @battle.canSetWeather?
         @battle.state.effects[:HeavyRain] = true
         @battle.state.effects[:HarshSunlight] = false
         @battle.weatherduration=-1
@@ -1624,7 +1629,7 @@ class PokeBattle_Battler
         @battle.pbCommonAnimation("Rain",nil,nil)
       end
 
-      if (self.ability == :DESOLATELAND) && !@battle.state.effects[:HarshSunlight] && @battle.canSetWeather?
+      if (self.hasAbility?(:DESOLATELAND)) && !@battle.state.effects[:HarshSunlight] && @battle.canSetWeather?
         @battle.state.effects[:HarshSunlight] = true
         @battle.state.effects[:HeavyRain] = false
         @battle.weatherduration=-1
@@ -1641,7 +1646,7 @@ class PokeBattle_Battler
         @battle.pbCommonAnimation("Sunny",nil,nil)
       end
 
-      if (self.ability == :DELTASTREAM) && @battle.weather!=:STRONGWINDS && @battle.canSetWeather?
+      if (self.hasAbility?(:DELTASTREAM)) && @battle.weather!=:STRONGWINDS && @battle.canSetWeather?
         @battle.weather=:STRONGWINDS
         @battle.state.effects[:HarshSunlight] = false
         @battle.state.effects[:HeavyRain] = false
@@ -1655,7 +1660,7 @@ class PokeBattle_Battler
         if @battle.state.effects[:HeavyRain]
           @battle.pbDisplay(_INTL("The heavy rain has lifted."))
           @battle.state.effects[:HeavyRain] = false
-          unless ((self.ability == :PRIMORDIALSEA) || (self.ability == :DESOLATELAND) || (self.ability == :DELTASTREAM)) && onactive
+          unless ((self.hasAbility?(:PRIMORDIALSEA)) || (self.hasAbility?(:DESOLATELAND)) || (self.hasAbility?(:DELTASTREAM))) && onactive
             @battle.weatherduration = 0
             @battle.weather = 0
           end
@@ -1665,7 +1670,7 @@ class PokeBattle_Battler
         if @battle.state.effects[:HarshSunlight]
           @battle.pbDisplay(_INTL("The harsh sunlight faded!"))
           @battle.state.effects[:HarshSunlight] = false
-          unless ((self.ability == :PRIMORDIALSEA) || (self.ability == :DESOLATELAND) || (self.ability == :DELTASTREAM)) && onactive
+          unless ((self.hasAbility?(:PRIMORDIALSEA)) || (self.hasAbility?(:DESOLATELAND)) || (self.hasAbility?(:DELTASTREAM))) && onactive
             @battle.weatherduration = 0
             @battle.weather = 0
           end
@@ -1675,7 +1680,7 @@ class PokeBattle_Battler
       if !@battle.pbCheckGlobalAbility(:DELTASTREAM) && !@battle.pbCheckGlobalAbility(:TEMPEST) && $game_screen.weather_type != 6 && self.pbOwnSide.effects[:Tailwind]<=0 && self.pbOpposingSide.effects[:Tailwind]<=0
         if @battle.weather == :STRONGWINDS
           @battle.pbDisplay(_INTL("The mysterious air current has dissipated!"))
-          unless ((self.ability == :PRIMORDIALSEA) || (self.ability == :DESOLATELAND) || (self.ability == :DELTASTREAM)) && onactive
+          unless ((self.hasAbility?(:PRIMORDIALSEA)) || (self.hasAbility?(:DESOLATELAND)) || (self.hasAbility?(:DELTASTREAM))) && onactive
             @battle.weatherduration = 0
             @battle.weather = 0
           end
@@ -1691,7 +1696,7 @@ class PokeBattle_Battler
       end
     end
     # Trace
-    if self.ability == :TRACE
+    if self.hasAbility?(:TRACE)
       @effects[:TracedAbility]=0
       if @effects[:Trace] || onactive
         choices=[]
@@ -1699,7 +1704,7 @@ class PokeBattle_Battler
           if pbIsOpposing?(i) && !@battle.battlers[i].isFainted?
             abilitycheck = true
             abilitycheck = false if (PBStuff::ABILITYBLACKLIST).include?(@battle.battlers[i].ability) || @battle.battlers[i].ability==0
-            abilitycheck = true if @battle.battlers[i].ability == :WONDERGUARD
+            abilitycheck = true if @battle.battlers[i].hasAbility?(:WONDERGUARD)
             choices.push(i) if abilitycheck
           end
         end
@@ -1720,19 +1725,19 @@ class PokeBattle_Battler
     #Surges
     duration=5
     duration=8 if self.hasWorkingItem(:AMPLIFIELDROCK)
-    if self.ability == :ELECTRICSURGE && onactive && @battle.canChangeFE?(:ELECTERRAIN) && !(@battle.state.effects[:ELECTERRAIN] > 0)
+    if self.hasAbility?(:ELECTRICSURGE) && onactive && @battle.canChangeFE?(:ELECTERRAIN) && !(@battle.state.effects[:ELECTERRAIN] > 0)
       @battle.setField(:ELECTERRAIN,duration)
       @battle.pbDisplay(_INTL("The terrain became electrified!"))
-    elsif self.ability == :GRASSYSURGE && onactive && @battle.canChangeFE?(:GRASSY) && !(@battle.state.effects[:GRASSY] > 0)
+    elsif self.hasAbility?(:GRASSYSURGE) && onactive && @battle.canChangeFE?(:GRASSY) && !(@battle.state.effects[:GRASSY] > 0)
       @battle.setField(:GRASSY,duration) 
       @battle.pbDisplay(_INTL("The terrain became grassy!"))
-    elsif self.ability == :MISTYSURGE && onactive && ((!Rejuv && @battle.canChangeFE?(:MISTY)) || @battle.canChangeFE?([:MISTY,:CORROSIVEMIST])) && !(@battle.state.effects[:MISTY] > 0)
+    elsif self.hasAbility?(:MISTYSURGE) && onactive && ((!Rejuv && @battle.canChangeFE?(:MISTY)) || @battle.canChangeFE?([:MISTY,:CORROSIVEMIST])) && !(@battle.state.effects[:MISTY] > 0)
       @battle.setField(:MISTY,duration)
       @battle.pbDisplay(_INTL("The terrain became misty!"))
-    elsif self.ability == :PSYCHICSURGE && onactive && @battle.canChangeFE?(:PSYTERRAIN) && !(@battle.state.effects[:PSYTERRAIN] > 0)
+    elsif self.hasAbility?(:PSYCHICSURGE) && onactive && @battle.canChangeFE?(:PSYTERRAIN) && !(@battle.state.effects[:PSYTERRAIN] > 0)
       @battle.setField(:PSYTERRAIN,duration)
       @battle.pbDisplay(_INTL("The terrain became mysterious!"))
-    elsif self.ability == :DARKSURGE && onactive 
+    elsif self.hasAbility?(:DARKSURGE) && onactive 
       if @battle.FE== :DARKNESS3
         self.pbIncreaseStatBasic(PBStats::SPEED,1)
         @battle.pbCommonAnimation("StatUp",self,nil)
@@ -1770,8 +1775,8 @@ class PokeBattle_Battler
         @battle.pbDisplay(_INTL("There's no relief from this heavy rain!"))
       elsif @battle.state.effects[:HarshSunlight]
         @battle.pbDisplay(_INTL("The extremely harsh sunlight was not lessened at all!"))
-      elsif @battle.weather== :STRONGWINDS && (@battle.battlers[0].ability == :DELTASTREAM || @battle.battlers[1].ability == :DELTASTREAM ||
-        @battle.battlers[2].ability == :DELTASTREAM || @battle.battlers[3].ability == :DELTASTREAM)
+      elsif @battle.weather== :STRONGWINDS && (@battle.battlers[0].hasAbility?(:DELTASTREAM) || @battle.battlers[1].hasAbility?(:DELTASTREAM) ||
+        @battle.battlers[2].hasAbility?(:DELTASTREAM) || @battle.battlers[3].hasAbility?(:DELTASTREAM))
         @battle.pbDisplay(_INTL("The mysterious air current blows on regardless!"))
       elsif @battle.FE == :NEWWORLD
         @battle.pbDisplay(_INTL("The weather disappeared into space!"))
@@ -1823,8 +1828,8 @@ class PokeBattle_Battler
         @battle.pbDisplay(_INTL("There's no relief from this heavy rain!"))
       elsif @battle.state.effects[:HarshSunlight]
         @battle.pbDisplay(_INTL("The extremely harsh sunlight was not lessened at all!"))
-      elsif @battle.weather== :STRONGWINDS && (@battle.battlers[0].ability == :DELTASTREAM || @battle.battlers[1].ability == :DELTASTREAM ||
-        @battle.battlers[2].ability == :DELTASTREAM || @battle.battlers[3].ability == :DELTASTREAM)
+      elsif @battle.weather== :STRONGWINDS && (@battle.battlers[0].hasAbility?(:DELTASTREAM) || @battle.battlers[1].hasAbility?(:DELTASTREAM) ||
+        @battle.battlers[2].hasAbility?(:DELTASTREAM) || @battle.battlers[3].hasAbility?(:DELTASTREAM))
         @battle.pbDisplay(_INTL("The mysterious air current blows on regardless!"))
       elsif @battle.FE == :NEWWORLD
         @battle.pbDisplay(_INTL("The weather disappeared into space!"))
@@ -1857,8 +1862,8 @@ class PokeBattle_Battler
         @battle.pbDisplay(_INTL("There's no relief from this heavy rain!"))
       elsif @battle.state.effects[:HarshSunlight]
         @battle.pbDisplay(_INTL("The extremely harsh sunlight was not lessened at all!"))
-      elsif @battle.weather== :STRONGWINDS && (@battle.battlers[0].ability == :DELTASTREAM || @battle.battlers[1].ability == :DELTASTREAM ||
-        @battle.battlers[2].ability == :DELTASTREAM || @battle.battlers[3].ability == :DELTASTREAM)
+      elsif @battle.weather== :STRONGWINDS && (@battle.battlers[0].hasAbility?(:DELTASTREAM) || @battle.battlers[1].hasAbility?(:DELTASTREAM) ||
+        @battle.battlers[2].hasAbility?(:DELTASTREAM) || @battle.battlers[3].hasAbility?(:DELTASTREAM))
         @battle.pbDisplay(_INTL("The mysterious air current blows on regardless!"))
       elsif @battle.FE == :NEWWORLD
         @battle.pbDisplay(_INTL("The weather disappeared into space!"))
@@ -1949,7 +1954,7 @@ class PokeBattle_Battler
     end
     # End of Update
     # Reflector - rejuv
-    if self.ability == :REFLECTOR && onactive
+    if self.hasAbility?(:REFLECTOR) && onactive
       reflecttype= defined?(pbOppositeOpposing.type2) ? pbOppositeOpposing.type2 : pbOppositeOpposing.type1
       prot1 = self.type1
       if reflecttype && (!self.hasType?(reflecttype) || (defined?(reflecttype) && prot1 != reflecttype))
@@ -1958,7 +1963,7 @@ class PokeBattle_Battler
       end
     end
     # Mimicry
-    if self.ability == :MIMICRY && onactive
+    if self.hasAbility?(:MIMICRY) && onactive
       protype = -1
       case @battle.FE
         when :CRYSTALCAVERN
@@ -1977,14 +1982,14 @@ class PokeBattle_Battler
         @battle.pbDisplay(_INTL("{1} had its type changed to {2}!",pbThis,camotype.capitalize))
       end
     end
-    if self.ability == :ICEFACE && self.form == 1 && self.species == :EISCUE && onactive
+    if self.hasAbility?(:ICEFACE) && self.form == 1 && self.species == :EISCUE && onactive
       if @battle.weather == :HAIL
         self.pbRegenFace
         @battle.pbDisplay(_INTL("{1} transformed!",self.pbThis))
       end
     end
     # Pastel Veil
-    if (self.ability == :PASTELVEIL && @battle.FE != :INFERNAL) && onactive
+    if (self.hasAbility?(:PASTELVEIL) && @battle.FE != :INFERNAL) && onactive
       if self.pbPartner.status == :POISON
         self.pbPartner.status=nil
         self.pbPartner.statusCount=0
@@ -1992,14 +1997,14 @@ class PokeBattle_Battler
       end
     end
     # Intimidate
-    if self.ability == :INTIMIDATE && onactive
+    if self.hasAbility?(:INTIMIDATE) && onactive
       for i in 0...4
         next if !pbIsOpposing?(i) || @battle.battlers[i].isFainted?
         @battle.battlers[i].pbReduceAttackStatStageIntimidate(self)
       end
     end
     # Download
-    if self.ability == :DOWNLOAD && onactive
+    if self.hasAbility?(:DOWNLOAD) && onactive
       if (Rejuv && (@battle.FE == :SHORTCIRCUIT || @battle.FE == :GLITCH))
         if !(pbTooHigh?(PBStats::ATTACK) && pbTooHigh?(PBStats::SPATK))
           for stat in [PBStats::ATTACK,PBStats::SPATK]
@@ -2050,7 +2055,7 @@ class PokeBattle_Battler
       end
     end
     # Screen Cleaner
-    if self.ability == :SCREENCLEANER && onactive
+    if self.hasAbility?(:SCREENCLEANER) && onactive
       pbOwnSide.effects[:Reflect]     = 0
       pbOwnSide.effects[:LightScreen] = 0
       pbOwnSide.effects[:AuroraVeil]  = 0
@@ -2063,32 +2068,32 @@ class PokeBattle_Battler
       @battle.pbDisplay(_INTL("The effects of protective barriers disappeared."))
     end
     # Dauntless Shield
-    if self.ability == :DAUNTLESSSHIELD && onactive
+    if self.hasAbility?(:DAUNTLESSSHIELD) && onactive
       if !pbTooHigh?(PBStats::DEFENSE)
         pbIncreaseStatBasic(PBStats::DEFENSE,1)
         @battle.pbDisplay(_INTL("{1}'s {2} boosted its Defense!", pbThis,getAbilityName(ability)))
       end
     end
     # Intrepid Sword
-    if self.ability == :INTREPIDSWORD && onactive
+    if self.hasAbility?(:INTREPIDSWORD) && onactive
       if !pbTooHigh?(PBStats::ATTACK)
         pbIncreaseStatBasic(PBStats::ATTACK,1)
         @battle.pbDisplay(_INTL("{1}'s {2} boosted its Attack!", pbThis,getAbilityName(ability)))
       end
     end
     # Slow Start
-    if self.ability == :SLOWSTART && onactive && !@battle.FE == :DEEPEARTH
+    if self.hasAbility?(:SLOWSTART) && onactive && !@battle.FE == :DEEPEARTH
       @battle.pbDisplay(_INTL("{1} can't get it going!",pbThis))
     end
     if (Rejuv && @battle.FE == :ELECTERRAIN)
-      if self.ability == :LIGHTNINGROD && onactive
+      if self.hasAbility?(:LIGHTNINGROD) && onactive
         if !pbTooHigh?(PBStats::SPATK)
           pbIncreaseStatBasic(PBStats::SPATK,1)
           @battle.pbCommonAnimation("StatUp",self,nil)
           @battle.pbDisplay(_INTL("{1}'s Lightning Rod boosted its special attack!", pbThis))
         end
       end
-      if self.ability == :STEADFAST && onactive
+      if self.hasAbility?(:STEADFAST) && onactive
         if !pbTooHigh?(PBStats::SPEED)
           pbIncreaseStatBasic(PBStats::SPEED,1)
           @battle.pbCommonAnimation("StatUp",self,nil)
@@ -2104,7 +2109,7 @@ class PokeBattle_Battler
       end
     end
     if @battle.state.effects[:ELECTERRAIN] > 0
-      if self.ability == :STEADFAST && onactive
+      if self.hasAbility?(:STEADFAST) && onactive
         if !pbTooHigh?(PBStats::SPEED)
           pbIncreaseStatBasic(PBStats::SPEED,1)
           @battle.pbCommonAnimation("StatUp",self,nil)
@@ -2114,19 +2119,19 @@ class PokeBattle_Battler
     end
     if Rejuv && @battle.FE == :CHESS
       if !pbTooHigh?(PBStats::DEFENSE)
-        if self.ability == :STALL && onactive
+        if self.hasAbility?(:STALL) && onactive
           pbIncreaseStatBasic(PBStats::DEFENSE,1)
           @battle.pbCommonAnimation("StatUp",self,nil)
           @battle.pbDisplay(_INTL("{1} is stalling and playing defensively!",pbThis,getAbilityName(ability)))
         end
-        if (self.ability == :STANCECHANGE) && onactive
+        if (self.hasAbility?(:STANCECHANGE)) && onactive
           pbIncreaseStatBasic(PBStats::DEFENSE,1)
         end
       end
     end
     # Volcanic Field Entry
     if @battle.FE == :VOLCANIC
-      if self.ability == :MAGMAARMOR && onactive
+      if self.hasAbility?(:MAGMAARMOR) && onactive
         if !pbTooHigh?(PBStats::DEFENSE)
           pbIncreaseStatBasic(PBStats::DEFENSE,1)
           @battle.pbCommonAnimation("StatUp",self,nil)
@@ -2137,11 +2142,11 @@ class PokeBattle_Battler
     # Mirror Field Entry
     if @battle.FE == :MIRROR
       if !pbTooHigh?(PBStats::EVASION)
-        if (self.ability == :SNOWCLOAK || self.ability == :SANDVEIL || self.ability == :TANGLEDFEET || self.ability == :MAGICBOUNCE || self.ability == :COLORCHANGE) && onactive
+        if (self.hasAbility?(:SNOWCLOAK) || self.hasAbility?(:SANDVEIL) || self.hasAbility?(:TANGLEDFEET) || self.hasAbility?(:MAGICBOUNCE) || self.hasAbility?(:COLORCHANGE)) && onactive
           pbIncreaseStatBasic(PBStats::EVASION,1)
           @battle.pbCommonAnimation("StatUp",self,nil)
           @battle.pbDisplay(_INTL("{1}'s {2} boosted its Evasion!", pbThis,getAbilityName(ability)))
-        elsif self.ability == :ILLUSION && onactive
+        elsif self.hasAbility?(:ILLUSION) && onactive
           pbIncreaseStatBasic(PBStats::EVASION,2)
           @battle.pbCommonAnimation("StatUp",self,nil)
           @battle.pbDisplay(_INTL("{1}'s ability sharply boosted its Evasion!", pbThis,getAbilityName(ability)))
@@ -2153,11 +2158,11 @@ class PokeBattle_Battler
         end 
       end
       # Keen Eye / Compound Eye
-      if (self.ability == :KEENEYE || self.ability == :COMPOUNDEYES || self.hasWorkingItem(:ZOOMLENS) || self.hasWorkingItem(:WIDELENS)) && onactive
+      if (self.hasAbility?(:KEENEYE) || self.hasAbility?(:COMPOUNDEYES) || self.hasWorkingItem(:ZOOMLENS) || self.hasWorkingItem(:WIDELENS)) && onactive
         if !pbTooHigh?(PBStats::ACCURACY)
           pbIncreaseStatBasic(PBStats::ACCURACY,1)
           @battle.pbCommonAnimation("StatUp",self,nil)
-          if self.ability == :KEENEYE || self.ability == :COMPOUNDEYES
+          if self.hasAbility?(:KEENEYE) || self.hasAbility?(:COMPOUNDEYES)
             @battle.pbDisplay(_INTL("{1}'s {2} boosted its Accuracy!", pbThis,getAbilityName(self.ability)))
           else
             @battle.pbDisplay(_INTL("{1}'s {2} boosted its Accuracy!", pbThis,getItemName(self.item)))
@@ -2167,7 +2172,7 @@ class PokeBattle_Battler
         @battle.pbDisplay(_INTL("{1} is focused!",pbThis))
       end
       # Illuminate
-      if self.ability == :ILLUMINATE && onactive
+      if self.hasAbility?(:ILLUMINATE) && onactive
         for i in 0...4
           if pbIsOpposing?(i) && !@battle.battlers[i].isFainted?
             @battle.battlers[i].pbReduceIlluminate(self)
@@ -2179,28 +2184,28 @@ class PokeBattle_Battler
     # Fairy Tale Field Entry
     if @battle.FE == :FAIRYTALE
       if !pbTooHigh?(PBStats::DEFENSE)
-        if [:BATTLEARMOR, :SHELLARMOR, :POWEROFALCHEMY].include?(self.ability) && onactive
+        if [:BATTLEARMOR, :SHELLARMOR, :POWEROFALCHEMY].any? { |a| self.hasAbility?(a) } && onactive
           pbIncreaseStatBasic(PBStats::DEFENSE,1)
           @battle.pbCommonAnimation("StatUp",self,nil)
           @battle.pbDisplay(_INTL("{1}'s shining armor boosted its Defense!",
            pbThis,getAbilityName(ability)))
         end
-        if (self.ability == :STANCECHANGE) && onactive
+        if (self.hasAbility?(:STANCECHANGE)) && onactive
           pbIncreaseStatBasic(PBStats::DEFENSE,1)
         end
       end
-      if [:MAGICGUARD, :MAGICBOUNCE, :POWEROFALCHEMY, :MIRRORARMOR, :PASTELVEIL].include?(self.ability) && onactive
+      if [:MAGICGUARD, :MAGICBOUNCE, :POWEROFALCHEMY, :MIRRORARMOR, :PASTELVEIL].any? { |a| self.hasAbility?(a) } && onactive
         if !pbTooHigh?(PBStats::SPDEF)
           pbIncreaseStatBasic(PBStats::SPDEF,1)
           @battle.pbCommonAnimation("StatUp",self,nil)
-          if self.ability == :MIRRORARMOR
+          if self.hasAbility?(:MIRRORARMOR)
             @battle.pbDisplay(_INTL("{1}'s reflective armor boosted its Special Defense!",pbThis))
           else
             @battle.pbDisplay(_INTL("{1}'s magical power boosted its Special Defense!",pbThis))
           end
         end
       end
-      if (self.ability == :MAGICIAN) && onactive
+      if (self.hasAbility?(:MAGICIAN)) && onactive
         if !pbTooHigh?(PBStats::SPATK)
           pbIncreaseStatBasic(PBStats::SPATK,1)
           @battle.pbCommonAnimation("StatUp",self,nil)
@@ -2208,7 +2213,7 @@ class PokeBattle_Battler
            pbThis,getAbilityName(ability)))
         end
       end
-      if (self.ability == :INTREPIDSWORD) && onactive
+      if (self.hasAbility?(:INTREPIDSWORD)) && onactive
         statraise = false
         for stat in [PBStats::ATTACK,PBStats::SPATK]
           if !pbTooHigh?(stat)
@@ -2221,7 +2226,7 @@ class PokeBattle_Battler
           @battle.pbDisplay(_INTL("The fairy king's sword empowered {1}!",pbThis,))
         end
       end
-      if (self.ability == :DAUNTLESSSHIELD) && onactive
+      if (self.hasAbility?(:DAUNTLESSSHIELD)) && onactive
         statraise = false
         for stat in [PBStats::DEFENSE,PBStats::SPDEF]
           if !pbTooHigh?(stat)
@@ -2237,7 +2242,7 @@ class PokeBattle_Battler
     end
     # Dragon's Den Entry
     if @battle.FE == :DRAGONSDEN
-      if self.ability == :MAGMAARMOR && onactive
+      if self.hasAbility?(:MAGMAARMOR) && onactive
         statraise = false
         for stat in [PBStats::DEFENSE,PBStats::SPDEF]
           if !pbTooHigh?(stat)
@@ -2250,7 +2255,7 @@ class PokeBattle_Battler
           @battle.pbDisplay(_INTL("{1}'s Magma Armor boosted its defenses!",pbThis))
         end
       end
-      if Rejuv && (self.ability == :SHELLARMOR) && onactive
+      if Rejuv && (self.hasAbility?(:SHELLARMOR)) && onactive
         if !pbTooHigh?(PBStats::DEFENSE)
           pbIncreaseStatBasic(PBStats::DEFENSE,1)
           @battle.pbCommonAnimation("StatUp",self,nil)
@@ -2265,14 +2270,14 @@ class PokeBattle_Battler
     end
     # Starlight Arena Entry
     if @battle.FE == :STARLIGHT
-      if (self.ability == :ILLUMINATE) && onactive
+      if (self.hasAbility?(:ILLUMINATE)) && onactive
         if !pbTooHigh?(PBStats::SPATK)
           pbIncreaseStatBasic(PBStats::SPATK,2)
           @battle.pbCommonAnimation("StatUp",self,nil)
           @battle.pbDisplay(_INTL("{1}'s {2} flared up with starlight!",
            pbThis,getAbilityName(ability)))
         end
-        if self.pbPartner.ability == :MIRRORARMOR 
+        if self.pbPartner.hasAbility?(:MIRRORARMOR) 
           self.pbPartner.effects[:FollowMe] = true
           @battle.pbAnimation(:SPOTLIGHT,self,self.pbPartner)
           @battle.pbDisplay(_INTL("{1}'s dazzling shine put a spotlight on its partner!",pbThis))
@@ -2281,7 +2286,7 @@ class PokeBattle_Battler
     end
     # Psychic Terrain Entry
     if @battle.FE == :PSYTERRAIN || @battle.state.effects[:PSYTERRAIN] > 0
-      if (self.ability == :ANTICIPATION) && onactive
+      if (self.hasAbility?(:ANTICIPATION)) && onactive
         if !pbTooHigh?(PBStats::SPATK)
           pbIncreaseStatBasic(PBStats::SPATK,2)
           @battle.pbCommonAnimation("StatUp",self,nil)
@@ -2292,7 +2297,7 @@ class PokeBattle_Battler
     end
     # Misty Terrain + Corrosive Mist Entry
     if @battle.FE == :MISTY || @battle.FE == :CORROSIVEMIST || @battle.state.effects[:MISTY] > 0
-      if (self.ability == :WATERCOMPACTION) && onactive
+      if (self.hasAbility?(:WATERCOMPACTION)) && onactive
         if !pbTooHigh?(PBStats::DEFENSE)
           pbIncreaseStatBasic(PBStats::DEFENSE,2)
           @battle.pbCommonAnimation("StatUp",self,nil)
@@ -2302,55 +2307,55 @@ class PokeBattle_Battler
     end
     # Rejuv Dimensional field entry
     if @battle.FE == :DIMENSIONAL || @battle.FE == :FROZENDIMENSION
-      if (self.ability == :RATTLED) && onactive
+      if (self.hasAbility?(:RATTLED)) && onactive
         if !pbTooHigh?(PBStats::SPEED)
           pbIncreaseStatBasic(PBStats::SPEED,1)
           @battle.pbCommonAnimation("StatUp",self,nil)
           @battle.pbDisplay(_INTL("{1}'s Rattled raised its speed!",pbThis))
         end
       end
-      if (self.ability == :BERSERK) && onactive
+      if (self.hasAbility?(:BERSERK)) && onactive
         if !pbTooHigh?(PBStats::SPATK)
           pbIncreaseStatBasic(PBStats::SPATK,1)
           @battle.pbCommonAnimation("StatUp",self,nil)
           @battle.pbDisplay(_INTL("{1}'s Anger raised its Special Attack!",pbThis))
         end
       end
-      if ((self.ability == :JUSTIFIED) || (self.ability == :ANGERPOINT))  && onactive
+      if ((self.hasAbility?(:JUSTIFIED)) || (self.hasAbility?(:ANGERPOINT)))  && onactive
         if !pbTooHigh?(PBStats::ATTACK)
           pbIncreaseStatBasic(PBStats::ATTACK,1)
           @battle.pbCommonAnimation("StatUp",self,nil)
           @battle.pbDisplay(_INTL("{1}'s Anger raised its Attack!",pbThis))
         end
       end
-      if self.ability == :PRESSURE && onactive
+      if self.hasAbility?(:PRESSURE) && onactive
         for i in 0...4
           next if !pbIsOpposing?(i) || @battle.battlers[i].isFainted?
           @battle.battlers[i].pbReduceStat(PBStats::DEFENSE,1)
           @battle.battlers[i].pbReduceStat(PBStats::SPDEF,1)
         end
       end
-      if self.ability == :UNNERVE && onactive
+      if self.hasAbility?(:UNNERVE) && onactive
         for i in 0...4
           next if !pbIsOpposing?(i) || @battle.battlers[i].isFainted?
           @battle.battlers[i].pbReduceStat(PBStats::SPEED,1)
         end
       end
-      if @battle.FE == :FROZENDIMENSION && (self.ability == :HUNGERSWITCH && self.species == :MORPEKO && self.form==0) && onactive
+      if @battle.FE == :FROZENDIMENSION && (self.hasAbility?(:HUNGERSWITCH) && self.species == :MORPEKO && self.form==0) && onactive
         self.form = 1
         pbUpdate(true)
         @battle.scene.pbChangePokemon(self,@pokemon)
       end
     end
     if @battle.FE == :HAUNTED
-      if (self.ability == :RATTLED) && onactive
+      if (self.hasAbility?(:RATTLED)) && onactive
         if !pbTooHigh?(PBStats::SPEED)
           pbIncreaseStatBasic(PBStats::SPEED,1)
           @battle.pbCommonAnimation("StatUp",self,nil)
           @battle.pbDisplay(_INTL("{1}'s Rattled raised its speed!",pbThis))
         end
       end
-      if self.ability == :SHADOWTAG && @battle.pbOwnedByPlayer?(@index) && onactive
+      if self.hasAbility?(:SHADOWTAG) && @battle.pbOwnedByPlayer?(@index) && onactive
         items=[]
         items.push(pbOpposing1) if pbOpposing1.item && !pbOpposing1.isFainted?
         items.push(pbOpposing2) if pbOpposing2.item && !pbOpposing2.isFainted?
@@ -2362,7 +2367,7 @@ class PokeBattle_Battler
     end
     # Rejuv sky field entry
     if @battle.FE == :SKY
-      if (self.ability == :BIGPECKS) && onactive
+      if (self.hasAbility?(:BIGPECKS)) && onactive
         if !pbTooHigh?(PBStats::DEFENSE)
           pbIncreaseStatBasic(PBStats::DEFENSE,1)
           @battle.pbCommonAnimation("StatUp",self,nil)
@@ -2370,7 +2375,7 @@ class PokeBattle_Battler
               pbThis,getAbilityName(ability)))
         end     
       end
-      if (self.ability == :LEVITATE || self.ability == :SOLARIDOL || self.ability == :LUNARIDOL) && onactive
+      if (self.hasAbility?(:LEVITATE) || self.hasAbility?(:SOLARIDOL) || self.hasAbility?(:LUNARIDOL)) && onactive
         if !pbTooHigh?(PBStats::SPEED)
           pbIncreaseStatBasic(PBStats::SPEED,1)
           @battle.pbCommonAnimation("StatUp",self,nil)
@@ -2378,7 +2383,7 @@ class PokeBattle_Battler
               pbThis,getAbilityName(ability)))
         end
       end
-      if self.ability == :CLOUDNINE && @battle.weather!=0
+      if self.hasAbility?(:CLOUDNINE) && @battle.weather!=0
         @battle.weather = 0
         @battle.pbDisplay(_INTL("{1}'s {2} removed all weather effects!",
             pbThis,getAbilityName(ability)))
@@ -2386,28 +2391,28 @@ class PokeBattle_Battler
     end
     # Colosseum Field Entry  
     if @battle.FE == :COLOSSEUM 
-      if (self.ability == :DAUNTLESSSHIELD || self.ability == :BATTLEARMOR || self.ability == :SHELLARMOR) && onactive
+      if (self.hasAbility?(:DAUNTLESSSHIELD) || self.hasAbility?(:BATTLEARMOR) || self.hasAbility?(:SHELLARMOR)) && onactive
         if !pbTooHigh?(PBStats::DEFENSE) 
           pbIncreaseStatBasic(PBStats::DEFENSE,1)  
           @battle.pbCommonAnimation("StatUp",self,nil)  
           @battle.pbDisplay(_INTL("{1}'s shining armor boosted its Defense!",pbThis))  
         end       
       end  
-      if (self.ability == :DAUNTLESSSHIELD || self.ability == :MIRRORARMOR || self.ability == :MAGICGUARD) && onactive 
+      if (self.hasAbility?(:DAUNTLESSSHIELD) || self.hasAbility?(:MIRRORARMOR) || self.hasAbility?(:MAGICGUARD)) && onactive 
         if !pbTooHigh?(PBStats::SPDEF) 
           pbIncreaseStatBasic(PBStats::SPDEF,1)  
           @battle.pbCommonAnimation("StatUp",self,nil)  
           @battle.pbDisplay(_INTL("{1}'s magical power boosted its Special Defense!",pbThis))  
         end       
       end  
-      if (self.ability == :INTREPIDSWORD || self.ability == :NOGUARD || self.ability == :JUSTIFIED) && onactive   
+      if (self.hasAbility?(:INTREPIDSWORD) || self.hasAbility?(:NOGUARD) || self.hasAbility?(:JUSTIFIED)) && onactive   
         if !pbTooHigh?(PBStats::ATTACK)  
           pbIncreaseStatBasic(PBStats::ATTACK,1)  
           @battle.pbCommonAnimation("StatUp",self,nil)  
           @battle.pbDisplay(_INTL("{1}'s ferocious heart boosted its Attack!",pbThis))  
         end       
       end  
-      if (self.ability == :INTREPIDSWORD || self.ability == :NOGUARD || self.ability == :JUSTIFIED) && onactive
+      if (self.hasAbility?(:INTREPIDSWORD) || self.hasAbility?(:NOGUARD) || self.hasAbility?(:JUSTIFIED)) && onactive
         if !pbTooHigh?(PBStats::SPATK) 
           pbIncreaseStatBasic(PBStats::SPATK,1)  
           @battle.pbCommonAnimation("StatUp",self,nil)  
@@ -2416,7 +2421,7 @@ class PokeBattle_Battler
       end  
     end 
     if @battle.FE == :INFERNAL
-      if (self.ability == :MAGMAARMOR || self.ability == :FLAMEBODY || self.ability == :DESOLATELAND) && onactive
+      if (self.hasAbility?(:MAGMAARMOR) || self.hasAbility?(:FLAMEBODY) || self.hasAbility?(:DESOLATELAND)) && onactive
         statraise = false
         for stat in [PBStats::DEFENSE,PBStats::SPDEF]
           if !pbTooHigh?(stat)
@@ -2431,14 +2436,14 @@ class PokeBattle_Battler
       end
     end
     if @battle.FE == :DEEPEARTH
-      if self.ability == :LIGHTMETAL && onactive
+      if self.hasAbility?(:LIGHTMETAL) && onactive
         if !pbTooHigh?(PBStats::SPEED)
           pbIncreaseStatBasic(PBStats::SPEED,1)
           @battle.pbCommonAnimation("StatUp",self,nil)
           @battle.pbDisplay(_INTL("{1}'s {2} allows it to move faster!",pbThis,getAbilityName(ability)))
         end
       end
-      if self.ability == :HEAVYMETAL && onactive
+      if self.hasAbility?(:HEAVYMETAL) && onactive
         statchange = false
         if !pbTooHigh?(PBStats::DEFENSE)
           pbIncreaseStatBasic(PBStats::DEFENSE,1)
@@ -2452,7 +2457,7 @@ class PokeBattle_Battler
         end
         @battle.pbDisplay(_INTL("{1}'s weight makes it harder to be moved!",pbThis)) if statchange
       end
-      if self.ability == :SLOWSTART && onactive
+      if self.hasAbility?(:SLOWSTART) && onactive
         statraise =false
         for stat in [PBStats::ATTACK,PBStats::DEFENSE,PBStats::SPDEF]
           if !pbTooHigh?(stat)
@@ -2471,49 +2476,49 @@ class PokeBattle_Battler
         @battle.pbCommonAnimation("StatDown",self,nil) if statdrop
         @battle.pbDisplay(_INTL("The ancient giant is slow but powerful!")) if statraise || statdrop
       end
-      if (self.ability == :MAGNETPULL) && onactive
+      if (self.hasAbility?(:MAGNETPULL)) && onactive
         @battle.pbDisplay(_INTL("The strong magnetism causes {1} to float!",self.pbThis)) 
       end
-      if (self.ability == :UNAWARE || self.ability == :OBLIVIOUS) && onactive
+      if (self.hasAbility?(:UNAWARE) || self.hasAbility?(:OBLIVIOUS)) && onactive
         @battle.pbDisplay(_INTL("{1} fails to notice the intense gravity...",self.pbThis)) 
       end
-      if (self.ability == :CONTRARY) && onactive
+      if (self.hasAbility?(:CONTRARY)) && onactive
         @battle.pbDisplay(_INTL("Gravity's just a theory, after all....")) 
       end
     end
     if @battle.ProgressiveFieldCheck(PBFields::CONCERT)
-      if [:SOUNDPROOF,:PUNKROCK,:HEAVYMETAL,:SOLIDROCK,:ROCKHEAD].include?(self.ability) && onactive
+      if [:SOUNDPROOF,:PUNKROCK,:HEAVYMETAL,:SOLIDROCK,:ROCKHEAD].any? { |a| self.hasAbility?(a) } && onactive
         if !pbTooHigh?(PBStats::DEFENSE)
           pbIncreaseStatBasic(PBStats::DEFENSE,1)
           @battle.pbCommonAnimation("StatUp",self,nil)
           @battle.pbDisplay(_INTL("{1} is accustomed to the music due to {2}!", pbThis,getAbilityName(ability)))
         end
       end
-      if [:RUNAWAY,:EMERGENCYEXIT].include?(self.ability) && @battle.ProgressiveFieldCheck(PBFields::CONCERT,2,4) && onactive
+      if [:RUNAWAY,:EMERGENCYEXIT].any? { |a| self.hasAbility?(a) } && @battle.ProgressiveFieldCheck(PBFields::CONCERT,2,4) && onactive
         if !pbTooHigh?(PBStats::SPEED)
           pbIncreaseStatBasic(PBStats::SPEED,1)
           @battle.pbCommonAnimation("StatUp",self,nil)
           @battle.pbDisplay(_INTL("{1} wants to get away from the noise!", pbThis))
         end
       end
-      if self.ability == :RATTLED && @battle.ProgressiveFieldCheck(PBFields::CONCERT,3,4) && onactive
+      if self.hasAbility?(:RATTLED) && @battle.ProgressiveFieldCheck(PBFields::CONCERT,3,4) && onactive
         if !pbTooHigh?(PBStats::SPEED)
           pbIncreaseStatBasic(PBStats::SPEED,2)
           @battle.pbCommonAnimation("StatUp",self,nil)
           @battle.pbDisplay(_INTL("{1} wants to get away from the noise!", pbThis))
         end
       end
-      if [:PLUS,:GALVANIZE,:HEAVYMETAL,:SOLIDROCK,:PUNKROCK].include?(self.ability) && onactive
+      if [:PLUS,:GALVANIZE,:HEAVYMETAL,:SOLIDROCK,:PUNKROCK].any? { |a| self.hasAbility?(a) } && onactive
         message = _INTL("{1}'s {2}", pbThis,getAbilityName(ability))
         @battle.growField(message,self)
       end
-      if [:MINUS,:KLUTZ].include?(self.ability) && onactive
+      if [:MINUS,:KLUTZ].any? { |a| self.hasAbility?(a) } && onactive
         @battle.reduceField
       end
     end
     # Clouds from Deso Entry
     if @battle.FE == :CLOUDS
-      if self.ability == :CLOUDNINE && onactive
+      if self.hasAbility?(:CLOUDNINE) && onactive
         if !self.pbTooHigh?(PBStats::DEFENSE)
           self.pbIncreaseStatBasic(PBStats::DEFENSE,1)
           @battle.pbCommonAnimation("StatUp",self,nil)
@@ -2525,7 +2530,7 @@ class PokeBattle_Battler
         end
       end
     
-      if self.ability == :FORECAST && onactive
+      if self.hasAbility?(:FORECAST) && onactive
         if !self.pbTooHigh?(PBStats::DEFENSE)
           self.pbIncreaseStatBasic(PBStats::DEFENSE,1)
           @battle.pbCommonAnimation("StatUp",self,nil)
@@ -2540,7 +2545,7 @@ class PokeBattle_Battler
           @battle.pbDisplay(_INTL("{1}'s Forecast raised its Speed!", pbThis))
         end
       end
-      if self.ability == :OVERCOAT && onactive
+      if self.hasAbility?(:OVERCOAT) && onactive
         if !self.pbTooHigh?(PBStats::DEFENSE)
           self.pbIncreaseStatBasic(PBStats::DEFENSE,1)
           @battle.pbCommonAnimation("StatUp",self,nil)
@@ -2550,7 +2555,7 @@ class PokeBattle_Battler
     end
     #Darkness field, Deso
     if @battle.FE == :DARKNESS2
-      if self.ability == :PICKPOCKET && onactive
+      if self.hasAbility?(:PICKPOCKET) && onactive
         if !self.pbTooHigh?(PBStats::SPEED)
           self.pbIncreaseStatBasic(PBStats::SPEED,1)
           @battle.pbCommonAnimation("StatUp",self,nil)
@@ -2559,7 +2564,7 @@ class PokeBattle_Battler
       end
     end 
     if @battle.FE == :DARKNESS3
-      if self.ability == :PICKPOCKET && onactive
+      if self.hasAbility?(:PICKPOCKET) && onactive
         if !self.pbTooHigh?(PBStats::SPEED)
           self.pbIncreaseStatBasic(PBStats::SPEED,2)
           @battle.pbCommonAnimation("StatUp",self,nil)
@@ -2569,33 +2574,33 @@ class PokeBattle_Battler
     end 
     # Dancefloor field from Deso
     if @battle.FE == :DANCEFLOOR
-      if self.ability == :MAGICGUARD  && onactive
+      if self.hasAbility?(:MAGICGUARD)  && onactive
         self.pbIncreaseStatBasic(PBStats::SPDEF,2)
         @battle.pbCommonAnimation("StatUp",self,nil)
         @battle.pbDisplay(_INTL("{1}'s Magic Guard sharply raised its Special Defense!", pbThis))
       end
-      if self.ability == :MAGICBOUNCE  && onactive
+      if self.hasAbility?(:MAGICBOUNCE)  && onactive
         self.pbIncreaseStatBasic(PBStats::SPDEF,2)
         @battle.pbCommonAnimation("StatUp",self,nil)
         @battle.pbDisplay(_INTL("{1}'s Magic Bounce sharply raised its Special Defense!", pbThis))
       end
-      if self.ability == :MAGICIAN  && onactive
+      if self.hasAbility?(:MAGICIAN)  && onactive
         self.pbIncreaseStatBasic(PBStats::SPDEF,1)
         @battle.pbCommonAnimation("StatUp",self,nil)
         @battle.pbDisplay(_INTL("{1}'s Magician raised its Special Defense!", pbThis))
       end
-      if self.ability == :DANCER  && onactive
+      if self.hasAbility?(:DANCER)  && onactive
         self.pbIncreaseStatBasic(PBStats::SPATK,1)
         @battle.pbCommonAnimation("StatUp",self,nil)
         @battle.pbDisplay(_INTL("{1}'s Dancer raised its Special Attack!", pbThis))
       end
-      if self.ability == :INSOMNIA  && onactive
+      if self.hasAbility?(:INSOMNIA)  && onactive
         self.pbIncreaseStatBasic(PBStats::SPDEF,1)
         self.pbIncreaseStatBasic(PBStats::DEFENSE,2)
         @battle.pbCommonAnimation("StatUp",self,nil)
         @battle.pbDisplay(_INTL("{1}'s Insomnia raised its Defense and Special Defense!", pbThis))
       end
-      if self.ability == :ILLUMINATE  && onactive
+      if self.hasAbility?(:ILLUMINATE)  && onactive
         self.pbIncreaseStatBasic(PBStats::SPDEF,1)
         self.pbIncreaseStatBasic(PBStats::SPATK,1)
         @battle.pbCommonAnimation("StatUp",self,nil)
@@ -2614,7 +2619,7 @@ class PokeBattle_Battler
         end
         oppScore = highestOpposingScore[0].to_i
       if onactive
-        if self.ability == :IRONFIST
+        if self.hasAbility?(:IRONFIST)
           self.pbIncreaseStatBasic(PBStats::DEFENSE,1)
           @battle.pbCommonAnimation("StatUp",self,nil)
           @battle.pbDisplay(_INTL("{1}'s Iron Fist raised its Defense!", pbThis))
@@ -2633,7 +2638,7 @@ class PokeBattle_Battler
       end
     end
     # Frisk
-    if self.ability == :FRISK && @battle.pbOwnedByPlayer?(@index) && onactive
+    if self.hasAbility?(:FRISK) && @battle.pbOwnedByPlayer?(@index) && onactive
       items=[]
       items.push(pbOpposing1) if pbOpposing1.item && !pbOpposing1.isFainted?
       items.push(pbOpposing2) if pbOpposing2.item && !pbOpposing2.isFainted?
@@ -2643,7 +2648,7 @@ class PokeBattle_Battler
       end
     end
     # Anticipation
-    if self.ability == :ANTICIPATION && onactive
+    if self.hasAbility?(:ANTICIPATION) && onactive
       found=false
       for foe in [pbOpposing1,pbOpposing2]
         next if foe.isFainted?
@@ -2663,7 +2668,7 @@ class PokeBattle_Battler
       end
       @battle.pbDisplay(_INTL("{1} shuddered with anticipation!",pbThis)) if found
     end
-    if self.ability == :UNNERVE && onactive
+    if self.hasAbility?(:UNNERVE) && onactive
        if @battle.pbOwnedByPlayer?(@index)
        @battle.pbDisplay(_INTL("The opposing team is too nervous to eat berries!",pbThis))
        elsif !@battle.pbOwnedByPlayer?(@index)
@@ -2671,7 +2676,7 @@ class PokeBattle_Battler
        end
      end
     # Forewarn
-    if self.ability == :FOREWARN && onactive
+    if self.hasAbility?(:FOREWARN) && onactive
       highpower=0
       moves=[]
       chosenopponent = []
@@ -2750,7 +2755,7 @@ class PokeBattle_Battler
       end
     end
     # Imposter
-    if self.ability == :IMPOSTER && !@effects[:Transform] && onactive && pbOppositeOpposing.hp>0
+    if self.hasAbility?(:IMPOSTER) && !@effects[:Transform] && onactive && pbOppositeOpposing.hp>0
       choice=pbOppositeOpposing
       if choice.effects[:Substitute]>0 ||
          choice.effects[:Transform] ||
@@ -2818,7 +2823,7 @@ class PokeBattle_Battler
           @battle.pbDisplay(_INTL("{1} was burned by the heat!",user.pbThis))
         end
 
-        if target.ability == :AFTERMATH && !user.isFainted? && target.hp <= 0 && !@battle.pbCheckGlobalAbility(:DAMP) && user.ability != (:MAGICGUARD) && !(user.ability == (:WONDERGUARD) && @battle.FE == :COLOSSEUM)
+        if target.hasAbility?(:AFTERMATH) && !user.isFainted? && target.hp <= 0 && !@battle.pbCheckGlobalAbility(:DAMP) && user.ability != (:MAGICGUARD) && !(user.ability == (:WONDERGUARD) && @battle.FE == :COLOSSEUM)
           PBDebug.log("[#{user.pbThis} hurt by Aftermath]")
           @battle.scene.pbDamageAnimation(user,0)
           if @battle.FE == :CORROSIVEMIST
@@ -2834,7 +2839,7 @@ class PokeBattle_Battler
         eschance = 6 if (@battle.FE == :FOREST || @battle.FE == :WASTELAND || @battle.FE == :BEWITCHED)
         eschance.to_i
         #Effect Spore
-        if !user.hasType?(:GRASS) && user.ability != (:OVERCOAT) && target.ability == :EFFECTSPORE && @battle.pbRandom(10) < eschance
+        if !user.hasType?(:GRASS) && user.ability != (:OVERCOAT) && target.hasAbility?(:EFFECTSPORE) && @battle.pbRandom(10) < eschance
           rnd=@battle.pbRandom(3)
           if rnd==0 && user.pbCanPoison?(false)
             user.pbPoison(target)
@@ -2847,26 +2852,26 @@ class PokeBattle_Battler
             @battle.pbDisplay(_INTL("{1}'s {2} paralyzed {3}! It may be unable to move!", target.pbThis,getAbilityName(target.ability),user.pbThis(true)))
           end
         end
-        if target.ability == :FLAMEBODY && @battle.pbRandom(10)<3 && user.pbCanBurn?(false) && @battle.FE != :FROZENDIMENSION
+        if target.hasAbility?(:FLAMEBODY) && @battle.pbRandom(10)<3 && user.pbCanBurn?(false) && @battle.FE != :FROZENDIMENSION
           user.pbBurn(target)
           @battle.pbDisplay(_INTL("{1}'s {2} burned {3}!",target.pbThis,
             getAbilityName(target.ability),user.pbThis(true)))
         end
-        if target.ability == :IRONBARBS && !user.isFainted? && user.ability != (:MAGICGUARD) && !(user.ability == (:WONDERGUARD) && @battle.FE == :COLOSSEUM)
+        if target.hasAbility?(:IRONBARBS) && !user.isFainted? && user.ability != (:MAGICGUARD) && !(user.ability == (:WONDERGUARD) && @battle.FE == :COLOSSEUM)
           @battle.scene.pbDamageAnimation(user,0)
           user.pbReduceHP((user.totalhp/8.0).floor)
           @battle.pbDisplay(_INTL("{1}'s {2} hurt {3}!",target.pbThis, getAbilityName(target.ability),user.pbThis(true)))
         end
-        if target.ability == :MUMMY && !user.isFainted?
-          if !(user.ability == :MUMMY) && !PBStuff::FIXEDABILITIES.include?(user.ability)
-            neutralgas = true if user.ability = :NEUTRALIZINGGAS
+        if target.hasAbility?(:MUMMY) && !user.isFainted?
+          if !(user.hasAbility?(:MUMMY)) && !PBStuff::FIXEDABILITIES.any? { |a| user.hasAbility?(a) }
+            neutralgas = true if user.hasAbility?(:NEUTRALIZINGGAS)
             user.ability=:MUMMY || 0
             @battle.pbDisplay(_INTL("{1} was mummified by {2}!", user.pbThis,target.pbThis(true)))
             @battle.neutralizingGasDisable(user.index) if neutralgas
           end
         end
-        if target.ability == :WANDERINGSPIRIT && !user.isFainted? #&& !@user.isBoss
-          if ![:WANDERINGSPIRIT,:NEUTRALIZINGGAS].include?(user.ability) && !PBStuff::FIXEDABILITIES.include?(user.ability)
+        if target.hasAbility?(:WANDERINGSPIRIT) && !user.isFainted? #&& !@user.isBoss
+          if ![:WANDERINGSPIRIT,:NEUTRALIZINGGAS].any? { |a| user.hasAbility?(a) } && !PBStuff::FIXEDABILITIES.any? { |a| user.hasAbility?(a) }
             tmp=user.ability
             user.ability=target.ability
             target.ability=tmp
@@ -2875,7 +2880,7 @@ class PokeBattle_Battler
             target.pbAbilitiesOnSwitchIn(true)
           end
         end
-        if target.ability == :GOOEY
+        if target.hasAbility?(:GOOEY)
           if user.ability == (:CONTRARY)
             if @battle.FE == :SWAMP || @battle.FE == :MURKWATERSURFACE
               user.pbReduceStat(PBStats::SPEED,2,statmessage:false)
@@ -2898,7 +2903,7 @@ class PokeBattle_Battler
             @battle.pbDisplay(_INTL("{1}'s {2} poisoned {3}!",target.pbThis, getAbilityName(target.ability),user.pbThis(true)))
           end
         end
-        if target.ability == :TANGLINGHAIR
+        if target.hasAbility?(:TANGLINGHAIR)
           if user.ability == (:CONTRARY)
             user.pbReduceStat(PBStats::SPEED,1,statmessage:false)
             @battle.pbDisplay(_INTL("{1}'s {2} boosted {3}'s Speed!",target.pbThis,getAbilityName(target.ability),user.pbThis(true)))
@@ -2912,11 +2917,11 @@ class PokeBattle_Battler
         eschance = 3
         eschance = 6 if @battle.FE == :WASTELAND || @battle.FE == :CORRUPTED
         eschance.to_i
-        if target.ability == :POISONPOINT && @battle.pbRandom(10) < eschance && user.pbCanPoison?(false)
+        if target.hasAbility?(:POISONPOINT) && @battle.pbRandom(10) < eschance && user.pbCanPoison?(false)
           user.pbPoison(target)
           @battle.pbDisplay(_INTL("{1}'s {2} poisoned {3}!",target.pbThis, getAbilityName(target.ability),user.pbThis(true)))
         end
-        if target.ability == :ROUGHSKIN && !user.isFainted? && user.ability != (:MAGICGUARD) && !(user.ability == (:WONDERGUARD) && @battle.FE == :COLOSSEUM)
+        if target.hasAbility?(:ROUGHSKIN) && !user.isFainted? && user.ability != (:MAGICGUARD) && !(user.ability == (:WONDERGUARD) && @battle.FE == :COLOSSEUM)
           @battle.scene.pbDamageAnimation(user,0)
           user.pbReduceHP((user.totalhp/8.0).floor)
           @battle.pbDisplay(_INTL("{1}'s {2} hurt {3}!",target.pbThis, getAbilityName(target.ability),user.pbThis(true)))
@@ -2924,18 +2929,18 @@ class PokeBattle_Battler
         eschance = 3
         eschance = 6 if @battle.FE == :SHORTCIRCUIT || (Rejuv && @battle.FE == :ELECTERRAIN)
         eschance.to_i
-        if target.ability == :STATIC && @battle.pbRandom(10) < eschance && user.pbCanParalyze?(false)
+        if target.hasAbility?(:STATIC) && @battle.pbRandom(10) < eschance && user.pbCanParalyze?(false)
           user.pbParalyze(target)
           @battle.pbDisplay(_INTL("{1}'s {2} paralyzed {3}! It may be unable to move!", target.pbThis,getAbilityName(target.ability),user.pbThis(true)))
         end
         eschance = 3
         eschance = 6 if @battle.FE == :CORRUPTED
         eschance.to_i
-        if user.ability == :POISONTOUCH && @battle.pbRandom(10)<eschance && target.pbCanPoison?(false)
+        if user.hasAbility?(:POISONTOUCH) && @battle.pbRandom(10)<eschance && target.pbCanPoison?(false)
           target.pbPoison(user)
           @battle.pbDisplay(_INTL("{1}'s {2} poisoned {3}!",user.pbThis, getAbilityName(user.ability),target.pbThis(true)))
         end
-        if target.ability == :PERISHBODY && user.effects[:PerishSong]==0 && target.effects[:PerishSong]==0 && @battle.FE != :HOLY
+        if target.hasAbility?(:PERISHBODY) && user.effects[:PerishSong]==0 && target.effects[:PerishSong]==0 && @battle.FE != :HOLY
           if @battle.FE == :INFERNAL
             @battle.pbDisplay(_INTL("Both Pokémon will faint in one turn!"))
             user.effects[:PerishSong]=2
@@ -2986,7 +2991,7 @@ class PokeBattle_Battler
       if target.effects[:ShellTrap] && move.pbIsPhysical?(movetype)
         target.effects[:ShellTrap]=false
       end
-      if target.ability == :INNARDSOUT && !user.isFainted? &&
+      if target.hasAbility?(:INNARDSOUT) && !user.isFainted? &&
         target.hp <= 0 && user.ability != (:MAGICGUARD) && !(user.ability == (:WONDERGUARD) && @battle.FE == :COLOSSEUM)
         PBDebug.log("[#{user.pbThis} hurt by Innards Out]")
         @battle.scene.pbDamageAnimation(user,0)
@@ -3085,7 +3090,7 @@ class PokeBattle_Battler
         end
       end
       if !target.damagestate.substitute
-        if target.ability == :CURSEDBODY && (@battle.pbRandom(10)<3 || target.isFainted? && @battle.FE == :HAUNTED) && @battle.FE != :HOLY
+        if target.hasAbility?(:CURSEDBODY) && (@battle.pbRandom(10)<3 || target.isFainted? && @battle.FE == :HAUNTED) && @battle.FE != :HOLY
           if user.effects[:Disable]<=0 && move.pp>0 && !user.isFainted?
             user.effects[:Disable]=4
             user.effects[:DisableMove]=move.move
@@ -3093,7 +3098,7 @@ class PokeBattle_Battler
                getAbilityName(target.ability),user.pbThis(true)))
           end
         end
-        if target.ability == :GULPMISSILE && target.species == :CRAMORANT && !user.isFainted? &&
+        if target.hasAbility?(:GULPMISSILE) && target.species == :CRAMORANT && !user.isFainted? &&
           user.ability != (:MAGICGUARD) && !(user.ability == (:WONDERGUARD) && @battle.FE == :COLOSSEUM) && target.form!=0
           @battle.scene.pbDamageAnimation(user,0)
           if @battle.FE == :UNDERWATER
@@ -3125,7 +3130,7 @@ class PokeBattle_Battler
           @battle.pbDisplay(_INTL("{1} returned to normal!",target.pbThis))
         end
         # Illusion goes here
-        if (target.ability == :ILLUSION) 
+        if (target.hasAbility?(:ILLUSION)) 
           if target.effects[:Illusion]!=nil
             target.effects[:Illusion]=nil
             @battle.scene.pbChangePokemon(target,target.pokemon)
@@ -3298,7 +3303,7 @@ class PokeBattle_Battler
           target.pbDisposeItem(false)
         end
       end
-      if !([:UNNERVE,:ASONE].include?(user.ability) || [:UNNERVE,:ASONE].include?(user.pbPartner.ability))
+      if !([:UNNERVE,:ASONE].any? { |a| user.hasAbility?(a) } || [:UNNERVE,:ASONE].any? { |a| user.pbPartner.hasAbility?(a) })
         if target.hasWorkingItem(:KEEBERRY) && move.pbIsPhysical?(movetype)
           if target.pbCanIncreaseStatStage?(PBStats::DEFENSE)
             target.pbIncreaseStatBasic(PBStats::DEFENSE,1)
@@ -3409,35 +3414,35 @@ class PokeBattle_Battler
 
   def pbAbilityCureCheck
     return if self.isFainted?
-    if self.ability == :LIMBER && self.status== :PARALYSIS
+    if self.hasAbility?(:LIMBER) && self.status== :PARALYSIS
       @battle.pbDisplay(_INTL("{1}'s Limber cured its paralysis problem!",pbThis))
       self.status=nil
     end
-    if self.ability == :OBLIVIOUS && @effects[:Attract]>=0
+    if self.hasAbility?(:OBLIVIOUS) && @effects[:Attract]>=0
       @battle.pbDisplay(_INTL("{1}'s Oblivious cured its love problem!",pbThis))
       @effects[:Attract]=-1
     end
-    if self.ability == :VITALSPIRIT && self.status== :SLEEP
+    if self.hasAbility?(:VITALSPIRIT) && self.status== :SLEEP
       @battle.pbDisplay(_INTL("{1}'s Vital Spirit cured its sleep problem!",pbThis))
       self.status=nil
     end
-    if self.ability == :INSOMNIA && self.status== :SLEEP
+    if self.hasAbility?(:INSOMNIA) && self.status== :SLEEP
       @battle.pbDisplay(_INTL("{1}'s Insomnia cured its sleep problem!",pbThis))
       self.status=nil
     end
-    if self.ability == :IMMUNITY && self.status== :POISON
+    if self.hasAbility?(:IMMUNITY) && self.status== :POISON
       @battle.pbDisplay(_INTL("{1}'s Immunity cured its poison problem!",pbThis))
       self.status=nil
     end
-    if self.ability == :OWNTEMPO && @effects[:Confusion]>0
+    if self.hasAbility?(:OWNTEMPO) && @effects[:Confusion]>0
       @battle.pbDisplay(_INTL("{1}'s Own Tempo cured its confusion problem!",pbThis))
       @effects[:Confusion]=0
     end
-    if self.ability == :MAGMAARMOR && self.status== :FROZEN
+    if self.hasAbility?(:MAGMAARMOR) && self.status== :FROZEN
       @battle.pbDisplay(_INTL("{1}'s Magma Armor cured its ice problem!",pbThis))
       self.status=nil
     end
-    if self.ability == :WATERVEIL && self.status== :BURN
+    if self.hasAbility?(:WATERVEIL) && self.status== :BURN
       @battle.pbDisplay(_INTL("{1}'s Water Veil cured its burn problem!",pbThis))
       self.status=nil
     end
@@ -3446,9 +3451,9 @@ class PokeBattle_Battler
   def pbEmergencyExitCheck(oldhp)
     if oldhp >= (@totalhp/2.0).floor && (self.hp + self.pbBerryRecoverAmount) < (@totalhp/2.0).floor && self.hp!=0
       if @battle.FE == :COLOSSEUM
-        if self.ability == :WIMPOUT
+        if self.hasAbility?(:WIMPOUT)
           @battle.pbDisplay(_INTL("{1} has nowhere to run!",self.pbThis))
-        elsif self.ability == :EMERGENCYEXIT
+        elsif self.hasAbility?(:EMERGENCYEXIT)
           if self.pbCanIncreaseStatStage?(PBStats::SPEED)  
             self.pbIncreaseStatBasic(PBStats::SPEED,2)  
             @battle.pbCommonAnimation("StatUp",user,nil)  
@@ -3456,7 +3461,7 @@ class PokeBattle_Battler
           end
         end 
       else
-        if (self.ability == :WIMPOUT || self.ability == :EMERGENCYEXIT) && 
+        if (self.hasAbility?(:WIMPOUT) || self.hasAbility?(:EMERGENCYEXIT)) && 
           ((@battle.pbCanChooseNonActive?(self.index) && !@battle.pbAllFainted?(@battle.pbParty(self.index))) || @battle.pbIsWild?)
           if @battle.pbIsWild?
             return if @battle.cantescape || $game_switches[:Never_Escape]
@@ -3464,8 +3469,8 @@ class PokeBattle_Battler
           else
             self.userSwitch = true
           end
-          @battle.pbDisplay(_INTL("{1} tactically retreated!",self.pbThis)) if self.ability == :EMERGENCYEXIT
-          @battle.pbDisplay(_INTL("{1} wimped out!",self.pbThis)) if self.ability == :WIMPOUT
+          @battle.pbDisplay(_INTL("{1} tactically retreated!",self.pbThis)) if self.hasAbility?(:EMERGENCYEXIT)
+          @battle.pbDisplay(_INTL("{1} wimped out!",self.pbThis)) if self.hasAbility?(:WIMPOUT)
         end
       end
     end
@@ -3476,7 +3481,7 @@ class PokeBattle_Battler
 ################################################################################
   def pbBerryRecoverAmount
     return 0 if self.isFainted?
-    return 0 if [:UNNERVE,:ASONE].include?(pbOpposing1.ability) || [:UNNERVE,:ASONE].include?(pbOpposing1.ability)
+    return 0 if [:UNNERVE,:ASONE].any? { |a| pbOpposing1.hasAbility?(a) } || [:UNNERVE,:ASONE].any? { |a| pbOpposing1.hasAbility?(a) }
     healing = 0
     case self.item
       when :ORANBERRY then healing = 10 if self.hp<=(self.totalhp/2.0).floor
@@ -3484,7 +3489,7 @@ class PokeBattle_Battler
       when :ENIGMABERRY then healing = (self.totalhp/4.0).floor if self.damagestate.typemod>4
       when :BERRYJUICE then healing = 20 if self.hp<=(self.totalhp/2.0).floor
       when :FIGYBERRY, :WIKIBERRY, :MAGOBERRY, :AGUAVBERRY, :IAPAPABERRY
-        healing = (self.totalhp/2.0).floor if self.hp<=(self.totalhp/4.0).floor || (self.ability == :GLUTTONY && self.hp<=(self.totalhp/2.0).floor)
+        healing = (self.totalhp/2.0).floor if self.hp<=(self.totalhp/4.0).floor || (self.hasAbility?(:GLUTTONY) && self.hp<=(self.totalhp/2.0).floor)
     end
     healing*=2 if self.ability==:RIPEN
     return healing
@@ -3503,7 +3508,7 @@ class PokeBattle_Battler
       @battle.pbDisplay(_INTL("{1}'s {2} restored its HP a little!",pbThis,itemname))
       return
     end
-    if hpcure && (self.item == :BLACKSLUDGE && !hasType?(:POISON)) && self.ability != :MAGICGUARD && !(self.ability == :WONDERGUARD && @battle.FE == :COLOSSEUM)
+    if hpcure && (self.item == :BLACKSLUDGE && !hasType?(:POISON)) && self.ability != :MAGICGUARD && !(self.hasAbility?(:WONDERGUARD) && @battle.FE == :COLOSSEUM)
       hploss = self.totalhp/8
       hploss = self.totalhp/4 if @battle.FE == :CORRUPTED
       pbReduceHP((hploss).floor,true)
@@ -3551,7 +3556,7 @@ class PokeBattle_Battler
     end
     #berries go now!
     #non-berries can get the fuck out of here
-    return if [:UNNERVE,:ASONE].include?(pbOpposing1.ability) || [:UNNERVE,:ASONE].include?(pbOpposing1.ability) || self.item.nil? || !pbIsBerry?(self.item)
+    return if [:UNNERVE,:ASONE].any? { |a| pbOpposing1.hasAbility?(a) } || [:UNNERVE,:ASONE].any? { |a| pbOpposing1.hasAbility?(a) } || self.item.nil? || !pbIsBerry?(self.item)
     pbUseBerry
   end
 
@@ -3563,7 +3568,7 @@ class PokeBattle_Battler
     stat_berry = false
     status_berry = false
     berry = self.item if berry == nil
-    health_threshold = self.ability == :GLUTTONY ? (self.totalhp/2.0).floor : (self.totalhp/4.0).floor
+    health_threshold = self.hasAbility?(:GLUTTONY) ? (self.totalhp/2.0).floor : (self.totalhp/4.0).floor
     itemname=getItemName(berry)
     case berry
       when :ORANBERRY   then healing = 10 if self.hp <= (self.totalhp/2.0).floor || special
@@ -3649,7 +3654,7 @@ class PokeBattle_Battler
           for i in 0...@pokemon.moves.length
             pokemove=@pokemon.moves[i]
             next if pokemove.pp==0 && pokemove.move
-            pokemove.pp = self.ability == :RIPEN ? 20 : 10
+            pokemove.pp = self.hasAbility?(:RIPEN) ? 20 : 10
             pokemove.pp=pokemove.totalpp if pokemove.pp>pokemove.totalpp
             self.moves[i].pp=pokemove.pp
             break
@@ -3707,7 +3712,7 @@ class PokeBattle_Battler
   end
 
   def pbCustapBerry
-    if self.hasWorkingItem(:CUSTAPBERRY) && ((self.ability == :GLUTTONY && self.hp<=(self.totalhp/2.0).floor) || self.hp<=(self.totalhp/4.0).floor)
+    if self.hasWorkingItem(:CUSTAPBERRY) && ((self.hasAbility?(:GLUTTONY) && self.hp<=(self.totalhp/2.0).floor) || self.hp<=(self.totalhp/4.0).floor)
       @custap = true
       @battle.pbCommonAnimation("Nom",self,nil)
       @battle.pbDisplay(_INTL("{1} ate its Custap Berry to move first!",pbThis))
@@ -3727,7 +3732,7 @@ class PokeBattle_Battler
 
   def pbBurp(target=self)
     target.pokemon.belch = true
-    if target.ability == :CHEEKPOUCH
+    if target.hasAbility?(:CHEEKPOUCH)
       target.pbRecoverHP((target.totalhp/3.0).floor,true)
       @battle.pbDisplay(_INTL("{1}'s {2} restored health!",pbThis,getAbilityName(target.ability)))
     end
@@ -3876,9 +3881,9 @@ class PokeBattle_Battler
       target=:AllNonUsers
     elsif @battle.FE == :DEEPEARTH && move.move == :GRAVITY
       target=:AllOpposing
-    elsif self.ability == :TEMPEST && move.move == :WEATHERBALL
+    elsif self.hasAbility?(:TEMPEST) && move.move == :WEATHERBALL
       target=:AllOpposing
-    elsif self.ability == :WORLDOFNIGHTMARES && move.move == :NIGHTMARE
+    elsif self.hasAbility?(:WORLDOFNIGHTMARES) && move.move == :NIGHTMARE
       target=:AllOpposing
     end
     side=(pbIsOpposing?(self.index)) ? 1 : 0
@@ -3921,7 +3926,7 @@ class PokeBattle_Battler
     if targets.length==1 && basemove.pbType(user) == :ELECTRIC && target.ability != (:LIGHTNINGROD)
       for i in priority # use Pokémon earliest in priority
         next if i.index==user.index || i.isFainted?
-        if i.ability == :LIGHTNINGROD && !i.moldbroken
+        if i.hasAbility?(:LIGHTNINGROD) && !i.moldbroken
           target=i # X's LightningRod took the attack!
           changeeffect=1
           break
@@ -3932,7 +3937,7 @@ class PokeBattle_Battler
     if targets.length==1 && basemove.type == :WATER && target.ability != (:STORMDRAIN)
       for i in priority # use Pokémon earliest in priority
         next if !pbIsOpposing?(i.index) || i.isFainted?
-        if i.ability == :STORMDRAIN && !i.moldbroken
+        if i.hasAbility?(:STORMDRAIN) && !i.moldbroken
           target=i # X's Storm Drain took the attack!
           changeeffect=2
           break
@@ -3948,7 +3953,7 @@ class PokeBattle_Battler
       for i in priority # use Pokémon latest in priority
         next if !pbIsOpposing?(i.index) || i.isFainted?
         if i.effects[:FollowMe] || i.effects[:RagePowder]
-          unless (i.effects[:RagePowder] && (self.ability == :OVERCOAT || self.hasType?(:GRASS) || self.hasWorkingItem(:SAFETYGOGGLES)))# change target to this
+          unless (i.effects[:RagePowder] && (self.hasAbility?(:OVERCOAT) || self.hasType?(:GRASS) || self.hasWorkingItem(:SAFETYGOGGLES)))# change target to this
             target=i
             changeeffect = 0
           end
@@ -4174,8 +4179,8 @@ class PokeBattle_Battler
         return false
       end
     end
-    if ((((target.ability == :DAZZLING || target.ability == :QUEENLYMAJESTY || (@battle.FE == :STARLIGHT && target.ability == :MIRRORARMOR)) || 
-      (target.pbPartner.ability == :DAZZLING || target.pbPartner.ability == :QUEENLYMAJESTY || (@battle.FE == :STARLIGHT && target.pbPartner.ability == :MIRRORARMOR))) && !target.moldbroken) ||
+    if ((((target.hasAbility?(:DAZZLING) || target.hasAbility?(:QUEENLYMAJESTY) || (@battle.FE == :STARLIGHT && target.hasAbility?(:MIRRORARMOR))) || 
+      (target.pbPartner.hasAbility?(:DAZZLING) || target.pbPartner.hasAbility?(:QUEENLYMAJESTY) || (@battle.FE == :STARLIGHT && target.pbPartner.hasAbility?(:MIRRORARMOR)))) && !target.moldbroken) ||
       @battle.FE == :PSYTERRAIN && !target.isAirborne?) && target.pbPartner!=user
       if (basemove.priorityCheck(user) > 0) || (user.ability == (:PRANKSTER) && !basemove.zmove && !flags[:instructed] && @battle.choices[user.index][2]!=basemove)
         @battle.pbDisplay(_INTL("{1} wasn't affected!",target.pbThis))
@@ -4192,7 +4197,7 @@ class PokeBattle_Battler
       @battle.pbDisplay(_INTL("{1} wasn't affected!",target.pbThis))
       return false
     end
-    if Rejuv && @battle.FE == :CHESS && user.ability == :KLUTZ && CHESSMOVES.include?(basemove.move)
+    if Rejuv && @battle.FE == :CHESS && user.hasAbility?(:KLUTZ) && CHESSMOVES.include?(basemove.move)
       @battle.pbDisplay(_INTL("It was too much of a klutz to move the chess piece.",target.pbThis))  
       return false  
     end
@@ -4219,7 +4224,7 @@ class PokeBattle_Battler
             @battle.pbDisplay(_INTL("The Mat Block was broken!"))
       end
 
-      unseenfist = (user.ability == :UNSEENFIST && basemove.contactMove?)
+      unseenfist = (user.hasAbility?(:UNSEENFIST) && basemove.contactMove?)
 
       if target.pbOwnSide.effects[:MatBlock] && (basemove.pbIsPhysical?(basemove.type) || basemove.pbIsSpecial?(basemove.type)) &&
         basemove.canProtect? && !target.effects[:ProtectNegation] && !unseenfist
@@ -4268,7 +4273,7 @@ class PokeBattle_Battler
         @battle.pbDisplay(_INTL("{1} protected itself!", target.pbThis))
         @battle.successStates[user.index].protected=true
         # physical contact
-        if basemove.contactMove? && !(user.ability == :LONGREACH)
+        if basemove.contactMove? && !(user.hasAbility?(:LONGREACH))
           if target.effects[:KingsShield]
             user.pbReduceStat(PBStats::ATTACK,1)
             user.pbReduceStat(PBStats::SPATK,1) if @battle.FE == :FAIRYTALE || @battle.FE == :CHESS || @battle.FE == :COLOSSEUM
@@ -4349,7 +4354,7 @@ class PokeBattle_Battler
       typemod=basemove.pbTypeModifier(type,user,target)
       typemod=basemove.fieldTypeChange(user,target,typemod)
       if (type == :GROUND) && target.isAirborne? && !target.hasWorkingItem(:RINGTARGET) && @battle.FE != :CAVE && basemove.move != :THOUSANDARROWS
-        if ([:LEVITATE,:SOLARIDOL,:LUNARIDOL].include?(target.ability) || (@battle.FE == :DEEPEARTH && [:UNAWARE,:OBLIVIOUS,:MAGNETPULL,:CONTRARY].include?(target.ability))) && !(target.moldbroken)
+        if ([:LEVITATE,:SOLARIDOL,:LUNARIDOL].any? { |a| target.hasAbility?(a) } || (@battle.FE == :DEEPEARTH && [:UNAWARE,:OBLIVIOUS,:MAGNETPULL,:CONTRARY].any? { |a| target.hasAbility?(a) })) && !(target.moldbroken)
           @battle.pbDisplay(_INTL("{1} makes Ground moves miss with {2}!",target.pbThis,getAbilityName(target.ability)))
           return false
         end
@@ -4495,7 +4500,7 @@ class PokeBattle_Battler
       @battle.pbDisplayPaused(_INTL("{1}'s {2} is disabled!",pbThis,basemove.name))
       return false
     end
-    if self.ability == :TRUANT && @effects[:Truant]
+    if self.hasAbility?(:TRUANT) && @effects[:Truant]
       @battle.pbDisplay(_INTL("{1} is loafing around!",pbThis))
       return false
     end
@@ -4528,7 +4533,7 @@ class PokeBattle_Battler
     end
     if self.status== :SLEEP && !@simplemove
       self.statusCount-=1
-      self.statusCount-=1 if self.ability == :EARLYBIRD
+      self.statusCount-=1 if self.hasAbility?(:EARLYBIRD)
       if self.statusCount<=0
         self.pbCureStatus
       else
@@ -4555,7 +4560,7 @@ class PokeBattle_Battler
     if @effects[:Flinch] && !@simplemove
       @effects[:Flinch]=false
       if @battle.FE == :ROCKY
-        if !(self.ability == :STEADFAST) && !(self.ability == :STURDY) && !(self.ability == :INNERFOCUS) && (self.stages[PBStats::DEFENSE] < 1)
+        if !(self.hasAbility?(:STEADFAST)) && !(self.hasAbility?(:STURDY)) && !(self.hasAbility?(:INNERFOCUS)) && (self.stages[PBStats::DEFENSE] < 1)
           @battle.pbDisplay(_INTL("{1} was knocked into a rock!",pbThis))
           damage=[1,(self.totalhp/4.0).floor].max
           if damage>0
@@ -4568,13 +4573,13 @@ class PokeBattle_Battler
           end
         end
       end
-      if self.ability == :INNERFOCUS
+      if self.hasAbility?(:INNERFOCUS)
         @battle.pbDisplay(_INTL("{1} won't flinch because of its {2}!", self.pbThis,getAbilityName(self.ability)))
       elsif self.stages[PBStats::DEFENSE] >= 1 && @battle.FE == :ROCKY
         @battle.pbDisplay(_INTL("{1} won't flinch because of its bolstered Defenses!", self.pbThis,getAbilityName(self.ability)))
       else
         @battle.pbDisplay(_INTL("{1} flinched and couldn't move!",self.pbThis))
-        if self.ability == :STEADFAST
+        if self.hasAbility?(:STEADFAST)
           if pbCanIncreaseStatStage?(PBStats::SPEED)
             pbIncreaseStat(PBStats::SPEED,1,statmessage: false)
             @battle.pbDisplay(_INTL("{1}'s {2} raised its speed!", self.pbThis,getAbilityName(self.ability)))
@@ -4617,7 +4622,7 @@ class PokeBattle_Battler
     if (basemove.move == :HIDDENPOWER)
       protype = pbHiddenPower(self.pokemon)
     end
-    if (self.ability == :PROTEAN || self.ability == :LIBERO) && basemove.move != :STRUGGLE
+    if (self.hasAbility?(:PROTEAN) || self.hasAbility?(:LIBERO)) && basemove.move != :STRUGGLE
       prot1 = self.type1
       prot2 = self.type2
       if !self.hasType?(protype) || (defined?(prot2) && prot1 != prot2)
@@ -4626,7 +4631,7 @@ class PokeBattle_Battler
         @battle.pbDisplay(_INTL("{1} had its type changed to {3}!",pbThis,getAbilityName(self.ability),protype.capitalize))
       end
     end # end of update
-    if (self.ability == :STANCECHANGE)
+    if (self.hasAbility?(:STANCECHANGE))
       pbCheckForm(basemove)
     end
     flags[:passedtrying]=true
@@ -4679,7 +4684,7 @@ class PokeBattle_Battler
           #TODO: Not shown if message is "It doesn't affect XXX..."
           @battle.pbDisplay(_INTL("{1} kept going and crashed!",user.pbThis))
           damage=[1,(user.totalhp/2.0).floor].max
-          if (user.ability == :MAGICGUARD) || (self.ability == :WONDERGUARD && @battle.FE == :COLOSSEUM)
+          if (user.hasAbility?(:MAGICGUARD)) || (self.hasAbility?(:WONDERGUARD) && @battle.FE == :COLOSSEUM)
             damage=0
           end
           if damage>0
@@ -4689,11 +4694,11 @@ class PokeBattle_Battler
           user.pbFaint if user.isFainted?
           # Rocky Field Crash
         elsif @battle.FE == :ROCKY && basemove.contactMove? &&
-         !(user.ability == :ROCKHEAD) && (!(target.effects[:SpikyShield] || target.effects[:Protect] || target.effects[:KingsShield] ||
+         !(user.hasAbility?(:ROCKHEAD)) && (!(target.effects[:SpikyShield] || target.effects[:Protect] || target.effects[:KingsShield] ||
           target.effects[:BanefulBunker] || target.effects[:Obstruct]))
           @battle.pbDisplay(_INTL("{1} hit a rock instead!",user.pbThis))
           damage=[1,(user.totalhp/8.0).floor].max
-          damage=[1,(user.totalhp/4.0).floor].max if user.ability == :GORILLATACTICS
+          damage=[1,(user.totalhp/4.0).floor].max if user.hasAbility?(:GORILLATACTICS)
           p damage
           if !damage.nil? && damage>0
             @battle.scene.pbDamageAnimation(user,0)
@@ -4808,7 +4813,7 @@ class PokeBattle_Battler
         end
 
         # Gulp Missile
-        if (self.species == :CRAMORANT) && self.ability == :GULPMISSILE && !self.isFainted? && (basemove.move == :SURF || basemove.move == :DIVE) # Surf or Dive
+        if (self.species == :CRAMORANT) && self.hasAbility?(:GULPMISSILE) && !self.isFainted? && (basemove.move == :SURF || basemove.move == :DIVE) # Surf or Dive
           if self.form==0
             if @battle.FE == :SWAMP || @battle.FE == :WATERSURFACE || @battle.FE == :UNDERWATER
               self.form = 1 # Gulping Form
@@ -4832,7 +4837,7 @@ class PokeBattle_Battler
       end
 
       # Corrosion random status
-      if user.ability == :CORROSION && @battle.FE == :WASTELAND && damage > 0
+      if user.hasAbility?(:CORROSION) && @battle.FE == :WASTELAND && damage > 0
         if @battle.pbRandom(10)==0
           case @battle.pbRandom(4)
             when 0 then target.pbBurn(user)       if target.pbCanBurn?(false)
@@ -4889,9 +4894,9 @@ class PokeBattle_Battler
       # Emergency Exit / Wimp Out
       if !target.isFainted? && aboveHalfHp && (target.hp + target.pbBerryRecoverAmount)<=(target.totalhp/2.0).floor
         if @battle.FE == :COLOSSEUM
-          if self.ability == :WIMPOUT
+          if self.hasAbility?(:WIMPOUT)
             @battle.pbDisplay(_INTL("{1} has nowhere to run!",self.pbThis))
-          elsif self.ability == :EMERGENCYEXIT
+          elsif self.hasAbility?(:EMERGENCYEXIT)
             if self.pbCanIncreaseStatStage?(PBStats::SPEED)  
               self.pbIncreaseStatBasic(PBStats::SPEED,2)  
               @battle.pbCommonAnimation("StatUp",user,nil)  
@@ -4899,11 +4904,11 @@ class PokeBattle_Battler
             end
           end 
         else
-          if (target.ability == :EMERGENCYEXIT || target.ability == :WIMPOUT) && 
+          if (target.hasAbility?(:EMERGENCYEXIT) || target.hasAbility?(:WIMPOUT)) && 
             ((@battle.pbCanChooseNonActive?(target.index) && !@battle.pbAllFainted?(@battle.pbParty(target.index))) || @battle.pbIsWild?)
             if !wimpcheck
-              @battle.pbDisplay(_INTL("{1} tactically retreated!",target.pbThis)) if target.ability == :EMERGENCYEXIT
-              @battle.pbDisplay(_INTL("{1} wimped out!",target.pbThis)) if target.ability == :WIMPOUT
+              @battle.pbDisplay(_INTL("{1} tactically retreated!",target.pbThis)) if target.hasAbility?(:EMERGENCYEXIT)
+              @battle.pbDisplay(_INTL("{1} wimped out!",target.pbThis)) if target.hasAbility?(:WIMPOUT)
               wimpcheck=true
             end
             @battle.pbClearChoices(target.index)
@@ -4967,7 +4972,7 @@ class PokeBattle_Battler
       break if target.isFainted?
       # Make the target flinch
       if target.damagestate.calcdamage>0 && !target.damagestate.substitute
-        if (!(target.ability == :SHIELDDUST) || target.moldbroken) || basemove.hasFlag?("m")
+        if (!(target.hasAbility?(:SHIELDDUST)) || target.moldbroken) || basemove.hasFlag?("m")
           if (user.hasWorkingItem(:KINGSROCK) || user.hasWorkingItem(:RAZORFANG)) &&
            basemove.canKingsRock? # && target.status!=:SLEEP && target.status!=:FROZEN #Gen 2 only thing #perry
             if @battle.pbRandom(10)==0
@@ -5054,7 +5059,7 @@ class PokeBattle_Battler
           @battle.pbDisplay(_INTL("{1}'s {2} raised its Attack!",user.pbThis,$cache.abil[user.ability].name))
         end
       end
-      if user.ability == :EXECUTION  && user.hp>0 && target.hp<=0
+      if user.hasAbility?(:EXECUTION)  && user.hp>0 && target.hp<=0
         hpgain=user.pbRecoverHP(self.totalhp/8,true)
         @battle.pbDisplay(_INTL("{1}'s Execution healed some of its wounds!",user.pbThis))
       end
@@ -5130,7 +5135,7 @@ class PokeBattle_Battler
   end
 
   def pbDancerMoveCheck(id)
-    if self.ability == :DANCER && @battle.FE == :BIGTOP # Big Top
+    if self.hasAbility?(:DANCER) && @battle.FE == :BIGTOP # Big Top
       if (PBStuff::DANCEMOVE).include?(id)
         boost=false
         if !pbTooHigh?(PBStats::SPATK)
@@ -5148,7 +5153,7 @@ class PokeBattle_Battler
     end
     for i in @battle.battlers
       next if i == self
-      if i.ability == :DANCER && (PBStuff::DANCEMOVE).include?(id)
+      if i.hasAbility?(:DANCER) && (PBStuff::DANCEMOVE).include?(id)
         @battle.pbDisplay(_INTL("{1} joined in with the dance!",i.pbThis))
         i.pbUseMoveSimple(id,-1,-1,true)
       end
@@ -5290,7 +5295,7 @@ class PokeBattle_Battler
     targets=[]
     pbFindUser(choice,targets)
     user = self
-    if (user.ability == :MOLDBREAKER || user.ability == :TERAVOLT || user.ability == :TURBOBLAZE) ||
+    if (user.hasAbility?(:MOLDBREAKER) || user.hasAbility?(:TERAVOLT) || user.hasAbility?(:TURBOBLAZE)) ||
        basemove.function==0x166 || basemove.function==0x176 || basemove.function==0x200 || basemove.move==:SEARINGSUNRAZESMASH || basemove.move==:MENACINGMOONRAZEMAELSTROM || basemove.move==:LIGHTTHATBURNSTHESKY # Solgaluna/crozma signatures
       for i in 0..3
         @battle.battlers[i].moldbroken = true
@@ -5409,7 +5414,7 @@ class PokeBattle_Battler
             when :CINCCINO
               hitchances=[2,2,3,3,4,5]
               ret=hitchances[@battle.pbRandom(hitchances.length)]
-              ret=5 if user.ability == :SKILLLINK
+              ret=5 if user.hasAbility?(:SKILLLINK)
               numhits = ret if !basemove.pbIsMultiHit
             end
           end
@@ -5701,12 +5706,12 @@ class PokeBattle_Battler
     spatkmult *= 1.5 if self.item == :CHOICESPECS
     spatkmult *= 2 if self.item == :DEEPSEATOOTH && self.pokemon.species == :CLAMPERL
     spatkmult *= 2 if self.item == :LIGHTBALL && self.pokemon.species == :PIKACHU
-    spatkmult *= 1.5 if self.ability == :MINUS && self.pbPartner.ability == :PLUS
-    spatkmult *= 1.5 if self.ability == :PLUS && self.pbPartner.ability == :MINUS
-    spatkmult *= 1.5 if self.ability == :SOLARPOWER && @battle.pbWeather== :SUNNYDAY
+    spatkmult *= 1.5 if self.hasAbility?(:MINUS) && self.pbPartner.hasAbility?(:PLUS)
+    spatkmult *= 1.5 if self.hasAbility?(:PLUS) && self.pbPartner.hasAbility?(:MINUS)
+    spatkmult *= 1.5 if self.hasAbility?(:SOLARPOWER) && @battle.pbWeather== :SUNNYDAY
     spatkmult *= 1.5 if self.crested && self.species == :CASTFORM && @battle.pbWeather== :SUNNYDAY
     spatkmult *= ((allyfainted * 0.2) + 1.0) if self.species == :SPIRITOMB && self.crested
-    spatkmult *= 1.3 if self.pbPartner.ability == :BATTERY
+    spatkmult *= 1.3 if self.pbPartner.hasAbility?(:BATTERY)
     spdefmult = 1
     spdefmult *= 1.5 if self.item == :ASSAULTVEST
     spdefmult *= 1.5 if self.item == :EVIOLITE && pbGetEvolvedFormData(self.pokemon.species).length>0
@@ -5715,7 +5720,7 @@ class PokeBattle_Battler
     spdefmult *= 1.5 if self.item == :LIGHTBALL && self.species == :PIKACHU
     spdefmult *= 2 if self.item == :DEEPSEASCALE && self.pokemon.species == :CLAMPERL
     spdefmult *= 1.5 if self.item == :METALPOWDER && self.pokemon.species == :DITTO && !self.effects[:Transform]
-    spdefmult *= 1.5 if self.ability == :FLOWERGIFT && @battle.pbWeather== :SUNNYDAY || (self.species == :CHERRIM && self.crested)
+    spdefmult *= 1.5 if self.hasAbility?(:FLOWERGIFT) && @battle.pbWeather== :SUNNYDAY || (self.species == :CHERRIM && self.crested)
     spdefmult *= 1.5 if @battle.pbWeather== :SANDSTORM &&hasType?(:ROCK)
     
     return [spatkmult*self.spatk,spdefmult*self.spdef].max if unaware
@@ -5760,7 +5765,7 @@ class PokeBattle_Battler
   def pbEndTurn(choice)
     # True end(?)
     if @lastRegularMoveUsed
-      @effects[:ChoiceBand]=@lastRegularMoveUsed if @effects[:ChoiceBand]==nil && !self.isFainted? && (self.hasWorkingItem(:CHOICEBAND) || self.hasWorkingItem(:CHOICESPECS) || self.hasWorkingItem(:CHOICESCARF) || self.ability == :GORILLATACTICS)
+      @effects[:ChoiceBand]=@lastRegularMoveUsed if @effects[:ChoiceBand]==nil && !self.isFainted? && (self.hasWorkingItem(:CHOICEBAND) || self.hasWorkingItem(:CHOICESPECS) || self.hasWorkingItem(:CHOICESCARF) || self.hasAbility?(:GORILLATACTICS))
     end
     @selectedMove = nil
     @battle.synchronize[0]=-1
@@ -5822,10 +5827,10 @@ class PokeBattle_Battler
       return
     end
     # Use the move
-    if choice[2].zmove && !@effects[:Flinch] && (@status!=:SLEEP || choice[2].pbCanUseWhileAsleep? || @statusCount==1 || (@statusCount==2 && self.ability == :EARLYBIRD))
+    if choice[2].zmove && !@effects[:Flinch] && (@status!=:SLEEP || choice[2].pbCanUseWhileAsleep? || @statusCount==1 || (@statusCount==2 && self.hasAbility?(:EARLYBIRD)))
       if self.status== :SLEEP
         self.statusCount-=1
-        self.statusCount-=1 if self.ability == :EARLYBIRD
+        self.statusCount-=1 if self.hasAbility?(:EARLYBIRD)
         self.pbCureStatus if self.statusCount<=0
       end
       if self.status== :FROZEN
diff --git a/EggHatching.rb b/EggHatching.rb
index 8391a7d..b4f78e4 100644
--- a/EggHatching.rb
+++ b/EggHatching.rb
@@ -198,7 +198,7 @@ Events.onStepTaken+=proc {|sender,e|
      if egg.eggsteps>0
        egg.eggsteps-=1
        for i in $Trainer.party
-         if !i.isEgg? && ((i.ability == :FLAMEBODY) || (i.ability == :MAGMAARMOR) || (i.ability == :STEAMENGINE))
+         if !i.isEgg? && ((i.hasAbility?(:FLAMEBODY)) || (i.hasAbility?(:MAGMAARMOR)) || (i.hasAbility?(:STEAMENGINE)))
            egg.eggsteps-=1
            break
          end
diff --git a/EncounterModifiers.rb b/EncounterModifiers.rb
index a69206e..f9bb736 100644
--- a/EncounterModifiers.rb
+++ b/EncounterModifiers.rb
@@ -91,7 +91,7 @@ Events.onWildPokemonCreate+=proc {|sender,e|
   pokemon=e[0]
   if !$Trainer.party[0].egg?
     ours = $Trainer.party[0]
-    if ours.ability == :SYNCHRONIZE
+    if ours.hasAbility?(:SYNCHRONIZE)
       pokemon.setNature(ours.nature)
     end
   end
diff --git a/Encounters.rb b/Encounters.rb
index 3457e43..eb3f413 100644
--- a/Encounters.rb
+++ b/Encounters.rb
@@ -176,17 +176,17 @@ class PokemonEncounters
 
     if firstpoke && rand(2) == 0
       type = -1
-      if firstpoke.ability == :STATIC
+      if firstpoke.hasAbility?(:STATIC)
         type = :ELECTRIC
-      elsif firstpoke.ability == :MAGNETPULL
+      elsif firstpoke.hasAbility?(:MAGNETPULL)
         type = :STEEL
-      elsif firstpoke.ability == :FLASHFIRE
+      elsif firstpoke.hasAbility?(:FLASHFIRE)
         type = :FIRE
-      elsif firstpoke.ability == :HARVEST
+      elsif firstpoke.hasAbility?(:HARVEST)
         type = :GRASS
-      elsif firstpoke.ability == :LIGHTNINGROD
+      elsif firstpoke.hasAbility?(:LIGHTNINGROD)
         type = :ELECTRIC
-      elsif firstpoke.ability == :STORMDRAIN
+      elsif firstpoke.hasAbility?(:STORMDRAIN)
         type = :WATER        
       end
       if type != -1
@@ -351,11 +351,11 @@ class PokemonEncounters
     return nil if rand(250*16)>=encount
     encpoke=pbEncounteredPokemon(enctype)
     if $Trainer.party.length>0 && !$Trainer.party[0].isEgg?
-      if encpoke && ($Trainer.party[0].ability == :INTIMIDATE) &&
+      if encpoke && ($Trainer.party[0].hasAbility?(:INTIMIDATE)) &&
          encpoke[1]<=$Trainer.party[0].level-5 && rand(2)==0
         encpoke=nil
       end
-      if encpoke && ($Trainer.party[0].ability == :KEENEYE) &&
+      if encpoke && ($Trainer.party[0].hasAbility?(:KEENEYE)) &&
          encpoke[1]<=$Trainer.party[0].level-5 && rand(2)==0
         encpoke=nil
       end
diff --git a/Field.rb b/Field.rb
index dcd98b0..d4d4317 100644
--- a/Field.rb
+++ b/Field.rb
@@ -1251,7 +1251,7 @@ end
 
 # Runs the Pickup event after a battle if a Pokemon has the ability Pickup.
 def Kernel.pbPickup(pokemon)
-  return if !(pokemon.ability == :PICKUP) || pokemon.isEgg?
+  return if !(pokemon.hasAbility?(:PICKUP)) || pokemon.isEgg?
   return if !pokemon.item.nil?
   return if rand(10)!=0
   pickupList= PickupNormal
@@ -1281,7 +1281,7 @@ end
 
 # Runs the Pickup event after a battle if a Pokemon has the ability Pickup.
 def Kernel.pbRunPickup(pokemon)
-  return if !(pokemon.ability == :PICKUP) || pokemon.isEgg?
+  return if !(pokemon.hasAbility?(:PICKUP)) || pokemon.isEgg?
   return if !pokemon.item.nil?
   item = Kernel.pbPickup(pokemon)
   return if item.nil?
@@ -1361,11 +1361,11 @@ Events.onEndBattle+=proc {|sender,e|
   if decision==1
     for pkmn in $Trainer.party
       Kernel.pbRunPickup(pkmn)
-      if (pkmn.ability == :BALLFETCH && $game_variables[:Field_Effect_End_Of_Battle] == :SNOWYMOUNTAIN)  && !pkmn.isEgg? && !pkmn.hasAnItem?
+      if (pkmn.hasAbility?(:BALLFETCH) && $game_variables[:Field_Effect_End_Of_Battle] == :SNOWYMOUNTAIN)  && !pkmn.isEgg? && !pkmn.hasAnItem?
         $PokemonBag.pbStoreItem(:SNOWBALL)
         Kernel.pbMessage(_INTL("{1} fetched a Snowball.", pkmn.name))
       end
-      if (pkmn.ability == :HONEYGATHER) && !pkmn.isEgg? && !pkmn.hasAnItem?
+      if (pkmn.hasAbility?(:HONEYGATHER)) && !pkmn.isEgg? && !pkmn.hasAnItem?
         chance = 5 + ((pkmn.level-1)/10)*5
         if rand(100)<chance
           $PokemonBag.pbStoreItem(:HONEY)
@@ -1494,9 +1494,9 @@ end
 def pbFieldDamage
   flashed=false
   for i in $Trainer.party
-    if i.hp>0 && !i.isEgg? && !(i.ability == :MAGICGUARD) && 
-        !($game_switches[:Devon_Panel_Puzzle] && (i.ability == :VOLTABSORB ||
-        i.ability == :MOTORDRIVE || i.ability == :LIGHTNINGROD || i.hasType?(:GROUND)))
+    if i.hp>0 && !i.isEgg? && !(i.hasAbility?(:MAGICGUARD)) && 
+        !($game_switches[:Devon_Panel_Puzzle] && (i.hasAbility?(:VOLTABSORB) ||
+        i.hasAbility?(:MOTORDRIVE) || i.hasAbility?(:LIGHTNINGROD) || i.hasType?(:GROUND)))
       if !flashed
         $game_screen.start_flash(Color.new(255,0,0,128), 4)
         flashed=true
@@ -1505,7 +1505,7 @@ def pbFieldDamage
       i.hp-=(i.totalhp/8.0).floor
       i.hp=1 if i.hp==0
       pbCheckAllFainted()
-    elsif i.ability == :VOLTABSORB 
+    elsif i.hasAbility?(:VOLTABSORB) 
       i.hp+=(i.totalhp/16.0).floor
       i.hp = i.totalhp if i.hp > i.totalhp 
     end
@@ -1519,7 +1519,7 @@ Events.onStepTakenTransferPossible+=proc {|sender,e|
   if $PokemonGlobal.stepcount % 4 == 0 && POISONINFIELD && $game_switches[:Overworld_Poison_Password] != true
     flashed=false
     for i in $Trainer.party
-      if i.status== :POISON && i.hp>0 && !i.isEgg? && !(i.ability == :POISONHEAL) && !(i.ability == :MAGICGUARD)
+      if i.status== :POISON && i.hp>0 && !i.isEgg? && !(i.hasAbility?(:POISONHEAL)) && !(i.hasAbility?(:MAGICGUARD))
         if defined?(POISON_ANIMATION_ID) && !flashed
           #$scene.spriteset.addUserAnimation(20,$game_player.x,$game_player.y,true) if $scene.is_a?(Scene_Map)
           $game_player.animation_id = POISON_ANIMATION_ID
@@ -1726,8 +1726,8 @@ end
 def pbFishing(hasencounter,rodtype=1)
   bitechance=50+(15*rodtype)   # 65, 80, 95
   if $Trainer.party.length>0 && !$Trainer.party[0].isEgg?
-    bitechance*=2 if ($Trainer.party[0].ability == :STICKYHOLD)
-    bitechance*=2 if ($Trainer.party[0].ability == :SUCTIONCUPS)
+    bitechance*=2 if ($Trainer.party[0].hasAbility?(:STICKYHOLD))
+    bitechance*=2 if ($Trainer.party[0].hasAbility?(:SUCTIONCUPS))
   end
   hookchance=100
   oldpattern=$game_player.fullPattern
diff --git a/OrgBattleRules.rb b/OrgBattleRules.rb
index 96c20f5..9b6ecd2 100644
--- a/OrgBattleRules.rb
+++ b/OrgBattleRules.rb
@@ -374,19 +374,19 @@ class StandardRestriction
     return false if !pokemon || pokemon.isEgg?
     basestatsum = $cache.pkmn.dig(pokemon.species,:BaseStats).sum
     # Surge abilities are banned
-    if (pokemon.ability == :GRASSYSURGE) ||
-       (pokemon.ability == :MISTYSURGE) ||
-       (pokemon.ability == :PSYCHICSURGE) ||
-       (pokemon.ability == :ELECTRICSURGE) ||
-       (pokemon.ability == :DARKSURGE)
+    if (pokemon.hasAbility?(:GRASSYSURGE)) ||
+       (pokemon.hasAbility?(:MISTYSURGE)) ||
+       (pokemon.hasAbility?(:PSYCHICSURGE)) ||
+       (pokemon.hasAbility?(:ELECTRICSURGE)) ||
+       (pokemon.hasAbility?(:DARKSURGE))
       return false
     end
     # Ultra Beasts are banned
-    if (pokemon.ability == :BEASTBOOST) 
+    if (pokemon.hasAbility?(:BEASTBOOST))
       return false
     end
     # Zygarde Complete is banned
-    if (pokemon.ability == :POWERCONSTRUCT)
+    if (pokemon.hasAbility?(:POWERCONSTRUCT))
       return false
     end
     # Kyogre & Groudon are banned
diff --git a/Party.rb b/Party.rb
index 20adcf3..ff01f62 100644
--- a/Party.rb
+++ b/Party.rb
@@ -1023,7 +1023,7 @@ class PokemonScreen
       pkmn.form = pkmn.getForm(pkmn)
       if check != pkmn.form
         if pkmn.getAbilityList.length > 1
-          if pkmn.getAbilityList.include?(pkmn.originalAbility)
+          if pkmn.getAbilityList.any? { |a| pkmn.originalhasAbility?(a) }
             pkmn.ability = pkmn.originalAbility
             pkmn.originalAbility = nil
           else
@@ -1083,7 +1083,7 @@ class PokemonScreen
             pkmn.form = pkmn.getForm(pkmn)
             if check != pkmn.form
               if pkmn.getAbilityList.length > 1
-                if pkmn.getAbilityList.include?(pkmn.originalAbility)
+                if pkmn.getAbilityList.any? { |a| pkmn.originalhasAbility?(a) }
                   pkmn.ability = pkmn.originalAbility
                   pkmn.originalAbility = nil
                 else
@@ -1107,7 +1107,7 @@ class PokemonScreen
         pkmn.form = pkmn.getForm(pkmn)
         if check != pkmn.form
           if pkmn.getAbilityList.length > 1
-            if pkmn.getAbilityList.include?(pkmn.originalAbility)
+            if pkmn.getAbilityList.any? { |a| pkmn.originalhasAbility?(a) }
               pkmn.ability = pkmn.originalAbility
               pkmn.originalAbility = nil
             else
diff --git a/Pokemon.rb b/Pokemon.rb
index ba693e4..11ff3f6 100644
--- a/Pokemon.rb
+++ b/Pokemon.rb
@@ -21,6 +21,7 @@ class PokeBattle_Pokemon
   attr_accessor :status      # Status problem (PBStatuses)
   attr_accessor :form
   attr_accessor :ability
+  attr_accessor :abilities
   #other data
   attr_accessor :personalID  # Personal ID
   attr_accessor :trainerID   # 32-bit Trainer ID 
@@ -214,6 +215,10 @@ class PokeBattle_Pokemon
 ################################################################################
 # Ability
 ################################################################################
+  def hasAbility?(ability)
+    return @ability == ability || (@abilities || []).include?(ability)
+  end
+
   def abilityIndex
     abillist = getAbilityList
     abil=abillist[@personalID % (abillist.length)]
@@ -734,7 +739,7 @@ class PokeBattle_Pokemon
   def isAirborne?
     return false if @item == :IRONBALL
     return true if (self.type1 == :FLYING || self.type2 == :FLYING)
-    return true if @ability == :LEVITATE
+    return true if self.hasAbility?(:LEVITATE)
     return true if @item == :AIRBALLOON
     return false
   end
