diff --git a/023_Game_Map_Resolution v17.rb b/023_Game_Map_Resolution v17.rb
index 193272b..dda927b 100644
--- a/023_Game_Map_Resolution v17.rb	
+++ b/023_Game_Map_Resolution v17.rb	
@@ -54,4 +54,5 @@ class Game_Map
       @scroll_rest = distance * Game_Map.realResX
     end
     @scroll_speed = speed
-  endend
\ No newline at end of file
+  end
+end
diff --git a/113_&as;PScreen_Party.rb b/113_&as;PScreen_Party.rb
index fc6a5e3..e67beff 100644
--- a/113_&as;PScreen_Party.rb
+++ b/113_&as;PScreen_Party.rb
@@ -1256,10 +1256,7 @@ class PokemonScreen
       cmdMail=-1
       # Build the commands
       commands[cmdSummary=commands.length]=_INTL("Summary")
-      if $DEBUG
-        # Commands for debug mode only
-        commands[cmdDebug=commands.length]=_INTL("Debug")
-      end
+      commands[cmdDebug=commands.length]=_INTL("Debug")
       cmdMoves=[-1,-1,-1,-1]
       for i in 0...pkmn.moves.length
         move=pkmn.moves[i]
@@ -1370,5 +1367,716 @@ class PokemonScreen
     end
     @scene.pbEndScene
     return nil
-  end  
-end
\ No newline at end of file
+  end
+
+  def pbPokemonDebugMenu(s,pkmn, pkmnid)
+		viewport = Viewport.new(286,0,Graphics.width,Graphics.height)
+		viewport.z = 99999
+		sprites = {}
+		commands = [
+      _INTL("HP/Status"),
+      _INTL("Level"),
+      _INTL("Species"),
+      _INTL("Moves"),
+      _INTL("Gender"),
+      _INTL("Ability"),
+      _INTL("Nature"),
+      _INTL("Shininess"),
+      _INTL("Form"),
+      _INTL("Happiness"),
+      _INTL("EV/IV/pID"),
+      _INTL("Pokérus"),
+      _INTL("Ownership"),
+      _INTL("Nickname"),
+      _INTL("Poké Ball"),
+      _INTL("Ribbons"),
+      _INTL("Egg"),
+      _INTL("Shadow Pokémon"),
+      _INTL("Duplicate"),
+      _INTL("Delete"),
+    ]
+		sprites["cmdwindow"] = Window_CommandPokemonEx.new(commands)
+		cmdwindow = sprites["cmdwindow"]
+		cmdwindow.viewport = viewport
+		cmdwindow.resizeToFit(cmdwindow.commands)
+		cmdwindow.height = Graphics.height if cmdwindow.height>Graphics.height
+		cmdwindow.x = 0
+		cmdwindow.y = 0
+		cmdwindow.visible = true
+		pbFadeInAndShow(sprites)
+		cmd = -1
+		loop do
+			loop do
+			cmdwindow.update
+			Graphics.update
+			Input.update
+			if Input.trigger?(Input::B)
+				cmd = -1
+				break
+			end
+			if Input.trigger?(Input::C)
+				cmd = cmdwindow.index
+				break
+			end
+			end
+			break if cmd == -1
+      cmdwindow.visible = false
+			if cmd == 0
+        hpstatus(pkmn, pkmnid)
+      elsif cmd == 1
+			  level(pkmn, pkmnid)
+      elsif cmd == 2
+			  species(pkmn, pkmnid)
+      elsif cmd == 3
+			  moves(pkmn, pkmnid)
+      elsif cmd == 4
+			  gender(pkmn, pkmnid)
+      elsif cmd == 5
+			  nature(pkmn, pkmnid)
+      elsif cmd == 6
+			  shininess(pkmn, pkmnid)
+      elsif cmd == 7
+			  form(pkmn, pkmnid)
+      elsif cmd == 8
+			  happiness(pkmn, pkmnid)
+      elsif cmd == 9
+			  evivpid(pkmn, pkmnid)
+      elsif cmd == 10
+			  pokerus(pkmn, pkmnid)
+      elsif cmd == 11
+			  ownership(pkmn, pkmnid)
+      elsif cmd == 12
+			  nickname(pkmn, pkmnid)
+      elsif cmd == 13
+			  pokeball(pkmn, pkmnid)
+      elsif cmd == 14
+			  ribbons(pkmn, pkmnid)
+      elsif cmd == 15
+			  egg(pkmn, pkmnid)
+      elsif cmd == 16
+			  shadowpokemon(pkmn, pkmnid)
+      elsif cmd == 17
+			  duplicate(pkmn, pkmnid)
+      elsif cmd == 18
+			  delete(pkmn, pkmnid)
+			end
+      cmdwindow.visible = true
+		end
+		cmdwindow.visible = false
+	end
+
+	def hpstatus(pkmn, pkmnid)
+		cmd=0
+		loop do
+			cmd=@scene.pbShowCommands(_INTL("Do what with {1}?",pkmn.name),[
+			 _INTL("Set HP"),
+			 _INTL("Status: Sleep"),
+			 _INTL("Status: Poison"),
+			 _INTL("Status: Burn"),
+			 _INTL("Status: Paralysis"),
+			 _INTL("Status: Frozen"),
+			 _INTL("Fainted"),
+			 _INTL("Heal")
+			],296,0,pkmn)
+			# Break
+			if cmd==-1
+			break
+			# Set HP
+			elsif cmd==0
+			params=ChooseNumberParams.new
+			params.setRange(0,pkmn.totalhp)
+			params.setDefaultValue(pkmn.hp)
+			newhp=Kernel.pbMessageChooseNumber(
+				 _INTL("Set the Pokémon's HP (max. {1}).",pkmn.totalhp),params) { @scene.update }
+			if newhp!=pkmn.hp
+				pkmn.hp=newhp
+				Kernel.pbMessage(_INTL("{1}'s HP was set to {2}.",pkmn.name,pkmn.hp))
+				pbRefreshSingle(pkmnid)
+			end
+			# Set status
+			elsif cmd>=1 && cmd<=5
+			if pkmn.hp>0
+				pkmn.status=cmd
+				pkmn.statusCount=0
+				if pkmn.status==PBStatuses::SLEEP
+				params=ChooseNumberParams.new
+				params.setRange(0,9)
+				params.setDefaultValue(0)
+				sleep=Kernel.pbMessageChooseNumber(
+					 _INTL("Set the Pokémon's sleep count."),params) { @scene.update }
+				pkmn.statusCount=sleep
+				end
+				Kernel.pbMessage(_INTL("{1}'s status was changed.",pkmn.name))
+				pbRefreshSingle(pkmnid)
+			else
+				Kernel.pbMessage(_INTL("{1}'s status could not be changed.",pkmn.name))
+			end
+			# Faint
+			elsif cmd==6
+			pkmn.hp=0
+			Kernel.pbMessage(_INTL("{1}'s HP was set to 0.",pkmn.name))
+			pbRefreshSingle(pkmnid)
+			# Heal
+			elsif cmd==7
+			pkmn.heal
+			Kernel.pbMessage(_INTL("{1} was fully healed.",pkmn.name))
+			pbRefreshSingle(pkmnid)
+			end
+		end
+	end
+
+	def level(pkmn, pkmnid)
+		params=ChooseNumberParams.new
+		params.setRange(1,PBExperience::MAXLEVEL)
+		params.setDefaultValue(pkmn.level)
+		level=Kernel.pbMessageChooseNumber(
+			 _INTL("Set the Pokémon's level (max. {1}).",PBExperience::MAXLEVEL),params) { @scene.update }
+		if level!=pkmn.level
+			pkmn.level=level
+			pkmn.calcStats
+			Kernel.pbMessage(_INTL("{1}'s level was set to {2}.",pkmn.name,pkmn.level))
+			pbRefreshSingle(pkmnid)
+		end
+	end
+
+	def species(pkmn, pkmnid)
+		if pbNewSelectStyle
+			species = pbChoosePokemonID
+		else
+			species=pbChooseSpecies(pkmn.species)
+		end
+		if species!=0
+			oldspeciesname=PBSpecies.getName(pkmn.species)
+			pkmn.species=species
+			pkmn.calcStats
+			oldname=pkmn.name
+			pkmn.name=PBSpecies.getName(pkmn.species) if pkmn.name==oldspeciesname
+			Kernel.pbMessage(_INTL("{1}'s species was changed to {2}.",oldname,PBSpecies.getName(pkmn.species)))
+			pbSeenForm(pkmn)
+			pbRefreshSingle(pkmnid)
+		end
+	end
+
+	def moves(pkmn, pkmnid)
+		cmd=0
+		loop do
+			cmd=@scene.pbShowCommands(_INTL("Do what with {1}?",pkmn.name),[
+			 _INTL("Teach move"),
+			 _INTL("Forget move"),
+			 _INTL("Reset movelist"),
+			 _INTL("Reset initial moves")],296,0,pkmn)
+			# Break
+			if cmd==-1
+			break
+			# Teach move
+			elsif cmd==0
+			if pbNewSelectStyle
+				move=pbChooseMoveID
+			else
+				move=pbChooseMoveList
+			end
+			if move!=0
+				pbLearnMove(pkmn,move)
+				pbRefreshSingle(pkmnid)
+			end
+			# Forget move
+			elsif cmd==1
+			move=pbChooseMove(pkmn,_INTL("Choose move to forget."))
+			if move>=0
+				movename=PBMoves.getName(pkmn.moves[move].id)
+				pbDeleteMove(pkmn,move)
+				Kernel.pbMessage(_INTL("{1} forgot {2}.",pkmn.name,movename))
+				pbRefreshSingle(pkmnid)
+			end
+			# Reset movelist
+			elsif cmd==2
+			pkmn.resetMoves
+			Kernel.pbMessage(_INTL("{1}'s moves were reset.",pkmn.name))
+			pbRefreshSingle(pkmnid)
+			# Reset initial moves
+			elsif cmd==3
+			pkmn.pbRecordFirstMoves
+			Kernel.pbMessage(_INTL("{1}'s moves were set as its first-known moves.",pkmn.name))
+			pbRefreshSingle(pkmnid)
+			end
+		end
+	end
+
+	def gender(pkmn, pkmnid)
+		if pkmn.gender==2
+			Kernel.pbMessage(_INTL("{1} is genderless.",pkmn.name))
+		else
+			cmd=0
+			loop do
+			oldgender=(pkmn.isMale?) ? _INTL("male") : _INTL("female")
+			msg=[_INTL("Gender {1} is natural.",oldgender),
+				 _INTL("Gender {1} is being forced.",oldgender)][pkmn.genderflag ? 1 : 0]
+			cmd=@scene.pbShowCommands(msg,[
+				 _INTL("Make male"),
+				 _INTL("Make female"),
+				 _INTL("Remove override")],296,0,pkmn)
+			# Break
+			if cmd==-1
+				break
+			# Make male
+			elsif cmd==0
+				pkmn.setGender(0)
+				if pkmn.isMale?
+				Kernel.pbMessage(_INTL("{1} is now male.",pkmn.name))
+				else
+				Kernel.pbMessage(_INTL("{1}'s gender couldn't be changed.",pkmn.name))
+				end
+			# Make female
+			elsif cmd==1
+				pkmn.setGender(1)
+				if pkmn.isFemale?
+				Kernel.pbMessage(_INTL("{1} is now female.",pkmn.name))
+				else
+				Kernel.pbMessage(_INTL("{1}'s gender couldn't be changed.",pkmn.name))
+				end
+			# Remove override
+			elsif cmd==2
+				pkmn.genderflag=nil
+				Kernel.pbMessage(_INTL("Gender override removed."))
+			end
+			pbSeenForm(pkmn)
+			pbRefreshSingle(pkmnid)
+			end
+		end
+	end
+
+	def ability(pkmn, pkmnid)
+		cmd=0
+		loop do
+			abils=pkmn.getAbilityList
+			oldabil=PBAbilities.getName(pkmn.ability)
+			commands=[]
+			for i in 0...abils[0].length
+			commands.push((abils[1][i]<2 ? "" : "(H) ")+PBAbilities.getName(abils[0][i]))
+			end
+			commands.push(_INTL("Remove override"))
+			msg=[_INTL("Ability {1} is natural.",oldabil),
+				 _INTL("Ability {1} is being forced.",oldabil)][pkmn.abilityflag ? 1 : 0]
+			cmd=@scene.pbShowCommands(msg,commands,296,0,pkmn)
+			# Break
+			if cmd==-1
+			break
+			# Set ability override
+			elsif cmd>=0 && cmd<abils[0].length
+			pkmn.setAbility(abils[1][cmd])
+			# Remove override
+			elsif cmd==abils[0].length
+			pkmn.abilityflag=nil
+			end
+			pbRefreshSingle(pkmnid)
+		end
+	end
+
+	def nature(pkmn, pkmnid)
+		cmd=0
+		loop do
+			oldnature=PBNatures.getName(pkmn.nature)
+			commands=[]
+			(PBNatures.getCount).times do |i|
+			commands.push(PBNatures.getName(i))
+			end
+			commands.push(_INTL("Remove override"))
+			msg=[_INTL("Nature {1} is natural.",oldnature),
+				 _INTL("Nature {1} is being forced.",oldnature)][pkmn.natureflag ? 1 : 0]
+			cmd=@scene.pbShowCommands_old(msg,commands,cmd)
+			# Break
+			if cmd==-1
+			break
+			# Set nature override
+			elsif cmd>=0 && cmd<PBNatures.getCount
+			pkmn.setNature(cmd)
+			pkmn.calcStats
+			# Remove override
+			elsif cmd==PBNatures.getCount
+			pkmn.natureflag=nil
+			end
+			pbRefreshSingle(pkmnid)
+		end
+	end
+
+	def shininess(pkmn, pkmnid)
+		cmd=0
+		loop do
+			oldshiny=(pkmn.isShiny?) ? _INTL("shiny") : _INTL("normal")
+			msg=[_INTL("Shininess ({1}) is natural.",oldshiny),
+				 _INTL("Shininess ({1}) is being forced.",oldshiny)][pkmn.shinyflag!=nil ? 1 : 0]
+			cmd=@scene.pbShowCommands(msg,[
+				 _INTL("Make shiny"),
+				 _INTL("Make normal"),
+				 _INTL("Remove override")],296,0,pkmn)
+			# Break
+			if cmd==-1
+			break
+			# Make shiny
+			elsif cmd==0
+			pkmn.makeShiny
+			# Make normal
+			elsif cmd==1
+			pkmn.makeNotShiny
+			# Remove override
+			elsif cmd==2
+			pkmn.shinyflag=nil
+			end
+			pbRefreshSingle(pkmnid)
+		end
+	end
+
+	def form(pkmn, pkmnid)
+		params=ChooseNumberParams.new
+		params.setRange(0,100)
+		params.setDefaultValue(pkmn.form)
+		f=Kernel.pbMessageChooseNumber(
+			 _INTL("Set the Pokémon's form."),params) { @scene.update }
+		if f!=pkmn.form
+			pkmn.form=f
+			Kernel.pbMessage(_INTL("{1}'s form was set to {2}.",pkmn.name,pkmn.form))
+			pbSeenForm(pkmn)
+			pbRefreshSingle(pkmnid)
+		end
+	end
+
+	def happiness(pkmn, pkmnid)
+		params=ChooseNumberParams.new
+		params.setRange(0,255)
+		params.setDefaultValue(pkmn.happiness)
+		h=Kernel.pbMessageChooseNumber(
+			 _INTL("Set the Pokémon's happiness (max. 255)."),params) { @scene.update }
+		if h!=pkmn.happiness
+			pkmn.happiness=h
+			Kernel.pbMessage(_INTL("{1}'s happiness was set to {2}.",pkmn.name,pkmn.happiness))
+			pbRefreshSingle(pkmnid)
+		end
+	end
+
+	def evivpid(pkmn, pkmnid)
+		stats=[_INTL("HP"),_INTL("Attack"),_INTL("Defense"),_INTL("Speed"),_INTL("Sp. Attack"),_INTL("Sp. Defense")]
+		cmd=0
+		loop do
+			persid=sprintf("0x%08X",pkmn.personalID)
+			cmd=@scene.pbShowCommands(_INTL("Personal ID is {1}.",persid),[
+			 _INTL("Set EVs"),
+			 _INTL("Set IVs"),
+			 _INTL("Randomise pID")],296,0,pkmn)
+			case cmd
+			# Break
+			when -1
+				break
+			# Set EVs
+			when 0
+				cmd2=0
+				loop do
+				evcommands=[]
+				for i in 0...stats.length
+					evcommands.push(stats[i]+" (#{pkmn.ev[i]})")
+				end
+				cmd2=@scene.pbShowCommands(_INTL("Change which EV?"),evcommands,296,0,pkmn)
+				if cmd2==-1
+					break
+				elsif cmd2>=0 && cmd2<stats.length
+					params=ChooseNumberParams.new
+					params.setRange(0,255)
+					params.setDefaultValue(pkmn.ev[cmd2])
+					params.setCancelValue(pkmn.ev[cmd2])
+					f=Kernel.pbMessageChooseNumber(
+					 _INTL("Set the EV for {1} (max. 255).",stats[cmd2]),params) { @scene.update }
+					pkmn.ev[cmd2]=f
+					pkmn.totalhp
+					pkmn.calcStats
+					pbRefreshSingle(pkmnid)
+				end
+				end
+			# Set IVs
+			when 1
+				cmd2=0
+				loop do
+				hiddenpower=pbHiddenPower(pkmn.iv)
+				msg=_INTL("Hidden Power:\n{1}, power {2}.",PBTypes.getName(hiddenpower[0]),hiddenpower[1])
+				ivcommands=[]
+				for i in 0...stats.length
+					ivcommands.push(stats[i]+" (#{pkmn.iv[i]})")
+				end
+				ivcommands.push(_INTL("Randomise all"))
+				cmd2=@scene.pbShowCommands(msg,ivcommands,296,0,pkmn)
+				if cmd2==-1
+					break
+				elsif cmd2>=0 && cmd2<stats.length
+					params=ChooseNumberParams.new
+					params.setRange(0,31)
+					params.setDefaultValue(pkmn.iv[cmd2])
+					params.setCancelValue(pkmn.iv[cmd2])
+					f=Kernel.pbMessageChooseNumber(
+					 _INTL("Set the IV for {1} (max. 31).",stats[cmd2]),params) { @scene.update }
+					pkmn.iv[cmd2]=f
+					pkmn.calcStats
+					pbRefreshSingle(pkmnid)
+				elsif cmd2==ivcommands.length-1
+					pkmn.iv[0]=rand(32)
+					pkmn.iv[1]=rand(32)
+					pkmn.iv[2]=rand(32)
+					pkmn.iv[3]=rand(32)
+					pkmn.iv[4]=rand(32)
+					pkmn.iv[5]=rand(32)
+					pkmn.calcStats
+					pbRefreshSingle(pkmnid)
+				end
+				end
+			# Randomise pID
+			when 2
+				pkmn.personalID=rand(256)
+				pkmn.personalID|=rand(256)<<8
+				pkmn.personalID|=rand(256)<<16
+				pkmn.personalID|=rand(256)<<24
+				pkmn.calcStats
+				pbRefreshSingle(pkmnid)
+			end
+		end
+	end
+
+	def pokerus(pkmn, pkmnid)
+		cmd=0
+		loop do
+			pokerus=(pkmn.pokerus) ? pkmn.pokerus : 0
+			msg=[_INTL("{1} doesn't have Pokérus.",pkmn.name),
+				 _INTL("Has strain {1}, infectious for {2} more days.",pokerus/16,pokerus%16),
+				 _INTL("Has strain {1}, not infectious.",pokerus/16)][pkmn.pokerusStage]
+			cmd=@scene.pbShowCommands(msg,[
+				 _INTL("Give random strain"),
+				 _INTL("Make not infectious"),
+				 _INTL("Clear Pokérus")],296,0,pkmn)
+			# Break
+			if cmd==-1
+			break
+			# Give random strain
+			elsif cmd==0
+			pkmn.givePokerus
+			# Make not infectious
+			elsif cmd==1
+			strain=pokerus/16
+			p=strain<<4
+			pkmn.pokerus=p
+			# Clear Pokérus
+			elsif cmd==2
+			pkmn.pokerus=0
+			end
+		end
+	end
+
+	def ownership(pkmn, pkmnid)
+		cmd=0
+		loop do
+			gender=[_INTL("Male"),_INTL("Female"),_INTL("Unknown")][pkmn.otgender]
+			msg=[_INTL("Player's Pokémon\n{1}\n{2}\n{3} ({4})",pkmn.ot,gender,pkmn.publicID,pkmn.trainerID),
+				 _INTL("Foreign Pokémon\n{1}\n{2}\n{3} ({4})",pkmn.ot,gender,pkmn.publicID,pkmn.trainerID)
+				][pkmn.isForeign?($Trainer) ? 1 : 0]
+			cmd=@scene.pbShowCommands(msg,[
+				 _INTL("Make player's"),
+				 _INTL("Set OT's name"),
+				 _INTL("Set OT's gender"),
+				 _INTL("Random foreign ID"),
+				 _INTL("Set foreign ID")],296,0,pkmn)
+			# Break
+			if cmd==-1
+			break
+			# Make player's
+			elsif cmd==0
+			pkmn.trainerID=$Trainer.id
+			pkmn.ot=$Trainer.name
+			pkmn.otgender=$Trainer.gender
+			# Set OT's name
+			elsif cmd==1
+			newot=pbEnterPlayerName(_INTL("{1}'s OT's name?",pkmn.name),1,12)
+			pkmn.ot=newot
+			# Set OT's gender
+			elsif cmd==2
+			cmd2=@scene.pbShowCommands(_INTL("Set OT's gender."),
+				 [_INTL("Male"),_INTL("Female"),_INTL("Unknown")],296,0,pkmn)
+			pkmn.otgender=cmd2 if cmd2>=0
+			# Random foreign ID
+			elsif cmd==3
+			pkmn.trainerID=$Trainer.getForeignID
+			# Set foreign ID
+			elsif cmd==4
+			params=ChooseNumberParams.new
+			params.setRange(0,65535)
+			params.setDefaultValue(pkmn.publicID)
+			val=Kernel.pbMessageChooseNumber(
+				 _INTL("Set the new ID (max. 65535)."),params) { @scene.update }
+			pkmn.trainerID=val
+			pkmn.trainerID|=val<<16
+			end
+		end
+	end
+
+	def nickname(pkmn, pkmnid)
+		cmd=0
+		loop do
+			speciesname=PBSpecies.getName(pkmn.species)
+			msg=[_INTL("{1} has the nickname {2}.",speciesname,pkmn.name),
+				 _INTL("{1} has no nickname.",speciesname)][pkmn.name==speciesname ? 1 : 0]
+			cmd=@scene.pbShowCommands(msg,[
+				 _INTL("Rename"),
+				 _INTL("Erase name")],296,0,pkmn)
+			# Break
+			if cmd==-1
+			break
+			# Rename
+			elsif cmd==0
+			newname=pbEnterPokemonName(_INTL("{1}'s nickname?",speciesname),0,11,"",pkmn)
+			pkmn.name=(newname=="") ? speciesname : newname
+			pbRefreshSingle(pkmnid)
+			# Erase name
+			elsif cmd==1
+			pkmn.name=speciesname
+			end
+		end
+	end
+
+	def pokeball(pkmn, pkmnid)
+		cmd=0
+		loop do
+			oldball=PBItems.getName(pbBallTypeToBall(pkmn.ballused))
+			commands=[]; balls=[]
+			for key in $BallTypes.keys
+			item=getID(PBItems,$BallTypes[key])
+			balls.push([key,PBItems.getName(item)]) if item && item>0
+			end
+			balls.sort! {|a,b| a[1]<=>b[1]}
+			for i in 0...commands.length
+			cmd=i if pkmn.ballused==balls[i][0]
+			end
+			for i in balls
+			commands.push(i[1])
+			end
+			cmd=@scene.pbShowCommands_old(_INTL("{1} used.",oldball),commands,cmd)
+			if cmd==-1
+			break
+			else
+			pkmn.ballused=balls[cmd][0]
+			newBallName=PBItems.getName(pbBallTypeToBall(pkmn.ballused))
+			Kernel.pbMessage(_INTL("Using {1} for {2}",newBallName, pkmn.name))
+			end
+		end
+		end
+
+		def ribbons(pkmn, pkmnid)
+		cmd=0
+		loop do
+			commands=[]
+			for i in 1..PBRibbons.maxValue
+			commands.push(_INTL("{1} {2}",
+				 pkmn.hasRibbon?(i) ? "[X]" : "[  ]",PBRibbons.getName(i)))
+			end
+			cmd=@scene.pbShowCommands_old(_INTL("{1} ribbons.",pkmn.ribbonCount),commands,cmd)
+			if cmd==-1
+			break
+			elsif cmd>=0 && cmd<commands.length
+			if pkmn.hasRibbon?(cmd+1)
+				pkmn.takeRibbon(cmd+1)
+			else
+				pkmn.giveRibbon(cmd+1)
+			end
+			end
+		end
+	end
+
+	def egg(pkmn, pkmnid)
+		cmd=0
+		loop do
+			msg=[_INTL("Not an egg"),
+				 _INTL("Egg with eggsteps: {1}.",pkmn.eggsteps)][pkmn.isEgg? ? 1 : 0]
+			cmd=@scene.pbShowCommands(msg,[
+				 _INTL("Make egg"),
+				 _INTL("Make Pokémon"),
+				 _INTL("Set eggsteps to 1")],296,0,pkmn)
+			# Break
+			if cmd==-1
+			break
+			# Make egg
+			elsif cmd==0
+			if pbHasEgg?(pkmn.species) ||
+				 pbConfirm(_INTL("{1} cannot be an egg. Make egg anyway?",PBSpecies.getName(pkmn.species)))
+				pkmn.level=EGGINITIALLEVEL
+				pkmn.calcStats
+				pkmn.name=_INTL("Egg")
+				dexdata=pbOpenDexData
+				pbDexDataOffset(dexdata,pkmn.species,21)
+				pkmn.eggsteps=dexdata.fgetw
+				dexdata.close
+				pkmn.hatchedMap=0
+				pkmn.obtainMode=1
+				pbRefreshSingle(pkmnid)
+			end
+			# Make Pokémon
+			elsif cmd==1
+			pkmn.name=PBSpecies.getName(pkmn.species)
+			pkmn.eggsteps=0
+			pkmn.hatchedMap=0
+			pkmn.obtainMode=0
+			pbRefreshSingle(pkmnid)
+			# Set eggsteps to 1
+			elsif cmd==2
+			pkmn.eggsteps=1 if pkmn.eggsteps>0
+			end
+		end
+	end
+
+	def shadowpokemon(pkmn, pkmnid)
+		cmd=0
+		loop do
+			msg=[_INTL("Not a Shadow Pokémon."),
+				 _INTL("Heart gauge is {1}.",pkmn.heartgauge)][(pkmn.isShadow? rescue false) ? 1 : 0]
+			cmd=@scene.pbShowCommands(msg,[
+			 _INTL("Make Shadow"),
+			 _INTL("Lower heart gauge")],296,0,pkmn)
+			# Break
+			if cmd==-1
+			break
+			# Make Shadow
+			elsif cmd==0
+			if !(pkmn.isShadow? rescue false) && pkmn.respond_to?("makeShadow")
+				pkmn.makeShadow
+				Kernel.pbMessage(_INTL("{1} is now a Shadow Pokémon.",pkmn.name))
+				pbRefreshSingle(pkmnid)
+			else
+				Kernel.pbMessage(_INTL("{1} is already a Shadow Pokémon.",pkmn.name))
+			end
+			# Lower heart gauge
+			elsif cmd==1
+			if (pkmn.isShadow? rescue false)
+				prev=pkmn.heartgauge
+				pkmn.adjustHeart(-700)
+				Kernel.pbMessage(_INTL("{1}'s heart gauge was lowered from {2} to {3} (now stage {4}).",
+				 pkmn.name,prev,pkmn.heartgauge,pkmn.heartStage))
+				pbReadyToPurify(pkmn)
+			else
+				Kernel.pbMessage(_INTL("{1} is not a Shadow Pokémon.",pkmn.name))
+			end
+			end
+		end
+	end
+
+	def duplicate(pkmn, pkmnid)
+		if pbConfirm(_INTL("Are you sure you want to copy this Pokémon?"))
+			clonedpkmn=pkmn.clone
+			clonedpkmn.iv=pkmn.iv.clone
+			clonedpkmn.ev=pkmn.ev.clone
+			pbStorePokemon(clonedpkmn)
+			pbHardRefresh
+			Kernel.pbMessage(_INTL("The Pokémon was duplicated."))
+		end
+	end
+
+	def delete(pkmn, pkmnid)
+		if pbConfirm(_INTL("Are you sure you want to delete this Pokémon?"))
+			@party[pkmnid]=nil
+			@party.compact!
+			pbHardRefresh
+			Kernel.pbMessage(_INTL("The Pokémon was deleted."))
+		end
+	end
+end
